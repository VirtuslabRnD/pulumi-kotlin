{
  "resources": {
    "aws:route53/record:Record": {
      "description": "Provides a Route53 record resource.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n### Simple routing policy\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as aws from \"@pulumi/aws\";\n\nconst www = new aws.route53.Record(\"www\", {\n    zoneId: aws_route53_zone.primary.zone_id,\n    name: \"www.example.com\",\n    type: \"A\",\n    ttl: 300,\n    records: [aws_eip.lb.public_ip],\n});\n```\n```python\nimport pulumi\nimport pulumi_aws as aws\n\nwww = aws.route53.Record(\"www\",\n    zone_id=aws_route53_zone[\"primary\"][\"zone_id\"],\n    name=\"www.example.com\",\n    type=\"A\",\n    ttl=300,\n    records=[aws_eip[\"lb\"][\"public_ip\"]])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Aws = Pulumi.Aws;\n\nreturn await Deployment.RunAsync(() => \n{\n    var www = new Aws.Route53.Record(\"www\", new()\n    {\n        ZoneId = aws_route53_zone.Primary.Zone_id,\n        Name = \"www.example.com\",\n        Type = \"A\",\n        Ttl = 300,\n        Records = new[]\n        {\n            aws_eip.Lb.Public_ip,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/route53\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := route53.NewRecord(ctx, \"www\", &route53.RecordArgs{\n\t\t\tZoneId: pulumi.Any(aws_route53_zone.Primary.Zone_id),\n\t\t\tName:   pulumi.String(\"www.example.com\"),\n\t\t\tType:   pulumi.String(\"A\"),\n\t\t\tTtl:    pulumi.Int(300),\n\t\t\tRecords: pulumi.StringArray{\n\t\t\t\tpulumi.Any(aws_eip.Lb.Public_ip),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.aws.route53.Record;\nimport com.pulumi.aws.route53.RecordArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var www = new Record(\"www\", RecordArgs.builder()        \n            .zoneId(aws_route53_zone.primary().zone_id())\n            .name(\"www.example.com\")\n            .type(\"A\")\n            .ttl(300)\n            .records(aws_eip.lb().public_ip())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  www:\n    type: aws:route53:Record\n    properties:\n      zoneId: ${aws_route53_zone.primary.zone_id}\n      name: www.example.com\n      type: A\n      ttl: 300\n      records:\n        - ${aws_eip.lb.public_ip}\n```\n{{% /example %}}\n{{% example %}}\n### Weighted routing policy\n\nOther routing policies are configured similarly. See [Amazon Route 53 Developer Guide](https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/routing-policy.html) for details.\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as aws from \"@pulumi/aws\";\n\nconst www_dev = new aws.route53.Record(\"www-dev\", {\n    zoneId: aws_route53_zone.primary.zone_id,\n    name: \"www\",\n    type: \"CNAME\",\n    ttl: 5,\n    weightedRoutingPolicies: [{\n        weight: 10,\n    }],\n    setIdentifier: \"dev\",\n    records: [\"dev.example.com\"],\n});\nconst www_live = new aws.route53.Record(\"www-live\", {\n    zoneId: aws_route53_zone.primary.zone_id,\n    name: \"www\",\n    type: \"CNAME\",\n    ttl: 5,\n    weightedRoutingPolicies: [{\n        weight: 90,\n    }],\n    setIdentifier: \"live\",\n    records: [\"live.example.com\"],\n});\n```\n```python\nimport pulumi\nimport pulumi_aws as aws\n\nwww_dev = aws.route53.Record(\"www-dev\",\n    zone_id=aws_route53_zone[\"primary\"][\"zone_id\"],\n    name=\"www\",\n    type=\"CNAME\",\n    ttl=5,\n    weighted_routing_policies=[aws.route53.RecordWeightedRoutingPolicyArgs(\n        weight=10,\n    )],\n    set_identifier=\"dev\",\n    records=[\"dev.example.com\"])\nwww_live = aws.route53.Record(\"www-live\",\n    zone_id=aws_route53_zone[\"primary\"][\"zone_id\"],\n    name=\"www\",\n    type=\"CNAME\",\n    ttl=5,\n    weighted_routing_policies=[aws.route53.RecordWeightedRoutingPolicyArgs(\n        weight=90,\n    )],\n    set_identifier=\"live\",\n    records=[\"live.example.com\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Aws = Pulumi.Aws;\n\nreturn await Deployment.RunAsync(() => \n{\n    var www_dev = new Aws.Route53.Record(\"www-dev\", new()\n    {\n        ZoneId = aws_route53_zone.Primary.Zone_id,\n        Name = \"www\",\n        Type = \"CNAME\",\n        Ttl = 5,\n        WeightedRoutingPolicies = new[]\n        {\n            new Aws.Route53.Inputs.RecordWeightedRoutingPolicyArgs\n            {\n                Weight = 10,\n            },\n        },\n        SetIdentifier = \"dev\",\n        Records = new[]\n        {\n            \"dev.example.com\",\n        },\n    });\n\n    var www_live = new Aws.Route53.Record(\"www-live\", new()\n    {\n        ZoneId = aws_route53_zone.Primary.Zone_id,\n        Name = \"www\",\n        Type = \"CNAME\",\n        Ttl = 5,\n        WeightedRoutingPolicies = new[]\n        {\n            new Aws.Route53.Inputs.RecordWeightedRoutingPolicyArgs\n            {\n                Weight = 90,\n            },\n        },\n        SetIdentifier = \"live\",\n        Records = new[]\n        {\n            \"live.example.com\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/route53\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := route53.NewRecord(ctx, \"www-dev\", &route53.RecordArgs{\n\t\t\tZoneId: pulumi.Any(aws_route53_zone.Primary.Zone_id),\n\t\t\tName:   pulumi.String(\"www\"),\n\t\t\tType:   pulumi.String(\"CNAME\"),\n\t\t\tTtl:    pulumi.Int(5),\n\t\t\tWeightedRoutingPolicies: route53.RecordWeightedRoutingPolicyArray{\n\t\t\t\t&route53.RecordWeightedRoutingPolicyArgs{\n\t\t\t\t\tWeight: pulumi.Int(10),\n\t\t\t\t},\n\t\t\t},\n\t\t\tSetIdentifier: pulumi.String(\"dev\"),\n\t\t\tRecords: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"dev.example.com\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = route53.NewRecord(ctx, \"www-live\", &route53.RecordArgs{\n\t\t\tZoneId: pulumi.Any(aws_route53_zone.Primary.Zone_id),\n\t\t\tName:   pulumi.String(\"www\"),\n\t\t\tType:   pulumi.String(\"CNAME\"),\n\t\t\tTtl:    pulumi.Int(5),\n\t\t\tWeightedRoutingPolicies: route53.RecordWeightedRoutingPolicyArray{\n\t\t\t\t&route53.RecordWeightedRoutingPolicyArgs{\n\t\t\t\t\tWeight: pulumi.Int(90),\n\t\t\t\t},\n\t\t\t},\n\t\t\tSetIdentifier: pulumi.String(\"live\"),\n\t\t\tRecords: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"live.example.com\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.aws.route53.Record;\nimport com.pulumi.aws.route53.RecordArgs;\nimport com.pulumi.aws.route53.inputs.RecordWeightedRoutingPolicyArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var www_dev = new Record(\"www-dev\", RecordArgs.builder()        \n            .zoneId(aws_route53_zone.primary().zone_id())\n            .name(\"www\")\n            .type(\"CNAME\")\n            .ttl(5)\n            .weightedRoutingPolicies(RecordWeightedRoutingPolicyArgs.builder()\n                .weight(10)\n                .build())\n            .setIdentifier(\"dev\")\n            .records(\"dev.example.com\")\n            .build());\n\n        var www_live = new Record(\"www-live\", RecordArgs.builder()        \n            .zoneId(aws_route53_zone.primary().zone_id())\n            .name(\"www\")\n            .type(\"CNAME\")\n            .ttl(5)\n            .weightedRoutingPolicies(RecordWeightedRoutingPolicyArgs.builder()\n                .weight(90)\n                .build())\n            .setIdentifier(\"live\")\n            .records(\"live.example.com\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  www-dev:\n    type: aws:route53:Record\n    properties:\n      zoneId: ${aws_route53_zone.primary.zone_id}\n      name: www\n      type: CNAME\n      ttl: 5\n      weightedRoutingPolicies:\n        - weight: 10\n      setIdentifier: dev\n      records:\n        - dev.example.com\n  www-live:\n    type: aws:route53:Record\n    properties:\n      zoneId: ${aws_route53_zone.primary.zone_id}\n      name: www\n      type: CNAME\n      ttl: 5\n      weightedRoutingPolicies:\n        - weight: 90\n      setIdentifier: live\n      records:\n        - live.example.com\n```\n{{% /example %}}\n{{% example %}}\n### Alias record\n\nSee [related part of Amazon Route 53 Developer Guide](https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/resource-record-sets-choosing-alias-non-alias.html)\nto understand differences between alias and non-alias records.\n\nTTL for all alias records is [60 seconds](https://aws.amazon.com/route53/faqs/#dns_failover_do_i_need_to_adjust),\nyou cannot change this, therefore `ttl` has to be omitted in alias records.\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as aws from \"@pulumi/aws\";\n\nconst main = new aws.elb.LoadBalancer(\"main\", {\n    availabilityZones: [\"us-east-1c\"],\n    listeners: [{\n        instancePort: 80,\n        instanceProtocol: \"http\",\n        lbPort: 80,\n        lbProtocol: \"http\",\n    }],\n});\nconst www = new aws.route53.Record(\"www\", {\n    zoneId: aws_route53_zone.primary.zone_id,\n    name: \"example.com\",\n    type: \"A\",\n    aliases: [{\n        name: main.dnsName,\n        zoneId: main.zoneId,\n        evaluateTargetHealth: true,\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_aws as aws\n\nmain = aws.elb.LoadBalancer(\"main\",\n    availability_zones=[\"us-east-1c\"],\n    listeners=[aws.elb.LoadBalancerListenerArgs(\n        instance_port=80,\n        instance_protocol=\"http\",\n        lb_port=80,\n        lb_protocol=\"http\",\n    )])\nwww = aws.route53.Record(\"www\",\n    zone_id=aws_route53_zone[\"primary\"][\"zone_id\"],\n    name=\"example.com\",\n    type=\"A\",\n    aliases=[aws.route53.RecordAliasArgs(\n        name=main.dns_name,\n        zone_id=main.zone_id,\n        evaluate_target_health=True,\n    )])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Aws = Pulumi.Aws;\n\nreturn await Deployment.RunAsync(() => \n{\n    var main = new Aws.Elb.LoadBalancer(\"main\", new()\n    {\n        AvailabilityZones = new[]\n        {\n            \"us-east-1c\",\n        },\n        Listeners = new[]\n        {\n            new Aws.Elb.Inputs.LoadBalancerListenerArgs\n            {\n                InstancePort = 80,\n                InstanceProtocol = \"http\",\n                LbPort = 80,\n                LbProtocol = \"http\",\n            },\n        },\n    });\n\n    var www = new Aws.Route53.Record(\"www\", new()\n    {\n        ZoneId = aws_route53_zone.Primary.Zone_id,\n        Name = \"example.com\",\n        Type = \"A\",\n        Aliases = new[]\n        {\n            new Aws.Route53.Inputs.RecordAliasArgs\n            {\n                Name = main.DnsName,\n                ZoneId = main.ZoneId,\n                EvaluateTargetHealth = true,\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/elb\"\n\t\"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/route53\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmain, err := elb.NewLoadBalancer(ctx, \"main\", &elb.LoadBalancerArgs{\n\t\t\tAvailabilityZones: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"us-east-1c\"),\n\t\t\t},\n\t\t\tListeners: elb.LoadBalancerListenerArray{\n\t\t\t\t&elb.LoadBalancerListenerArgs{\n\t\t\t\t\tInstancePort:     pulumi.Int(80),\n\t\t\t\t\tInstanceProtocol: pulumi.String(\"http\"),\n\t\t\t\t\tLbPort:           pulumi.Int(80),\n\t\t\t\t\tLbProtocol:       pulumi.String(\"http\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = route53.NewRecord(ctx, \"www\", &route53.RecordArgs{\n\t\t\tZoneId: pulumi.Any(aws_route53_zone.Primary.Zone_id),\n\t\t\tName:   pulumi.String(\"example.com\"),\n\t\t\tType:   pulumi.String(\"A\"),\n\t\t\tAliases: route53.RecordAliasArray{\n\t\t\t\t&route53.RecordAliasArgs{\n\t\t\t\t\tName:                 main.DnsName,\n\t\t\t\t\tZoneId:               main.ZoneId,\n\t\t\t\t\tEvaluateTargetHealth: pulumi.Bool(true),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.aws.elb.LoadBalancer;\nimport com.pulumi.aws.elb.LoadBalancerArgs;\nimport com.pulumi.aws.elb.inputs.LoadBalancerListenerArgs;\nimport com.pulumi.aws.route53.Record;\nimport com.pulumi.aws.route53.RecordArgs;\nimport com.pulumi.aws.route53.inputs.RecordAliasArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var main = new LoadBalancer(\"main\", LoadBalancerArgs.builder()        \n            .availabilityZones(\"us-east-1c\")\n            .listeners(LoadBalancerListenerArgs.builder()\n                .instancePort(80)\n                .instanceProtocol(\"http\")\n                .lbPort(80)\n                .lbProtocol(\"http\")\n                .build())\n            .build());\n\n        var www = new Record(\"www\", RecordArgs.builder()        \n            .zoneId(aws_route53_zone.primary().zone_id())\n            .name(\"example.com\")\n            .type(\"A\")\n            .aliases(RecordAliasArgs.builder()\n                .name(main.dnsName())\n                .zoneId(main.zoneId())\n                .evaluateTargetHealth(true)\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  main:\n    type: aws:elb:LoadBalancer\n    properties:\n      availabilityZones:\n        - us-east-1c\n      listeners:\n        - instancePort: 80\n          instanceProtocol: http\n          lbPort: 80\n          lbProtocol: http\n  www:\n    type: aws:route53:Record\n    properties:\n      zoneId: ${aws_route53_zone.primary.zone_id}\n      name: example.com\n      type: A\n      aliases:\n        - name: ${main.dnsName}\n          zoneId: ${main.zoneId}\n          evaluateTargetHealth: true\n```\n{{% /example %}}\n{{% example %}}\n### NS and SOA Record Management\n\nWhen creating Route 53 zones, the `NS` and `SOA` records for the zone are automatically created. Enabling the `allow_overwrite` argument will allow managing these records in a single deployment without the requirement for `import`.\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as aws from \"@pulumi/aws\";\n\nconst exampleZone = new aws.route53.Zone(\"exampleZone\", {});\nconst exampleRecord = new aws.route53.Record(\"exampleRecord\", {\n    allowOverwrite: true,\n    name: \"test.example.com\",\n    ttl: 172800,\n    type: \"NS\",\n    zoneId: exampleZone.zoneId,\n    records: [\n        exampleZone.nameServers[0],\n        exampleZone.nameServers[1],\n        exampleZone.nameServers[2],\n        exampleZone.nameServers[3],\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_aws as aws\n\nexample_zone = aws.route53.Zone(\"exampleZone\")\nexample_record = aws.route53.Record(\"exampleRecord\",\n    allow_overwrite=True,\n    name=\"test.example.com\",\n    ttl=172800,\n    type=\"NS\",\n    zone_id=example_zone.zone_id,\n    records=[\n        example_zone.name_servers[0],\n        example_zone.name_servers[1],\n        example_zone.name_servers[2],\n        example_zone.name_servers[3],\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Aws = Pulumi.Aws;\n\nreturn await Deployment.RunAsync(() => \n{\n    var exampleZone = new Aws.Route53.Zone(\"exampleZone\");\n\n    var exampleRecord = new Aws.Route53.Record(\"exampleRecord\", new()\n    {\n        AllowOverwrite = true,\n        Name = \"test.example.com\",\n        Ttl = 172800,\n        Type = \"NS\",\n        ZoneId = exampleZone.ZoneId,\n        Records = new[]\n        {\n            exampleZone.NameServers.Apply(nameServers => nameServers[0]),\n            exampleZone.NameServers.Apply(nameServers => nameServers[1]),\n            exampleZone.NameServers.Apply(nameServers => nameServers[2]),\n            exampleZone.NameServers.Apply(nameServers => nameServers[3]),\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/route53\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleZone, err := route53.NewZone(ctx, \"exampleZone\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = route53.NewRecord(ctx, \"exampleRecord\", &route53.RecordArgs{\n\t\t\tAllowOverwrite: pulumi.Bool(true),\n\t\t\tName:           pulumi.String(\"test.example.com\"),\n\t\t\tTtl:            pulumi.Int(172800),\n\t\t\tType:           pulumi.String(\"NS\"),\n\t\t\tZoneId:         exampleZone.ZoneId,\n\t\t\tRecords: pulumi.StringArray{\n\t\t\t\texampleZone.NameServers.ApplyT(func(nameServers []string) (string, error) {\n\t\t\t\t\treturn nameServers[0], nil\n\t\t\t\t}).(pulumi.StringOutput),\n\t\t\t\texampleZone.NameServers.ApplyT(func(nameServers []string) (string, error) {\n\t\t\t\t\treturn nameServers[1], nil\n\t\t\t\t}).(pulumi.StringOutput),\n\t\t\t\texampleZone.NameServers.ApplyT(func(nameServers []string) (string, error) {\n\t\t\t\t\treturn nameServers[2], nil\n\t\t\t\t}).(pulumi.StringOutput),\n\t\t\t\texampleZone.NameServers.ApplyT(func(nameServers []string) (string, error) {\n\t\t\t\t\treturn nameServers[3], nil\n\t\t\t\t}).(pulumi.StringOutput),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.aws.route53.Zone;\nimport com.pulumi.aws.route53.Record;\nimport com.pulumi.aws.route53.RecordArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleZone = new Zone(\"exampleZone\");\n\n        var exampleRecord = new Record(\"exampleRecord\", RecordArgs.builder()        \n            .allowOverwrite(true)\n            .name(\"test.example.com\")\n            .ttl(172800)\n            .type(\"NS\")\n            .zoneId(exampleZone.zoneId())\n            .records(            \n                exampleZone.nameServers().applyValue(nameServers -> nameServers[0]),\n                exampleZone.nameServers().applyValue(nameServers -> nameServers[1]),\n                exampleZone.nameServers().applyValue(nameServers -> nameServers[2]),\n                exampleZone.nameServers().applyValue(nameServers -> nameServers[3]))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleZone:\n    type: aws:route53:Zone\n  exampleRecord:\n    type: aws:route53:Record\n    properties:\n      allowOverwrite: true\n      name: test.example.com\n      ttl: 172800\n      type: NS\n      zoneId: ${exampleZone.zoneId}\n      records:\n        - ${exampleZone.nameServers[0]}\n        - ${exampleZone.nameServers[1]}\n        - ${exampleZone.nameServers[2]}\n        - ${exampleZone.nameServers[3]}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nRoute53 Records can be imported using ID of the record, which is the zone identifier, record name, and record type, separated by underscores (`_`)E.g.,\n\n```sh\n $ pulumi import aws:route53/record:Record myrecord Z4KAPRWWNC7JR_dev.example.com_NS\n```\n\n If the record also contains a delegated set identifier, it can be appended\n\n```sh\n $ pulumi import aws:route53/record:Record myrecord Z4KAPRWWNC7JR_dev.example.com_NS_dev\n```\n\n ",
      "properties": {
        "aliases": {
          "type": "array",
          "items": {
            "type": null,
            "$ref": "#/types/aws:route53/RecordAlias:RecordAlias",
            "willReplaceOnChanges": false,
            "deprecationMessage": null,
            "description": null,
            "language": null,
            "default": null
          },
          "willReplaceOnChanges": false,
          "deprecationMessage": null,
          "description": "An alias block. Conflicts with `ttl` & `records`.\nDocumented below.\n",
          "language": null,
          "default": null
        },
        "allowOverwrite": {
          "type": "boolean",
          "description": "Allow creation of this record to overwrite an existing record, if any. This does not affect the ability to update the record using this provider and does not prevent other resources within this provider or manual Route 53 changes outside this provider from overwriting this record. `false` by default. This configuration is not recommended for most environments.\n",
          "willReplaceOnChanges": false,
          "deprecationMessage": null,
          "language": null,
          "default": null
        },
        "failoverRoutingPolicies": {
          "type": "array",
          "items": {
            "type": null,
            "$ref": "#/types/aws:route53/RecordFailoverRoutingPolicy:RecordFailoverRoutingPolicy",
            "willReplaceOnChanges": false,
            "deprecationMessage": null,
            "description": null,
            "language": null,
            "default": null
          },
          "willReplaceOnChanges": false,
          "deprecationMessage": null,
          "description": "A block indicating the routing behavior when associated health check fails. Conflicts with any other routing policy. Documented below.\n",
          "language": null,
          "default": null
        },
        "fqdn": {
          "type": "string",
          "description": "[FQDN](https://en.wikipedia.org/wiki/Fully_qualified_domain_name) built using the zone domain and `name`.\n",
          "willReplaceOnChanges": false,
          "deprecationMessage": null,
          "language": null,
          "default": null
        },
        "geolocationRoutingPolicies": {
          "type": "array",
          "items": {
            "type": null,
            "$ref": "#/types/aws:route53/RecordGeolocationRoutingPolicy:RecordGeolocationRoutingPolicy",
            "willReplaceOnChanges": false,
            "deprecationMessage": null,
            "description": null,
            "language": null,
            "default": null
          },
          "willReplaceOnChanges": false,
          "deprecationMessage": null,
          "description": "A block indicating a routing policy based on the geolocation of the requestor. Conflicts with any other routing policy. Documented below.\n",
          "language": null,
          "default": null
        },
        "healthCheckId": {
          "type": "string",
          "description": "The health check the record should be associated with.\n",
          "willReplaceOnChanges": false,
          "deprecationMessage": null,
          "language": null,
          "default": null
        },
        "latencyRoutingPolicies": {
          "type": "array",
          "items": {
            "type": null,
            "$ref": "#/types/aws:route53/RecordLatencyRoutingPolicy:RecordLatencyRoutingPolicy",
            "willReplaceOnChanges": false,
            "deprecationMessage": null,
            "description": null,
            "language": null,
            "default": null
          },
          "willReplaceOnChanges": false,
          "deprecationMessage": null,
          "description": "A block indicating a routing policy based on the latency between the requestor and an AWS region. Conflicts with any other routing policy. Documented below.\n",
          "language": null,
          "default": null
        },
        "multivalueAnswerRoutingPolicy": {
          "type": "boolean",
          "description": "Set to `true` to indicate a multivalue answer routing policy. Conflicts with any other routing policy.\n",
          "willReplaceOnChanges": false,
          "deprecationMessage": null,
          "language": null,
          "default": null
        },
        "name": {
          "type": "string",
          "description": "DNS domain name for a CloudFront distribution, S3 bucket, ELB, or another resource record set in this hosted zone.\n",
          "willReplaceOnChanges": false,
          "deprecationMessage": null,
          "language": null,
          "default": null
        },
        "records": {
          "type": "array",
          "items": {
            "type": "string",
            "description": null,
            "willReplaceOnChanges": false,
            "deprecationMessage": null,
            "language": null,
            "default": null
          },
          "willReplaceOnChanges": false,
          "deprecationMessage": null,
          "description": null,
          "language": null,
          "default": null
        },
        "setIdentifier": {
          "type": "string",
          "description": "Unique identifier to differentiate records with routing policies from one another. Required if using `failover`, `geolocation`, `latency`, `multivalue_answer`, or `weighted` routing policies documented below.\n",
          "willReplaceOnChanges": false,
          "deprecationMessage": null,
          "language": null,
          "default": null
        },
        "ttl": {
          "type": "integer",
          "description": "The TTL of the record.\n",
          "willReplaceOnChanges": false,
          "deprecationMessage": null,
          "language": null,
          "default": null
        },
        "type": {
          "type": "string",
          "description": "`PRIMARY` or `SECONDARY`. A `PRIMARY` record will be served if its healthcheck is passing, otherwise the `SECONDARY` will be served. See http://docs.aws.amazon.com/Route53/latest/DeveloperGuide/dns-failover-configuring-options.html#dns-failover-failover-rrsets\n",
          "willReplaceOnChanges": false,
          "deprecationMessage": null,
          "language": null,
          "default": null
        },
        "weightedRoutingPolicies": {
          "type": "array",
          "items": {
            "type": null,
            "$ref": "#/types/aws:route53/RecordWeightedRoutingPolicy:RecordWeightedRoutingPolicy",
            "willReplaceOnChanges": false,
            "deprecationMessage": null,
            "description": null,
            "language": null,
            "default": null
          },
          "willReplaceOnChanges": false,
          "deprecationMessage": null,
          "description": "A block indicating a weighted routing policy. Conflicts with any other routing policy. Documented below.\n",
          "language": null,
          "default": null
        },
        "zoneId": {
          "type": "string",
          "description": "Hosted zone ID for a CloudFront distribution, S3 bucket, ELB, or Route 53 hosted zone. See `resource_elb.zone_id` for example.\n",
          "willReplaceOnChanges": false,
          "deprecationMessage": null,
          "language": null,
          "default": null
        }
      },
      "type": null,
      "required": [
        "allowOverwrite",
        "fqdn",
        "name",
        "type",
        "zoneId"
      ],
      "inputProperties": {
        "aliases": {
          "type": "array",
          "items": {
            "type": null,
            "$ref": "#/types/aws:route53/RecordAlias:RecordAlias",
            "willReplaceOnChanges": false,
            "deprecationMessage": null,
            "description": null,
            "language": null,
            "default": null
          },
          "willReplaceOnChanges": false,
          "deprecationMessage": null,
          "description": "An alias block. Conflicts with `ttl` & `records`.\nDocumented below.\n",
          "language": null,
          "default": null
        },
        "allowOverwrite": {
          "type": "boolean",
          "description": "Allow creation of this record to overwrite an existing record, if any. This does not affect the ability to update the record using this provider and does not prevent other resources within this provider or manual Route 53 changes outside this provider from overwriting this record. `false` by default. This configuration is not recommended for most environments.\n",
          "willReplaceOnChanges": false,
          "deprecationMessage": null,
          "language": null,
          "default": null
        },
        "failoverRoutingPolicies": {
          "type": "array",
          "items": {
            "type": null,
            "$ref": "#/types/aws:route53/RecordFailoverRoutingPolicy:RecordFailoverRoutingPolicy",
            "willReplaceOnChanges": false,
            "deprecationMessage": null,
            "description": null,
            "language": null,
            "default": null
          },
          "willReplaceOnChanges": false,
          "deprecationMessage": null,
          "description": "A block indicating the routing behavior when associated health check fails. Conflicts with any other routing policy. Documented below.\n",
          "language": null,
          "default": null
        },
        "geolocationRoutingPolicies": {
          "type": "array",
          "items": {
            "type": null,
            "$ref": "#/types/aws:route53/RecordGeolocationRoutingPolicy:RecordGeolocationRoutingPolicy",
            "willReplaceOnChanges": false,
            "deprecationMessage": null,
            "description": null,
            "language": null,
            "default": null
          },
          "willReplaceOnChanges": false,
          "deprecationMessage": null,
          "description": "A block indicating a routing policy based on the geolocation of the requestor. Conflicts with any other routing policy. Documented below.\n",
          "language": null,
          "default": null
        },
        "healthCheckId": {
          "type": "string",
          "description": "The health check the record should be associated with.\n",
          "willReplaceOnChanges": false,
          "deprecationMessage": null,
          "language": null,
          "default": null
        },
        "latencyRoutingPolicies": {
          "type": "array",
          "items": {
            "type": null,
            "$ref": "#/types/aws:route53/RecordLatencyRoutingPolicy:RecordLatencyRoutingPolicy",
            "willReplaceOnChanges": false,
            "deprecationMessage": null,
            "description": null,
            "language": null,
            "default": null
          },
          "willReplaceOnChanges": false,
          "deprecationMessage": null,
          "description": "A block indicating a routing policy based on the latency between the requestor and an AWS region. Conflicts with any other routing policy. Documented below.\n",
          "language": null,
          "default": null
        },
        "multivalueAnswerRoutingPolicy": {
          "type": "boolean",
          "description": "Set to `true` to indicate a multivalue answer routing policy. Conflicts with any other routing policy.\n",
          "willReplaceOnChanges": false,
          "deprecationMessage": null,
          "language": null,
          "default": null
        },
        "name": {
          "type": "string",
          "description": "DNS domain name for a CloudFront distribution, S3 bucket, ELB, or another resource record set in this hosted zone.\n",
          "willReplaceOnChanges": true,
          "deprecationMessage": null,
          "language": null,
          "default": null
        },
        "records": {
          "type": "array",
          "items": {
            "type": "string",
            "description": null,
            "willReplaceOnChanges": false,
            "deprecationMessage": null,
            "language": null,
            "default": null
          },
          "willReplaceOnChanges": false,
          "deprecationMessage": null,
          "description": null,
          "language": null,
          "default": null
        },
        "setIdentifier": {
          "type": "string",
          "description": "Unique identifier to differentiate records with routing policies from one another. Required if using `failover`, `geolocation`, `latency`, `multivalue_answer`, or `weighted` routing policies documented below.\n",
          "willReplaceOnChanges": false,
          "deprecationMessage": null,
          "language": null,
          "default": null
        },
        "ttl": {
          "type": "integer",
          "description": "The TTL of the record.\n",
          "willReplaceOnChanges": false,
          "deprecationMessage": null,
          "language": null,
          "default": null
        },
        "type": {
          "type": "string",
          "description": "`PRIMARY` or `SECONDARY`. A `PRIMARY` record will be served if its healthcheck is passing, otherwise the `SECONDARY` will be served. See http://docs.aws.amazon.com/Route53/latest/DeveloperGuide/dns-failover-configuring-options.html#dns-failover-failover-rrsets\n",
          "oneOf": [
            {
              "type": "string",
              "description": null,
              "willReplaceOnChanges": false,
              "deprecationMessage": null,
              "language": null,
              "default": null
            },
            {
              "type": "string",
              "$ref": "#/types/aws:route53/RecordType:RecordType",
              "willReplaceOnChanges": false,
              "deprecationMessage": null,
              "description": null,
              "language": null,
              "default": null
            }
          ],
          "deprecationMessage": null,
          "language": null,
          "default": null,
          "willReplaceOnChanges": false
        },
        "weightedRoutingPolicies": {
          "type": "array",
          "items": {
            "type": null,
            "$ref": "#/types/aws:route53/RecordWeightedRoutingPolicy:RecordWeightedRoutingPolicy",
            "willReplaceOnChanges": false,
            "deprecationMessage": null,
            "description": null,
            "language": null,
            "default": null
          },
          "willReplaceOnChanges": false,
          "deprecationMessage": null,
          "description": "A block indicating a weighted routing policy. Conflicts with any other routing policy. Documented below.\n",
          "language": null,
          "default": null
        },
        "zoneId": {
          "type": "string",
          "description": "Hosted zone ID for a CloudFront distribution, S3 bucket, ELB, or Route 53 hosted zone. See `resource_elb.zone_id` for example.\n",
          "willReplaceOnChanges": true,
          "deprecationMessage": null,
          "language": null,
          "default": null
        }
      },
      "requiredInputs": [
        "name",
        "type",
        "zoneId"
      ],
      "stateInputs": {
        "description": "Input properties used for looking up and filtering Record resources.\n",
        "properties": {
          "aliases": {
            "type": "array",
            "items": {
              "$ref": "#/types/aws:route53/RecordAlias:RecordAlias"
            },
            "description": "An alias block. Conflicts with `ttl` & `records`.\nDocumented below.\n"
          },
          "allowOverwrite": {
            "type": "boolean",
            "description": "Allow creation of this record to overwrite an existing record, if any. This does not affect the ability to update the record using this provider and does not prevent other resources within this provider or manual Route 53 changes outside this provider from overwriting this record. `false` by default. This configuration is not recommended for most environments.\n"
          },
          "failoverRoutingPolicies": {
            "type": "array",
            "items": {
              "$ref": "#/types/aws:route53/RecordFailoverRoutingPolicy:RecordFailoverRoutingPolicy"
            },
            "description": "A block indicating the routing behavior when associated health check fails. Conflicts with any other routing policy. Documented below.\n"
          },
          "fqdn": {
            "type": "string",
            "description": "[FQDN](https://en.wikipedia.org/wiki/Fully_qualified_domain_name) built using the zone domain and `name`.\n"
          },
          "geolocationRoutingPolicies": {
            "type": "array",
            "items": {
              "$ref": "#/types/aws:route53/RecordGeolocationRoutingPolicy:RecordGeolocationRoutingPolicy"
            },
            "description": "A block indicating a routing policy based on the geolocation of the requestor. Conflicts with any other routing policy. Documented below.\n"
          },
          "healthCheckId": {
            "type": "string",
            "description": "The health check the record should be associated with.\n"
          },
          "latencyRoutingPolicies": {
            "type": "array",
            "items": {
              "$ref": "#/types/aws:route53/RecordLatencyRoutingPolicy:RecordLatencyRoutingPolicy"
            },
            "description": "A block indicating a routing policy based on the latency between the requestor and an AWS region. Conflicts with any other routing policy. Documented below.\n"
          },
          "multivalueAnswerRoutingPolicy": {
            "type": "boolean",
            "description": "Set to `true` to indicate a multivalue answer routing policy. Conflicts with any other routing policy.\n"
          },
          "name": {
            "type": "string",
            "description": "DNS domain name for a CloudFront distribution, S3 bucket, ELB, or another resource record set in this hosted zone.\n",
            "willReplaceOnChanges": true
          },
          "records": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "setIdentifier": {
            "type": "string",
            "description": "Unique identifier to differentiate records with routing policies from one another. Required if using `failover`, `geolocation`, `latency`, `multivalue_answer`, or `weighted` routing policies documented below.\n"
          },
          "ttl": {
            "type": "integer",
            "description": "The TTL of the record.\n"
          },
          "type": {
            "type": "string",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "string",
                "$ref": "#/types/aws:route53/RecordType:RecordType"
              }
            ],
            "description": "`PRIMARY` or `SECONDARY`. A `PRIMARY` record will be served if its healthcheck is passing, otherwise the `SECONDARY` will be served. See http://docs.aws.amazon.com/Route53/latest/DeveloperGuide/dns-failover-configuring-options.html#dns-failover-failover-rrsets\n"
          },
          "weightedRoutingPolicies": {
            "type": "array",
            "items": {
              "$ref": "#/types/aws:route53/RecordWeightedRoutingPolicy:RecordWeightedRoutingPolicy"
            },
            "description": "A block indicating a weighted routing policy. Conflicts with any other routing policy. Documented below.\n"
          },
          "zoneId": {
            "type": "string",
            "description": "Hosted zone ID for a CloudFront distribution, S3 bucket, ELB, or Route 53 hosted zone. See `resource_elb.zone_id` for example.\n",
            "willReplaceOnChanges": true
          }
        },
        "type": "object"
      },
      "aliases": null,
      "deprecationMessage": null
    }
  },
  "functions": {
  },
  "types": {
    "aws:route53/RecordAlias:RecordAlias": {
      "type": "object",
      "properties": {
        "evaluateTargetHealth": {
          "type": "boolean",
          "description": "Set to `true` if you want Route 53 to determine whether to respond to DNS queries using this resource record set by checking the health of the resource record set. Some resources have special requirements, see [related part of documentation](https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/resource-record-sets-values.html#rrsets-values-alias-evaluate-target-health).\n",
          "willReplaceOnChanges": false,
          "deprecationMessage": null,
          "language": {
            "python": {
              "mapCase": false
            }
          },
          "default": null
        },
        "name": {
          "type": "string",
          "description": "DNS domain name for a CloudFront distribution, S3 bucket, ELB, or another resource record set in this hosted zone.\n",
          "willReplaceOnChanges": false,
          "deprecationMessage": null,
          "language": {
            "python": {
              "mapCase": false
            }
          },
          "default": null
        },
        "zoneId": {
          "type": "string",
          "description": "Hosted zone ID for a CloudFront distribution, S3 bucket, ELB, or Route 53 hosted zone. See `resource_elb.zone_id` for example.\n",
          "willReplaceOnChanges": false,
          "deprecationMessage": null,
          "language": {
            "python": {
              "mapCase": false
            }
          },
          "default": null
        }
      },
      "deprecationMessage": null,
      "willReplaceOnChanges": false,
      "additionalProperties": null,
      "required": [
        "evaluateTargetHealth",
        "name",
        "zoneId"
      ],
      "description": null,
      "language": null,
      "default": null
    },
    "aws:route53/RecordFailoverRoutingPolicy:RecordFailoverRoutingPolicy": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "description": "`PRIMARY` or `SECONDARY`. A `PRIMARY` record will be served if its healthcheck is passing, otherwise the `SECONDARY` will be served. See http://docs.aws.amazon.com/Route53/latest/DeveloperGuide/dns-failover-configuring-options.html#dns-failover-failover-rrsets\n",
          "willReplaceOnChanges": false,
          "deprecationMessage": null,
          "language": {
            "python": {
              "mapCase": false
            }
          },
          "default": null
        }
      },
      "deprecationMessage": null,
      "willReplaceOnChanges": false,
      "additionalProperties": null,
      "required": [
        "type"
      ],
      "description": null,
      "language": null,
      "default": null
    },
    "aws:route53/RecordGeolocationRoutingPolicy:RecordGeolocationRoutingPolicy": {
      "type": "object",
      "properties": {
        "continent": {
          "type": "string",
          "description": "A two-letter continent code. See http://docs.aws.amazon.com/Route53/latest/APIReference/API_GetGeoLocation.html for code details. Either `continent` or `country` must be specified.\n",
          "willReplaceOnChanges": false,
          "deprecationMessage": null,
          "language": {
            "python": {
              "mapCase": false
            }
          },
          "default": null
        },
        "country": {
          "type": "string",
          "description": "A two-character country code or `*` to indicate a default resource record set.\n",
          "willReplaceOnChanges": false,
          "deprecationMessage": null,
          "language": {
            "python": {
              "mapCase": false
            }
          },
          "default": null
        },
        "subdivision": {
          "type": "string",
          "description": "A subdivision code for a country.\n",
          "willReplaceOnChanges": false,
          "deprecationMessage": null,
          "language": {
            "python": {
              "mapCase": false
            }
          },
          "default": null
        }
      },
      "deprecationMessage": null,
      "willReplaceOnChanges": false,
      "additionalProperties": null,
      "required": [
      ],
      "description": null,
      "language": null,
      "default": null
    },
    "aws:route53/RecordLatencyRoutingPolicy:RecordLatencyRoutingPolicy": {
      "type": "object",
      "properties": {
        "region": {
          "type": "string",
          "description": "An AWS region from which to measure latency. See http://docs.aws.amazon.com/Route53/latest/DeveloperGuide/routing-policy.html#routing-policy-latency\n",
          "willReplaceOnChanges": false,
          "deprecationMessage": null,
          "language": {
            "python": {
              "mapCase": false
            }
          },
          "default": null
        }
      },
      "deprecationMessage": null,
      "willReplaceOnChanges": false,
      "additionalProperties": null,
      "required": [
        "region"
      ],
      "description": null,
      "language": null,
      "default": null
    },
    "aws:route53/RecordType:RecordType": {
      "type": "string",
      "enum": [
        {
          "name": null,
          "value": "A",
          "description": null,
          "deprecationMessage": null,
          "default": null
        },
        {
          "name": null,
          "value": "AAAA",
          "description": null,
          "deprecationMessage": null,
          "default": null
        },
        {
          "name": null,
          "value": "CNAME",
          "description": null,
          "deprecationMessage": null,
          "default": null
        },
        {
          "name": null,
          "value": "CAA",
          "description": null,
          "deprecationMessage": null,
          "default": null
        },
        {
          "name": null,
          "value": "MX",
          "description": null,
          "deprecationMessage": null,
          "default": null
        },
        {
          "name": null,
          "value": "NAPTR",
          "description": null,
          "deprecationMessage": null,
          "default": null
        },
        {
          "name": null,
          "value": "NS",
          "description": null,
          "deprecationMessage": null,
          "default": null
        },
        {
          "name": null,
          "value": "PTR",
          "description": null,
          "deprecationMessage": null,
          "default": null
        },
        {
          "name": null,
          "value": "SOA",
          "description": null,
          "deprecationMessage": null,
          "default": null
        },
        {
          "name": null,
          "value": "SPF",
          "description": null,
          "deprecationMessage": null,
          "default": null
        },
        {
          "name": null,
          "value": "SRV",
          "description": null,
          "deprecationMessage": null,
          "default": null
        },
        {
          "name": null,
          "value": "TXT",
          "description": null,
          "deprecationMessage": null,
          "default": null
        }
      ],
      "description": null,
      "willReplaceOnChanges": false,
      "deprecationMessage": null,
      "language": null,
      "default": null
    },
    "aws:route53/RecordWeightedRoutingPolicy:RecordWeightedRoutingPolicy": {
      "type": "object",
      "properties": {
        "weight": {
          "type": "integer",
          "description": "A numeric value indicating the relative weight of the record. See http://docs.aws.amazon.com/Route53/latest/DeveloperGuide/routing-policy.html#routing-policy-weighted.\n",
          "willReplaceOnChanges": false,
          "deprecationMessage": null,
          "language": {
            "python": {
              "mapCase": false
            }
          },
          "default": null
        }
      },
      "deprecationMessage": null,
      "willReplaceOnChanges": false,
      "additionalProperties": null,
      "required": [
        "weight"
      ],
      "description": null,
      "language": null,
      "default": null
    }
  }
}
