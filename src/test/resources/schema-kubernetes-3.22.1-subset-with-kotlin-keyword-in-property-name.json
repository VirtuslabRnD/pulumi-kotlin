{
  "name": "kubernetes",
  "displayName": "Kubernetes",
  "config": {
    "variables": {
      "cluster": {
        "type": "string",
        "description": "If present, the name of the kubeconfig cluster to use."
      },
      "context": {
        "type": "string",
        "description": "If present, the name of the kubeconfig context to use."
      },
      "deleteUnreachable": {
        "type": "boolean",
        "description": "If present and set to true, the provider will delete resources associated with an unreachable Kubernetes cluster from Pulumi state"
      },
      "enableConfigMapMutable": {
        "type": "boolean",
        "description": "BETA FEATURE - If present and set to true, allow ConfigMaps to be mutated.\nThis feature is in developer preview, and is disabled by default.\n\nThis config can be specified in the following ways using this precedence:\n1. This `enableConfigMapMutable` parameter.\n2. The `PULUMI_K8S_ENABLE_CONFIGMAP_MUTABLE` environment variable."
      },
      "enableDryRun": {
        "type": "boolean",
        "description": "Deprecated. If present and set to true, enable server-side diff calculations.\n",
        "deprecationMessage": "This option has been replaced by `enableServerSideApply`."
      },
      "enableReplaceCRD": {
        "type": "boolean",
        "description": "Obsolete. This option has no effect.",
        "deprecationMessage": "This option is deprecated, and will be removed in a future release."
      },
      "enableServerSideApply": {
        "type": "boolean",
        "description": "BETA FEATURE - If present and set to true, enable Server-Side Apply mode.\nSee https://github.com/pulumi/pulumi-kubernetes/issues/2011 for additional details.\nThis feature is in developer preview, and is disabled by default."
      },
      "kubeconfig": {
        "type": "string",
        "description": "The contents of a kubeconfig file or the path to a kubeconfig file. If this is set, this config will be used instead of $KUBECONFIG.",
        "language": {
          "csharp": {
            "name": "KubeConfig"
          }
        }
      },
      "namespace": {
        "type": "string",
        "description": "If present, the default namespace to use. This flag is ignored for cluster-scoped resources.\n\nA namespace can be specified in multiple places, and the precedence is as follows:\n1. `.metadata.namespace` set on the resource.\n2. This `namespace` parameter.\n3. `namespace` set for the active context in the kubeconfig."
      },
      "renderYamlToDirectory": {
        "type": "string",
        "description": "BETA FEATURE - If present, render resource manifests to this directory. In this mode, resources will not\nbe created on a Kubernetes cluster, but the rendered manifests will be kept in sync with changes\nto the Pulumi program. This feature is in developer preview, and is disabled by default.\n\nNote that some computed Outputs such as status fields will not be populated\nsince the resources are not created on a Kubernetes cluster. These Output values will remain undefined,\nand may result in an error if they are referenced by other resources. Also note that any secret values\nused in these resources will be rendered in plaintext to the resulting YAML."
      },
      "suppressDeprecationWarnings": {
        "type": "boolean",
        "description": "If present and set to true, suppress apiVersion deprecation warnings from the CLI.\n\nThis config can be specified in the following ways, using this precedence:\n1. This `suppressDeprecationWarnings` parameter.\n2. The `PULUMI_K8S_SUPPRESS_DEPRECATION_WARNINGS` environment variable."
      },
      "suppressHelmHookWarnings": {
        "type": "boolean",
        "description": "If present and set to true, suppress unsupported Helm hook warnings from the CLI.\n\nThis config can be specified in the following ways, using this precedence:\n1. This `suppressHelmHookWarnings` parameter.\n2. The `PULUMI_K8S_SUPPRESS_HELM_HOOK_WARNINGS` environment variable."
      }
    }
  },
  "language": {
    "csharp": {
      "compatibility": "kubernetes20",
      "dictionaryConstructors": true,
      "namespaces": {
        "": "Provider",
        "admissionregistration.k8s.io/v1": "AdmissionRegistration.V1",
        "admissionregistration.k8s.io/v1beta1": "AdmissionRegistration.V1Beta1",
        "apiextensions": "ApiExtensions",
        "apiextensions.k8s.io/v1": "ApiExtensions.V1",
        "apiextensions.k8s.io/v1beta1": "ApiExtensions.V1Beta1",
        "apiregistration.k8s.io/v1": "ApiRegistration.V1",
        "apiregistration.k8s.io/v1beta1": "ApiRegistration.V1Beta1",
        "apps/v1": "Apps.V1",
        "apps/v1beta1": "Apps.V1Beta1",
        "apps/v1beta2": "Apps.V1Beta2",
        "auditregistration.k8s.io/v1alpha1": "AuditRegistraion.V1Alpha1",
        "authentication.k8s.io/v1": "Authentication.V1",
        "authentication.k8s.io/v1beta1": "Authentication.V1Beta1",
        "authorization.k8s.io/v1": "Authorization.V1",
        "authorization.k8s.io/v1beta1": "Authorization.V1Beta1",
        "autoscaling/v1": "Autoscaling.V1",
        "autoscaling/v2": "Autoscaling.V2",
        "autoscaling/v2beta1": "Autoscaling.V2Beta1",
        "autoscaling/v2beta2": "Autoscaling.V2Beta2",
        "batch/v1": "Batch.V1",
        "batch/v1beta1": "Batch.V1Beta1",
        "batch/v2alpha1": "Batch.V2Alpha1",
        "certificates.k8s.io/v1": "Certificates.V1",
        "certificates.k8s.io/v1beta1": "Certificates.V1Beta1",
        "coordination.k8s.io/v1": "Coordination.V1",
        "coordination.k8s.io/v1beta1": "Coordination.V1Beta1",
        "core/v1": "Core.V1",
        "discovery.k8s.io/v1": "Discovery.V1",
        "discovery.k8s.io/v1beta1": "Discovery.V1Beta1",
        "events.k8s.io/v1": "Events.V1",
        "events.k8s.io/v1beta1": "Events.V1Beta1",
        "extensions/v1beta1": "Extensions.V1Beta1",
        "flowcontrol.apiserver.k8s.io/v1alpha1": "FlowControl.V1Alpha1",
        "flowcontrol.apiserver.k8s.io/v1beta1": "FlowControl.V1Beta1",
        "flowcontrol.apiserver.k8s.io/v1beta2": "FlowControl.V1Beta2",
        "helm.sh/v2": "Helm.V2",
        "helm.sh/v3": "Helm.V3",
        "meta/v1": "Meta.V1",
        "networking.k8s.io/v1": "Networking.V1",
        "networking.k8s.io/v1alpha1": "Networking.V1Alpha1",
        "networking.k8s.io/v1beta1": "Networking.V1Beta1",
        "node.k8s.io/v1": "Node.V1",
        "node.k8s.io/v1alpha1": "Node.V1Alpha1",
        "node.k8s.io/v1beta1": "Node.V1Beta1",
        "pkg/version": "Pkg.Version",
        "policy/v1": "Policy.V1",
        "policy/v1beta1": "Policy.V1Beta1",
        "rbac.authorization.k8s.io/v1": "Rbac.V1",
        "rbac.authorization.k8s.io/v1alpha1": "Rbac.V1Alpha1",
        "rbac.authorization.k8s.io/v1beta1": "Rbac.V1Beta1",
        "scheduling.k8s.io/v1": "Scheduling.V1",
        "scheduling.k8s.io/v1alpha1": "Scheduling.V1Alpha1",
        "scheduling.k8s.io/v1beta1": "Scheduling.V1Beta1",
        "settings.k8s.io/v1alpha1": "Settings.V1Alpha1",
        "storage.k8s.io/v1": "Storage.V1",
        "storage.k8s.io/v1alpha1": "Storage.V1Alpha1",
        "storage.k8s.io/v1beta1": "Storage.V1Beta1",
        "yaml": "Yaml"
      },
      "packageReferences": {
        "Glob": "1.1.5",
        "Pulumi": "3.*"
      }
    },
    "go": {
      "generateExtraInputTypes": true,
      "generateResourceContainerTypes": true,
      "importBasePath": "github.com/pulumi/pulumi-kubernetes/sdk/v3/go/kubernetes",
      "moduleToPackage": {
        "admissionregistration.k8s.io/v1": "admissionregistration/v1",
        "admissionregistration.k8s.io/v1beta1": "admissionregistration/v1beta1",
        "apiextensions.k8s.io": "apiextensions",
        "apiextensions.k8s.io/v1": "apiextensions/v1",
        "apiextensions.k8s.io/v1beta1": "apiextensions/v1beta1",
        "apiregistration.k8s.io/v1": "apiregistration/v1",
        "apiregistration.k8s.io/v1beta1": "apiregistration/v1beta1",
        "apps/v1": "apps/v1",
        "apps/v1beta1": "apps/v1beta1",
        "apps/v1beta2": "apps/v1beta2",
        "auditregistration.k8s.io/v1alpha1": "auditregistration/v1alpha1",
        "authentication.k8s.io/v1": "authentication/v1",
        "authentication.k8s.io/v1beta1": "authentication/v1beta1",
        "authorization.k8s.io/v1": "authorization/v1",
        "authorization.k8s.io/v1beta1": "authorization/v1beta1",
        "autoscaling/v1": "autoscaling/v1",
        "autoscaling/v2": "autoscaling/v2",
        "autoscaling/v2beta1": "autoscaling/v2beta1",
        "autoscaling/v2beta2": "autoscaling/v2beta2",
        "batch/v1": "batch/v1",
        "batch/v1beta1": "batch/v1beta1",
        "batch/v2alpha1": "batch/v2alpha1",
        "certificates.k8s.io/v1": "certificates/v1",
        "certificates.k8s.io/v1beta1": "certificates/v1beta1",
        "coordination.k8s.io/v1": "coordination/v1",
        "coordination.k8s.io/v1beta1": "coordination/v1beta1",
        "core/v1": "core/v1",
        "discovery.k8s.io/v1": "discovery/v1",
        "discovery.k8s.io/v1beta1": "discovery/v1beta1",
        "events.k8s.io/v1": "events/v1",
        "events.k8s.io/v1beta1": "events/v1beta1",
        "extensions/v1beta1": "extensions/v1beta1",
        "flowcontrol.apiserver.k8s.io/v1alpha1": "flowcontrol/v1alpha1",
        "flowcontrol.apiserver.k8s.io/v1beta1": "flowcontrol/v1beta1",
        "flowcontrol.apiserver.k8s.io/v1beta2": "flowcontrol/v1beta2",
        "helm.sh": "helm",
        "helm.sh/v2": "helm/v2",
        "helm.sh/v3": "helm/v3",
        "meta/v1": "meta/v1",
        "networking.k8s.io/v1": "networking/v1",
        "networking.k8s.io/v1alpha1": "networking/v1alpha1",
        "networking.k8s.io/v1beta1": "networking/v1beta1",
        "node.k8s.io/v1": "node/v1",
        "node.k8s.io/v1alpha1": "node/v1alpha1",
        "node.k8s.io/v1beta1": "node/v1beta1",
        "pkg/version": "pkg/version",
        "policy/v1": "policy/v1",
        "policy/v1beta1": "policy/v1beta1",
        "rbac.authorization.k8s.io/v1": "rbac/v1",
        "rbac.authorization.k8s.io/v1alpha1": "rbac/v1alpha1",
        "rbac.authorization.k8s.io/v1beta1": "rbac/v1beta1",
        "scheduling.k8s.io/v1": "scheduling/v1",
        "scheduling.k8s.io/v1alpha1": "scheduling/v1alpha1",
        "scheduling.k8s.io/v1beta1": "scheduling/v1beta1",
        "settings.k8s.io/v1alpha1": "settings/v1alpha1",
        "storage.k8s.io/v1": "storage/v1",
        "storage.k8s.io/v1alpha1": "storage/v1alpha1",
        "storage.k8s.io/v1beta1": "storage/v1beta1"
      },
      "packageImportAliases": {
        "github.com/pulumi/pulumi-kubernetes/sdk/v3/go/kubernetes/admissionregistration/v1": "admissionregistrationv1",
        "github.com/pulumi/pulumi-kubernetes/sdk/v3/go/kubernetes/admissionregistration/v1beta1": "admissionregistrationv1beta1",
        "github.com/pulumi/pulumi-kubernetes/sdk/v3/go/kubernetes/apiextensions/v1": "apiextensionsv1",
        "github.com/pulumi/pulumi-kubernetes/sdk/v3/go/kubernetes/apiextensions/v1beta1": "apiextensionsv1beta1",
        "github.com/pulumi/pulumi-kubernetes/sdk/v3/go/kubernetes/apiregistration/v1": "apiregistrationv1",
        "github.com/pulumi/pulumi-kubernetes/sdk/v3/go/kubernetes/apiregistration/v1beta1": "apiregistrationv1beta1",
        "github.com/pulumi/pulumi-kubernetes/sdk/v3/go/kubernetes/apps/v1": "appsv1",
        "github.com/pulumi/pulumi-kubernetes/sdk/v3/go/kubernetes/apps/v1beta1": "appsv1beta1",
        "github.com/pulumi/pulumi-kubernetes/sdk/v3/go/kubernetes/apps/v1beta2": "appsv1beta2",
        "github.com/pulumi/pulumi-kubernetes/sdk/v3/go/kubernetes/auditregistration/v1alpha1": "auditregistrationv1alpha1",
        "github.com/pulumi/pulumi-kubernetes/sdk/v3/go/kubernetes/authentication/v1": "authenticationv1",
        "github.com/pulumi/pulumi-kubernetes/sdk/v3/go/kubernetes/authentication/v1beta1": "authenticationv1beta1",
        "github.com/pulumi/pulumi-kubernetes/sdk/v3/go/kubernetes/authorization/v1": "authorizationv1",
        "github.com/pulumi/pulumi-kubernetes/sdk/v3/go/kubernetes/authorization/v1beta1": "authorizationv1beta1",
        "github.com/pulumi/pulumi-kubernetes/sdk/v3/go/kubernetes/autoscaling/v1": "autoscalingv1",
        "github.com/pulumi/pulumi-kubernetes/sdk/v3/go/kubernetes/autoscaling/v2": "autoscalingv2",
        "github.com/pulumi/pulumi-kubernetes/sdk/v3/go/kubernetes/autoscaling/v2beta1": "autoscalingv2beta1",
        "github.com/pulumi/pulumi-kubernetes/sdk/v3/go/kubernetes/autoscaling/v2beta2": "autoscalingv2beta2",
        "github.com/pulumi/pulumi-kubernetes/sdk/v3/go/kubernetes/batch/v1": "batchv1",
        "github.com/pulumi/pulumi-kubernetes/sdk/v3/go/kubernetes/batch/v1beta1": "batchv1beta1",
        "github.com/pulumi/pulumi-kubernetes/sdk/v3/go/kubernetes/batch/v2alpha1": "batchv2alpha1",
        "github.com/pulumi/pulumi-kubernetes/sdk/v3/go/kubernetes/certificates/v1": "certificatesv1",
        "github.com/pulumi/pulumi-kubernetes/sdk/v3/go/kubernetes/certificates/v1beta1": "certificatesv1beta1",
        "github.com/pulumi/pulumi-kubernetes/sdk/v3/go/kubernetes/coordination/v1": "coordinationv1",
        "github.com/pulumi/pulumi-kubernetes/sdk/v3/go/kubernetes/coordination/v1beta1": "coordinationv1beta1",
        "github.com/pulumi/pulumi-kubernetes/sdk/v3/go/kubernetes/core/v1": "corev1",
        "github.com/pulumi/pulumi-kubernetes/sdk/v3/go/kubernetes/discovery/v1": "discoveryv1",
        "github.com/pulumi/pulumi-kubernetes/sdk/v3/go/kubernetes/discovery/v1beta1": "discoveryv1beta1",
        "github.com/pulumi/pulumi-kubernetes/sdk/v3/go/kubernetes/events/v1": "eventsv1",
        "github.com/pulumi/pulumi-kubernetes/sdk/v3/go/kubernetes/events/v1beta1": "eventsv1beta1",
        "github.com/pulumi/pulumi-kubernetes/sdk/v3/go/kubernetes/extensions/v1beta1": "extensionsv1beta1",
        "github.com/pulumi/pulumi-kubernetes/sdk/v3/go/kubernetes/flowcontrol/v1alpha1": "flowcontrolv1alpha1",
        "github.com/pulumi/pulumi-kubernetes/sdk/v3/go/kubernetes/flowcontrol/v1beta1": "flowcontrolv1beta1",
        "github.com/pulumi/pulumi-kubernetes/sdk/v3/go/kubernetes/flowcontrol/v1beta2": "flowcontrolv1beta2",
        "github.com/pulumi/pulumi-kubernetes/sdk/v3/go/kubernetes/helm/v3": "helmv3",
        "github.com/pulumi/pulumi-kubernetes/sdk/v3/go/kubernetes/meta/v1": "metav1",
        "github.com/pulumi/pulumi-kubernetes/sdk/v3/go/kubernetes/networking/v1": "networkingv1",
        "github.com/pulumi/pulumi-kubernetes/sdk/v3/go/kubernetes/networking/v1alpha1": "networkingv1alpha1",
        "github.com/pulumi/pulumi-kubernetes/sdk/v3/go/kubernetes/networking/v1beta1": "networkingv1beta1",
        "github.com/pulumi/pulumi-kubernetes/sdk/v3/go/kubernetes/node/v1": "nodev1",
        "github.com/pulumi/pulumi-kubernetes/sdk/v3/go/kubernetes/node/v1alpha1": "nodev1alpha1",
        "github.com/pulumi/pulumi-kubernetes/sdk/v3/go/kubernetes/node/v1beta1": "nodev1beta1",
        "github.com/pulumi/pulumi-kubernetes/sdk/v3/go/kubernetes/pkg/version": "pkgversion",
        "github.com/pulumi/pulumi-kubernetes/sdk/v3/go/kubernetes/policy/v1": "policyv1",
        "github.com/pulumi/pulumi-kubernetes/sdk/v3/go/kubernetes/policy/v1beta1": "policyv1beta1",
        "github.com/pulumi/pulumi-kubernetes/sdk/v3/go/kubernetes/rbac/v1": "rbacv1",
        "github.com/pulumi/pulumi-kubernetes/sdk/v3/go/kubernetes/rbac/v1alpha1": "rbacv1alpha1",
        "github.com/pulumi/pulumi-kubernetes/sdk/v3/go/kubernetes/rbac/v1beta1": "rbacv1beta1",
        "github.com/pulumi/pulumi-kubernetes/sdk/v3/go/kubernetes/scheduling/v1": "schedulingv1",
        "github.com/pulumi/pulumi-kubernetes/sdk/v3/go/kubernetes/scheduling/v1alpha1": "schedulingv1alpha1",
        "github.com/pulumi/pulumi-kubernetes/sdk/v3/go/kubernetes/scheduling/v1beta1": "schedulingv1beta1",
        "github.com/pulumi/pulumi-kubernetes/sdk/v3/go/kubernetes/settings/v1alpha1": "settingsv1alpha1",
        "github.com/pulumi/pulumi-kubernetes/sdk/v3/go/kubernetes/storage/v1": "storagev1",
        "github.com/pulumi/pulumi-kubernetes/sdk/v3/go/kubernetes/storage/v1alpha1": "storagev1alpha1",
        "github.com/pulumi/pulumi-kubernetes/sdk/v3/go/kubernetes/storage/v1beta1": "storagev1beta1"
      }
    },
    "java": {
      "packages": {
        "admissionregistration.k8s.io/v1": "admissionregistration.v1",
        "admissionregistration.k8s.io/v1beta1": "admissionregistration.v1beta1",
        "apiextensions.k8s.io/v1": "apiextensions.v1",
        "apiextensions.k8s.io/v1beta1": "apiextensions.v1beta1",
        "apiregistration.k8s.io/v1": "apiregistration.v1",
        "apiregistration.k8s.io/v1beta1": "apiregistration.v1beta1",
        "apps/v1": "apps.v1",
        "apps/v1beta1": "apps.v1beta1",
        "apps/v1beta2": "apps.v1beta2",
        "auditregistration.k8s.io/v1alpha1": "auditregistration.v1alpha1",
        "authentication.k8s.io/v1": "authentication.v1",
        "authentication.k8s.io/v1beta1": "authentication.v1beta1",
        "authorization.k8s.io/v1": "authorization.v1",
        "authorization.k8s.io/v1beta1": "authorization.v1beta1",
        "autoscaling/v1": "autoscaling.v1",
        "autoscaling/v2": "autoscaling.v2",
        "autoscaling/v2beta1": "autoscaling.v2beta1",
        "autoscaling/v2beta2": "autoscaling.v2beta2",
        "batch/v1": "batch.v1",
        "batch/v1beta1": "batch.v1beta1",
        "batch/v2alpha1": "batch.v2alpha1",
        "certificates.k8s.io/v1": "certificates.v1",
        "certificates.k8s.io/v1beta1": "certificates.v1beta1",
        "coordination.k8s.io/v1": "coordination.v1",
        "coordination.k8s.io/v1beta1": "coordination.v1beta1",
        "core/v1": "core.v1",
        "discovery.k8s.io/v1": "discovery.v1",
        "discovery.k8s.io/v1beta1": "discovery.v1beta1",
        "events.k8s.io/v1": "events.v1",
        "events.k8s.io/v1beta1": "events.v1beta1",
        "extensions/v1beta1": "extensions.v1beta1",
        "flowcontrol.apiserver.k8s.io/v1alpha1": "flowcontrol.v1alpha1",
        "flowcontrol.apiserver.k8s.io/v1beta1": "flowcontrol.v1beta1",
        "flowcontrol.apiserver.k8s.io/v1beta2": "flowcontrol.v1beta2",
        "helm.sh/v2": "helm.v2",
        "helm.sh/v3": "helm.v3",
        "meta/v1": "meta.v1",
        "networking.k8s.io/v1": "networking.v1",
        "networking.k8s.io/v1alpha1": "networking.v1alpha1",
        "networking.k8s.io/v1beta1": "networking.v1beta1",
        "node.k8s.io/v1": "node.v1",
        "node.k8s.io/v1alpha1": "node.v1alpha1",
        "node.k8s.io/v1beta1": "node.v1beta1",
        "pkg/version": "pkg.version",
        "policy/v1": "policy.v1",
        "policy/v1beta1": "policy.v1beta1",
        "rbac.authorization.k8s.io/v1": "rbac.v1",
        "rbac.authorization.k8s.io/v1alpha1": "rbac.v1alpha1",
        "rbac.authorization.k8s.io/v1beta1": "rbac.v1beta1",
        "scheduling.k8s.io/v1": "scheduling.v1",
        "scheduling.k8s.io/v1alpha1": "scheduling.v1alpha1",
        "scheduling.k8s.io/v1beta1": "scheduling.v1beta1",
        "settings.k8s.io/v1alpha1": "settings.v1alpha1",
        "storage.k8s.io/v1": "storage.v1",
        "storage.k8s.io/v1alpha1": "storage.v1alpha1",
        "storage.k8s.io/v1beta1": "storage.v1beta1"
      }
    },
    "nodejs": {
      "compatibility": "kubernetes20",
      "dependencies": {
        "@pulumi/pulumi": "^3.25.0",
        "@types/glob": "^5.0.35",
        "@types/node-fetch": "^2.1.4",
        "@types/tmp": "^0.0.33",
        "glob": "^7.1.2",
        "node-fetch": "^2.3.0",
        "shell-quote": "^1.6.1",
        "tmp": "^0.0.33"
      },
      "devDependencies": {
        "@types/mocha": "^5.2.5",
        "@types/shell-quote": "^1.6.0",
        "mocha": "^5.2.0"
      },
      "moduleToPackage": {
        "admissionregistration.k8s.io/v1": "admissionregistration/v1",
        "admissionregistration.k8s.io/v1beta1": "admissionregistration/v1beta1",
        "apiextensions.k8s.io": "apiextensions",
        "apiextensions.k8s.io/v1": "apiextensions/v1",
        "apiextensions.k8s.io/v1beta1": "apiextensions/v1beta1",
        "apiregistration.k8s.io/v1": "apiregistration/v1",
        "apiregistration.k8s.io/v1beta1": "apiregistration/v1beta1",
        "apps/v1": "apps/v1",
        "apps/v1beta1": "apps/v1beta1",
        "apps/v1beta2": "apps/v1beta2",
        "auditregistration.k8s.io/v1alpha1": "auditregistration/v1alpha1",
        "authentication.k8s.io/v1": "authentication/v1",
        "authentication.k8s.io/v1beta1": "authentication/v1beta1",
        "authorization.k8s.io/v1": "authorization/v1",
        "authorization.k8s.io/v1beta1": "authorization/v1beta1",
        "autoscaling/v1": "autoscaling/v1",
        "autoscaling/v2": "autoscaling/v2",
        "autoscaling/v2beta1": "autoscaling/v2beta1",
        "autoscaling/v2beta2": "autoscaling/v2beta2",
        "batch/v1": "batch/v1",
        "batch/v1beta1": "batch/v1beta1",
        "batch/v2alpha1": "batch/v2alpha1",
        "certificates.k8s.io/v1": "certificates/v1",
        "certificates.k8s.io/v1beta1": "certificates/v1beta1",
        "coordination.k8s.io/v1": "coordination/v1",
        "coordination.k8s.io/v1beta1": "coordination/v1beta1",
        "core/v1": "core/v1",
        "discovery.k8s.io/v1": "discovery/v1",
        "discovery.k8s.io/v1beta1": "discovery/v1beta1",
        "events.k8s.io/v1": "events/v1",
        "events.k8s.io/v1beta1": "events/v1beta1",
        "extensions/v1beta1": "extensions/v1beta1",
        "flowcontrol.apiserver.k8s.io/v1alpha1": "flowcontrol/v1alpha1",
        "flowcontrol.apiserver.k8s.io/v1beta1": "flowcontrol/v1beta1",
        "flowcontrol.apiserver.k8s.io/v1beta2": "flowcontrol/v1beta2",
        "helm.sh": "helm",
        "helm.sh/v2": "helm/v2",
        "helm.sh/v3": "helm/v3",
        "meta/v1": "meta/v1",
        "networking.k8s.io/v1": "networking/v1",
        "networking.k8s.io/v1alpha1": "networking/v1alpha1",
        "networking.k8s.io/v1beta1": "networking/v1beta1",
        "node.k8s.io/v1": "node/v1",
        "node.k8s.io/v1alpha1": "node/v1alpha1",
        "node.k8s.io/v1beta1": "node/v1beta1",
        "pkg/version": "pkg/version",
        "policy/v1": "policy/v1",
        "policy/v1beta1": "policy/v1beta1",
        "rbac.authorization.k8s.io/v1": "rbac/v1",
        "rbac.authorization.k8s.io/v1alpha1": "rbac/v1alpha1",
        "rbac.authorization.k8s.io/v1beta1": "rbac/v1beta1",
        "scheduling.k8s.io/v1": "scheduling/v1",
        "scheduling.k8s.io/v1alpha1": "scheduling/v1alpha1",
        "scheduling.k8s.io/v1beta1": "scheduling/v1beta1",
        "settings.k8s.io/v1alpha1": "settings/v1alpha1",
        "storage.k8s.io/v1": "storage/v1",
        "storage.k8s.io/v1alpha1": "storage/v1alpha1",
        "storage.k8s.io/v1beta1": "storage/v1beta1"
      },
      "readme": "The Kubernetes provider package offers support for all Kubernetes resources and their properties.\nResources are exposed as types from modules based on Kubernetes API groups such as 'apps', 'core',\n'rbac', and 'storage', among many others. Additionally, support for deploying Helm charts ('helm')\nand YAML files ('yaml') is available in this package. Using this package allows you to\nprogrammatically declare instances of any Kubernetes resources and any supported resource version\nusing infrastructure as code, which Pulumi then uses to drive the Kubernetes API.\n\nIf this is your first time using this package, these two resources may be helpful:\n\n* [Kubernetes Getting Started Guide](https://www.pulumi.com/docs/quickstart/kubernetes/): Get up and running quickly.\n* [Kubernetes Pulumi Setup Documentation](https://www.pulumi.com/docs/quickstart/kubernetes/configure/): How to configure Pulumi\n    for use with your Kubernetes cluster.\n\nUse the navigation below to see detailed documentation for each of the supported Kubernetes resources.\n"
    },
    "python": {
      "compatibility": "kubernetes20",
      "moduleNameOverrides": {
        "admissionregistration.k8s.io/v1": "admissionregistration/v1",
        "admissionregistration.k8s.io/v1beta1": "admissionregistration/v1beta1",
        "apiextensions.k8s.io": "apiextensions",
        "apiextensions.k8s.io/v1": "apiextensions/v1",
        "apiextensions.k8s.io/v1beta1": "apiextensions/v1beta1",
        "apiregistration.k8s.io/v1": "apiregistration/v1",
        "apiregistration.k8s.io/v1beta1": "apiregistration/v1beta1",
        "apps/v1": "apps/v1",
        "apps/v1beta1": "apps/v1beta1",
        "apps/v1beta2": "apps/v1beta2",
        "auditregistration.k8s.io/v1alpha1": "auditregistration/v1alpha1",
        "authentication.k8s.io/v1": "authentication/v1",
        "authentication.k8s.io/v1beta1": "authentication/v1beta1",
        "authorization.k8s.io/v1": "authorization/v1",
        "authorization.k8s.io/v1beta1": "authorization/v1beta1",
        "autoscaling/v1": "autoscaling/v1",
        "autoscaling/v2": "autoscaling/v2",
        "autoscaling/v2beta1": "autoscaling/v2beta1",
        "autoscaling/v2beta2": "autoscaling/v2beta2",
        "batch/v1": "batch/v1",
        "batch/v1beta1": "batch/v1beta1",
        "batch/v2alpha1": "batch/v2alpha1",
        "certificates.k8s.io/v1": "certificates/v1",
        "certificates.k8s.io/v1beta1": "certificates/v1beta1",
        "coordination.k8s.io/v1": "coordination/v1",
        "coordination.k8s.io/v1beta1": "coordination/v1beta1",
        "core/v1": "core/v1",
        "discovery.k8s.io/v1": "discovery/v1",
        "discovery.k8s.io/v1beta1": "discovery/v1beta1",
        "events.k8s.io/v1": "events/v1",
        "events.k8s.io/v1beta1": "events/v1beta1",
        "extensions/v1beta1": "extensions/v1beta1",
        "flowcontrol.apiserver.k8s.io/v1alpha1": "flowcontrol/v1alpha1",
        "flowcontrol.apiserver.k8s.io/v1beta1": "flowcontrol/v1beta1",
        "flowcontrol.apiserver.k8s.io/v1beta2": "flowcontrol/v1beta2",
        "helm.sh": "helm",
        "helm.sh/v2": "helm/v2",
        "helm.sh/v3": "helm/v3",
        "meta/v1": "meta/v1",
        "networking.k8s.io/v1": "networking/v1",
        "networking.k8s.io/v1alpha1": "networking/v1alpha1",
        "networking.k8s.io/v1beta1": "networking/v1beta1",
        "node.k8s.io/v1": "node/v1",
        "node.k8s.io/v1alpha1": "node/v1alpha1",
        "node.k8s.io/v1beta1": "node/v1beta1",
        "pkg/version": "pkg/version",
        "policy/v1": "policy/v1",
        "policy/v1beta1": "policy/v1beta1",
        "rbac.authorization.k8s.io/v1": "rbac/v1",
        "rbac.authorization.k8s.io/v1alpha1": "rbac/v1alpha1",
        "rbac.authorization.k8s.io/v1beta1": "rbac/v1beta1",
        "scheduling.k8s.io/v1": "scheduling/v1",
        "scheduling.k8s.io/v1alpha1": "scheduling/v1alpha1",
        "scheduling.k8s.io/v1beta1": "scheduling/v1beta1",
        "settings.k8s.io/v1alpha1": "settings/v1alpha1",
        "storage.k8s.io/v1": "storage/v1",
        "storage.k8s.io/v1alpha1": "storage/v1alpha1",
        "storage.k8s.io/v1beta1": "storage/v1beta1"
      },
      "readme": "The Kubernetes provider package offers support for all Kubernetes resources and their properties.\nResources are exposed as types from modules based on Kubernetes API groups such as 'apps', 'core',\n'rbac', and 'storage', among many others. Additionally, support for deploying Helm charts ('helm')\nand YAML files ('yaml') is available in this package. Using this package allows you to\nprogrammatically declare instances of any Kubernetes resources and any supported resource version\nusing infrastructure as code, which Pulumi then uses to drive the Kubernetes API.\n\nIf this is your first time using this package, these two resources may be helpful:\n\n* [Kubernetes Getting Started Guide](https://www.pulumi.com/docs/quickstart/kubernetes/): Get up and running quickly.\n* [Kubernetes Pulumi Setup Documentation](https://www.pulumi.com/docs/quickstart/kubernetes/configure/): How to configure Pulumi\n    for use with your Kubernetes cluster.\n",
      "requires": {
        "pulumi": ">=3.25.0,<4.0.0",
        "pyyaml": ">=5.3.1",
        "requests": ">=2.21,<3.0"
      },
      "usesIOClasses": true
    }
  },
  "types": {
    "kubernetes:autoscaling/v2:ContainerResourceMetricSource": {
      "description": "ContainerResourceMetricSource indicates how to scale on a resource metric known to Kubernetes, as specified in requests and limits, describing each pod in the current scale target (e.g. CPU or memory).  The values will be averaged together before being compared to the target.  Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the \"pods\" source.  Only one \"target\" type should be set.",
      "properties": {
        "container": {
          "type": "string",
          "description": "container is the name of the container in the pods of the scaling target"
        },
        "name": {
          "type": "string",
          "description": "name is the name of the resource in question."
        },
        "target": {
          "$ref": "#/types/kubernetes:autoscaling/v2:MetricTarget",
          "description": "target specifies the target value for the given metric"
        }
      },
      "type": "object",
      "required": [
        "container",
        "name",
        "target"
      ],
      "language": {
        "nodejs": {
          "requiredOutputs": [
            "container",
            "name",
            "target"
          ]
        }
      }
    },
    "kubernetes:autoscaling/v2:ContainerResourceMetricStatus": {
      "description": "ContainerResourceMetricStatus indicates the current value of a resource metric known to Kubernetes, as specified in requests and limits, describing a single container in each pod in the current scale target (e.g. CPU or memory).  Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the \"pods\" source.",
      "properties": {
        "container": {
          "type": "string",
          "description": "Container is the name of the container in the pods of the scaling target"
        },
        "current": {
          "$ref": "#/types/kubernetes:autoscaling/v2:MetricValueStatus",
          "description": "current contains the current value for the given metric"
        },
        "name": {
          "type": "string",
          "description": "Name is the name of the resource in question."
        }
      },
      "type": "object",
      "required": [
        "container",
        "current",
        "name"
      ],
      "language": {
        "nodejs": {
          "requiredOutputs": [
            "container",
            "current",
            "name"
          ]
        }
      }
    },
    "kubernetes:autoscaling/v2:CrossVersionObjectReference": {
      "description": "CrossVersionObjectReference contains enough information to let you identify the referred resource.",
      "properties": {
        "apiVersion": {
          "type": "string",
          "description": "API version of the referent"
        },
        "kind": {
          "type": "string",
          "description": "Kind of the referent; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\""
        },
        "name": {
          "type": "string",
          "description": "Name of the referent; More info: http://kubernetes.io/docs/user-guide/identifiers#names"
        }
      },
      "type": "object",
      "required": [
        "kind",
        "name"
      ],
      "language": {
        "nodejs": {
          "requiredOutputs": [
            "apiVersion",
            "kind",
            "name"
          ]
        }
      }
    },
    "kubernetes:autoscaling/v2:ExternalMetricSource": {
      "description": "ExternalMetricSource indicates how to scale on a metric not associated with any Kubernetes object (for example length of queue in cloud messaging service, or QPS from loadbalancer running outside of cluster).",
      "properties": {
        "metric": {
          "$ref": "#/types/kubernetes:autoscaling/v2:MetricIdentifier",
          "description": "metric identifies the target metric by name and selector"
        },
        "target": {
          "$ref": "#/types/kubernetes:autoscaling/v2:MetricTarget",
          "description": "target specifies the target value for the given metric"
        }
      },
      "type": "object",
      "required": [
        "metric",
        "target"
      ],
      "language": {
        "nodejs": {
          "requiredOutputs": [
            "metric",
            "target"
          ]
        }
      }
    },
    "kubernetes:autoscaling/v2:ExternalMetricStatus": {
      "description": "ExternalMetricStatus indicates the current value of a global metric not associated with any Kubernetes object.",
      "properties": {
        "current": {
          "$ref": "#/types/kubernetes:autoscaling/v2:MetricValueStatus",
          "description": "current contains the current value for the given metric"
        },
        "metric": {
          "$ref": "#/types/kubernetes:autoscaling/v2:MetricIdentifier",
          "description": "metric identifies the target metric by name and selector"
        }
      },
      "type": "object",
      "required": [
        "current",
        "metric"
      ],
      "language": {
        "nodejs": {
          "requiredOutputs": [
            "current",
            "metric"
          ]
        }
      }
    },
    "kubernetes:autoscaling/v2:HPAScalingPolicy": {
      "description": "HPAScalingPolicy is a single policy which must hold true for a specified past interval.",
      "properties": {
        "periodSeconds": {
          "type": "integer",
          "description": "PeriodSeconds specifies the window of time for which the policy should hold true. PeriodSeconds must be greater than zero and less than or equal to 1800 (30 min)."
        },
        "type": {
          "type": "string",
          "description": "Type is used to specify the scaling policy."
        },
        "value": {
          "type": "integer",
          "description": "Value contains the amount of change which is permitted by the policy. It must be greater than zero"
        }
      },
      "type": "object",
      "required": [
        "periodSeconds",
        "type",
        "value"
      ],
      "language": {
        "nodejs": {
          "requiredOutputs": [
            "periodSeconds",
            "type",
            "value"
          ]
        }
      }
    },
    "kubernetes:autoscaling/v2:HPAScalingRules": {
      "description": "HPAScalingRules configures the scaling behavior for one direction. These Rules are applied after calculating DesiredReplicas from metrics for the HPA. They can limit the scaling velocity by specifying scaling policies. They can prevent flapping by specifying the stabilization window, so that the number of replicas is not set instantly, instead, the safest value from the stabilization window is chosen.",
      "properties": {
        "policies": {
          "type": "array",
          "items": {
            "$ref": "#/types/kubernetes:autoscaling/v2:HPAScalingPolicy"
          },
          "description": "policies is a list of potential scaling polices which can be used during scaling. At least one policy must be specified, otherwise the HPAScalingRules will be discarded as invalid"
        },
        "selectPolicy": {
          "type": "string",
          "description": "selectPolicy is used to specify which policy should be used. If not set, the default value Max is used."
        },
        "stabilizationWindowSeconds": {
          "type": "integer",
          "description": "StabilizationWindowSeconds is the number of seconds for which past recommendations should be considered while scaling up or scaling down. StabilizationWindowSeconds must be greater than or equal to zero and less than or equal to 3600 (one hour). If not set, use the default values: - For scale up: 0 (i.e. no stabilization is done). - For scale down: 300 (i.e. the stabilization window is 300 seconds long)."
        }
      },
      "type": "object",
      "language": {
        "nodejs": {
          "requiredOutputs": [
            "policies",
            "selectPolicy",
            "stabilizationWindowSeconds"
          ]
        }
      }
    },
    "kubernetes:autoscaling/v2:HorizontalPodAutoscalerBehavior": {
      "description": "HorizontalPodAutoscalerBehavior configures the scaling behavior of the target in both Up and Down directions (scaleUp and scaleDown fields respectively).",
      "properties": {
        "scaleDown": {
          "$ref": "#/types/kubernetes:autoscaling/v2:HPAScalingRules",
          "description": "scaleDown is scaling policy for scaling Down. If not set, the default value is to allow to scale down to minReplicas pods, with a 300 second stabilization window (i.e., the highest recommendation for the last 300sec is used)."
        },
        "scaleUp": {
          "$ref": "#/types/kubernetes:autoscaling/v2:HPAScalingRules",
          "description": "scaleUp is scaling policy for scaling Up. If not set, the default value is the higher of:\n  * increase no more than 4 pods per 60 seconds\n  * double the number of pods per 60 seconds\nNo stabilization is used."
        }
      },
      "type": "object",
      "language": {
        "nodejs": {
          "requiredOutputs": [
            "scaleDown",
            "scaleUp"
          ]
        }
      }
    },
    "kubernetes:autoscaling/v2:HorizontalPodAutoscalerCondition": {
      "description": "HorizontalPodAutoscalerCondition describes the state of a HorizontalPodAutoscaler at a certain point.",
      "properties": {
        "lastTransitionTime": {
          "type": "string",
          "description": "lastTransitionTime is the last time the condition transitioned from one status to another"
        },
        "message": {
          "type": "string",
          "description": "message is a human-readable explanation containing details about the transition"
        },
        "reason": {
          "type": "string",
          "description": "reason is the reason for the condition's last transition."
        },
        "status": {
          "type": "string",
          "description": "status is the status of the condition (True, False, Unknown)"
        },
        "type": {
          "type": "string",
          "description": "type describes the current condition"
        }
      },
      "type": "object",
      "required": [
        "status",
        "type"
      ],
      "language": {
        "nodejs": {
          "requiredOutputs": [
            "lastTransitionTime",
            "message",
            "reason",
            "status",
            "type"
          ]
        }
      }
    },
    "kubernetes:autoscaling/v2:HorizontalPodAutoscalerSpec": {
      "description": "HorizontalPodAutoscalerSpec describes the desired functionality of the HorizontalPodAutoscaler.",
      "properties": {
        "behavior": {
          "$ref": "#/types/kubernetes:autoscaling/v2:HorizontalPodAutoscalerBehavior",
          "description": "behavior configures the scaling behavior of the target in both Up and Down directions (scaleUp and scaleDown fields respectively). If not set, the default HPAScalingRules for scale up and scale down are used."
        },
        "maxReplicas": {
          "type": "integer",
          "description": "maxReplicas is the upper limit for the number of replicas to which the autoscaler can scale up. It cannot be less that minReplicas."
        },
        "metrics": {
          "type": "array",
          "items": {
            "$ref": "#/types/kubernetes:autoscaling/v2:MetricSpec"
          },
          "description": "metrics contains the specifications for which to use to calculate the desired replica count (the maximum replica count across all metrics will be used).  The desired replica count is calculated multiplying the ratio between the target value and the current value by the current number of pods.  Ergo, metrics used must decrease as the pod count is increased, and vice-versa.  See the individual metric source types for more information about how each type of metric must respond. If not set, the default metric will be set to 80% average CPU utilization."
        },
        "minReplicas": {
          "type": "integer",
          "description": "minReplicas is the lower limit for the number of replicas to which the autoscaler can scale down.  It defaults to 1 pod.  minReplicas is allowed to be 0 if the alpha feature gate HPAScaleToZero is enabled and at least one Object or External metric is configured.  Scaling is active as long as at least one metric value is available."
        },
        "scaleTargetRef": {
          "$ref": "#/types/kubernetes:autoscaling/v2:CrossVersionObjectReference",
          "description": "scaleTargetRef points to the target resource to scale, and is used to the pods for which metrics should be collected, as well as to actually change the replica count."
        }
      },
      "type": "object",
      "required": [
        "maxReplicas",
        "scaleTargetRef"
      ],
      "language": {
        "nodejs": {
          "requiredOutputs": [
            "behavior",
            "maxReplicas",
            "metrics",
            "minReplicas",
            "scaleTargetRef"
          ]
        }
      }
    },
    "kubernetes:autoscaling/v2:HorizontalPodAutoscalerStatus": {
      "description": "HorizontalPodAutoscalerStatus describes the current status of a horizontal pod autoscaler.",
      "properties": {
        "conditions": {
          "type": "array",
          "items": {
            "$ref": "#/types/kubernetes:autoscaling/v2:HorizontalPodAutoscalerCondition"
          },
          "description": "conditions is the set of conditions required for this autoscaler to scale its target, and indicates whether or not those conditions are met."
        },
        "currentMetrics": {
          "type": "array",
          "items": {
            "$ref": "#/types/kubernetes:autoscaling/v2:MetricStatus"
          },
          "description": "currentMetrics is the last read state of the metrics used by this autoscaler."
        },
        "currentReplicas": {
          "type": "integer",
          "description": "currentReplicas is current number of replicas of pods managed by this autoscaler, as last seen by the autoscaler."
        },
        "desiredReplicas": {
          "type": "integer",
          "description": "desiredReplicas is the desired number of replicas of pods managed by this autoscaler, as last calculated by the autoscaler."
        },
        "lastScaleTime": {
          "type": "string",
          "description": "lastScaleTime is the last time the HorizontalPodAutoscaler scaled the number of pods, used by the autoscaler to control how often the number of pods is changed."
        },
        "observedGeneration": {
          "type": "integer",
          "description": "observedGeneration is the most recent generation observed by this autoscaler."
        }
      },
      "type": "object",
      "required": [
        "desiredReplicas"
      ],
      "language": {
        "nodejs": {
          "requiredOutputs": [
            "conditions",
            "currentMetrics",
            "currentReplicas",
            "desiredReplicas",
            "lastScaleTime",
            "observedGeneration"
          ]
        }
      }
    },
    "kubernetes:autoscaling/v2:MetricIdentifier": {
      "description": "MetricIdentifier defines the name and optionally selector for a metric",
      "properties": {
        "name": {
          "type": "string",
          "description": "name is the name of the given metric"
        },
        "selector": {
          "$ref": "#/types/kubernetes:meta/v1:LabelSelector",
          "description": "selector is the string-encoded form of a standard kubernetes label selector for the given metric When set, it is passed as an additional parameter to the metrics server for more specific metrics scoping. When unset, just the metricName will be used to gather metrics."
        }
      },
      "type": "object",
      "required": [
        "name"
      ],
      "language": {
        "nodejs": {
          "requiredOutputs": [
            "name",
            "selector"
          ]
        }
      }
    },
    "kubernetes:autoscaling/v2:MetricSpec": {
      "description": "MetricSpec specifies how to scale based on a single metric (only `type` and one other matching field should be set at once).",
      "properties": {
        "containerResource": {
          "$ref": "#/types/kubernetes:autoscaling/v2:ContainerResourceMetricSource",
          "description": "containerResource refers to a resource metric (such as those specified in requests and limits) known to Kubernetes describing a single container in each pod of the current scale target (e.g. CPU or memory). Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the \"pods\" source. This is an alpha feature and can be enabled by the HPAContainerMetrics feature flag."
        },
        "external": {
          "$ref": "#/types/kubernetes:autoscaling/v2:ExternalMetricSource",
          "description": "external refers to a global metric that is not associated with any Kubernetes object. It allows autoscaling based on information coming from components running outside of cluster (for example length of queue in cloud messaging service, or QPS from loadbalancer running outside of cluster)."
        },
        "object": {
          "$ref": "#/types/kubernetes:autoscaling/v2:ObjectMetricSource",
          "description": "object refers to a metric describing a single kubernetes object (for example, hits-per-second on an Ingress object)."
        },
        "pods": {
          "$ref": "#/types/kubernetes:autoscaling/v2:PodsMetricSource",
          "description": "pods refers to a metric describing each pod in the current scale target (for example, transactions-processed-per-second).  The values will be averaged together before being compared to the target value."
        },
        "resource": {
          "$ref": "#/types/kubernetes:autoscaling/v2:ResourceMetricSource",
          "description": "resource refers to a resource metric (such as those specified in requests and limits) known to Kubernetes describing each pod in the current scale target (e.g. CPU or memory). Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the \"pods\" source."
        },
        "type": {
          "type": "string",
          "description": "type is the type of metric source.  It should be one of \"ContainerResource\", \"External\", \"Object\", \"Pods\" or \"Resource\", each mapping to a matching field in the object. Note: \"ContainerResource\" type is available on when the feature-gate HPAContainerMetrics is enabled"
        }
      },
      "type": "object",
      "required": [
        "type"
      ],
      "language": {
        "nodejs": {
          "requiredOutputs": [
            "containerResource",
            "external",
            "object",
            "pods",
            "resource",
            "type"
          ]
        }
      }
    },
    "kubernetes:autoscaling/v2:MetricStatus": {
      "description": "MetricStatus describes the last-read state of a single metric.",
      "properties": {
        "containerResource": {
          "$ref": "#/types/kubernetes:autoscaling/v2:ContainerResourceMetricStatus",
          "description": "container resource refers to a resource metric (such as those specified in requests and limits) known to Kubernetes describing a single container in each pod in the current scale target (e.g. CPU or memory). Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the \"pods\" source."
        },
        "external": {
          "$ref": "#/types/kubernetes:autoscaling/v2:ExternalMetricStatus",
          "description": "external refers to a global metric that is not associated with any Kubernetes object. It allows autoscaling based on information coming from components running outside of cluster (for example length of queue in cloud messaging service, or QPS from loadbalancer running outside of cluster)."
        },
        "object": {
          "$ref": "#/types/kubernetes:autoscaling/v2:ObjectMetricStatus",
          "description": "object refers to a metric describing a single kubernetes object (for example, hits-per-second on an Ingress object)."
        },
        "pods": {
          "$ref": "#/types/kubernetes:autoscaling/v2:PodsMetricStatus",
          "description": "pods refers to a metric describing each pod in the current scale target (for example, transactions-processed-per-second).  The values will be averaged together before being compared to the target value."
        },
        "resource": {
          "$ref": "#/types/kubernetes:autoscaling/v2:ResourceMetricStatus",
          "description": "resource refers to a resource metric (such as those specified in requests and limits) known to Kubernetes describing each pod in the current scale target (e.g. CPU or memory). Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the \"pods\" source."
        },
        "type": {
          "type": "string",
          "description": "type is the type of metric source.  It will be one of \"ContainerResource\", \"External\", \"Object\", \"Pods\" or \"Resource\", each corresponds to a matching field in the object. Note: \"ContainerResource\" type is available on when the feature-gate HPAContainerMetrics is enabled"
        }
      },
      "type": "object",
      "required": [
        "type"
      ],
      "language": {
        "nodejs": {
          "requiredOutputs": [
            "containerResource",
            "external",
            "object",
            "pods",
            "resource",
            "type"
          ]
        }
      }
    },
    "kubernetes:autoscaling/v2:MetricTarget": {
      "description": "MetricTarget defines the target value, average value, or average utilization of a specific metric",
      "properties": {
        "averageUtilization": {
          "type": "integer",
          "description": "averageUtilization is the target value of the average of the resource metric across all relevant pods, represented as a percentage of the requested value of the resource for the pods. Currently only valid for Resource metric source type"
        },
        "averageValue": {
          "type": "string",
          "description": "averageValue is the target value of the average of the metric across all relevant pods (as a quantity)"
        },
        "type": {
          "type": "string",
          "description": "type represents whether the metric type is Utilization, Value, or AverageValue"
        },
        "value": {
          "type": "string",
          "description": "value is the target value of the metric (as a quantity)."
        }
      },
      "type": "object",
      "required": [
        "type"
      ],
      "language": {
        "nodejs": {
          "requiredOutputs": [
            "averageUtilization",
            "averageValue",
            "type",
            "value"
          ]
        }
      }
    },
    "kubernetes:autoscaling/v2:MetricValueStatus": {
      "description": "MetricValueStatus holds the current value for a metric",
      "properties": {
        "averageUtilization": {
          "type": "integer",
          "description": "currentAverageUtilization is the current value of the average of the resource metric across all relevant pods, represented as a percentage of the requested value of the resource for the pods."
        },
        "averageValue": {
          "type": "string",
          "description": "averageValue is the current value of the average of the metric across all relevant pods (as a quantity)"
        },
        "value": {
          "type": "string",
          "description": "value is the current value of the metric (as a quantity)."
        }
      },
      "type": "object",
      "language": {
        "nodejs": {
          "requiredOutputs": [
            "averageUtilization",
            "averageValue",
            "value"
          ]
        }
      }
    },
    "kubernetes:autoscaling/v2:ObjectMetricSource": {
      "description": "ObjectMetricSource indicates how to scale on a metric describing a kubernetes object (for example, hits-per-second on an Ingress object).",
      "properties": {
        "describedObject": {
          "$ref": "#/types/kubernetes:autoscaling/v2:CrossVersionObjectReference",
          "description": "describedObject specifies the descriptions of a object,such as kind,name apiVersion"
        },
        "metric": {
          "$ref": "#/types/kubernetes:autoscaling/v2:MetricIdentifier",
          "description": "metric identifies the target metric by name and selector"
        },
        "target": {
          "$ref": "#/types/kubernetes:autoscaling/v2:MetricTarget",
          "description": "target specifies the target value for the given metric"
        }
      },
      "type": "object",
      "required": [
        "describedObject",
        "metric",
        "target"
      ],
      "language": {
        "nodejs": {
          "requiredOutputs": [
            "describedObject",
            "metric",
            "target"
          ]
        }
      }
    },
    "kubernetes:autoscaling/v2:ObjectMetricStatus": {
      "description": "ObjectMetricStatus indicates the current value of a metric describing a kubernetes object (for example, hits-per-second on an Ingress object).",
      "properties": {
        "current": {
          "$ref": "#/types/kubernetes:autoscaling/v2:MetricValueStatus",
          "description": "current contains the current value for the given metric"
        },
        "describedObject": {
          "$ref": "#/types/kubernetes:autoscaling/v2:CrossVersionObjectReference",
          "description": "DescribedObject specifies the descriptions of a object,such as kind,name apiVersion"
        },
        "metric": {
          "$ref": "#/types/kubernetes:autoscaling/v2:MetricIdentifier",
          "description": "metric identifies the target metric by name and selector"
        }
      },
      "type": "object",
      "required": [
        "current",
        "describedObject",
        "metric"
      ],
      "language": {
        "nodejs": {
          "requiredOutputs": [
            "current",
            "describedObject",
            "metric"
          ]
        }
      }
    },
    "kubernetes:autoscaling/v2:PodsMetricSource": {
      "description": "PodsMetricSource indicates how to scale on a metric describing each pod in the current scale target (for example, transactions-processed-per-second). The values will be averaged together before being compared to the target value.",
      "properties": {
        "metric": {
          "$ref": "#/types/kubernetes:autoscaling/v2:MetricIdentifier",
          "description": "metric identifies the target metric by name and selector"
        },
        "target": {
          "$ref": "#/types/kubernetes:autoscaling/v2:MetricTarget",
          "description": "target specifies the target value for the given metric"
        }
      },
      "type": "object",
      "required": [
        "metric",
        "target"
      ],
      "language": {
        "nodejs": {
          "requiredOutputs": [
            "metric",
            "target"
          ]
        }
      }
    },
    "kubernetes:autoscaling/v2:PodsMetricStatus": {
      "description": "PodsMetricStatus indicates the current value of a metric describing each pod in the current scale target (for example, transactions-processed-per-second).",
      "properties": {
        "current": {
          "$ref": "#/types/kubernetes:autoscaling/v2:MetricValueStatus",
          "description": "current contains the current value for the given metric"
        },
        "metric": {
          "$ref": "#/types/kubernetes:autoscaling/v2:MetricIdentifier",
          "description": "metric identifies the target metric by name and selector"
        }
      },
      "type": "object",
      "required": [
        "current",
        "metric"
      ],
      "language": {
        "nodejs": {
          "requiredOutputs": [
            "current",
            "metric"
          ]
        }
      }
    },
    "kubernetes:autoscaling/v2:ResourceMetricSource": {
      "description": "ResourceMetricSource indicates how to scale on a resource metric known to Kubernetes, as specified in requests and limits, describing each pod in the current scale target (e.g. CPU or memory).  The values will be averaged together before being compared to the target.  Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the \"pods\" source.  Only one \"target\" type should be set.",
      "properties": {
        "name": {
          "type": "string",
          "description": "name is the name of the resource in question."
        },
        "target": {
          "$ref": "#/types/kubernetes:autoscaling/v2:MetricTarget",
          "description": "target specifies the target value for the given metric"
        }
      },
      "type": "object",
      "required": [
        "name",
        "target"
      ],
      "language": {
        "nodejs": {
          "requiredOutputs": [
            "name",
            "target"
          ]
        }
      }
    },
    "kubernetes:autoscaling/v2:ResourceMetricStatus": {
      "description": "ResourceMetricStatus indicates the current value of a resource metric known to Kubernetes, as specified in requests and limits, describing each pod in the current scale target (e.g. CPU or memory).  Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the \"pods\" source.",
      "properties": {
        "current": {
          "$ref": "#/types/kubernetes:autoscaling/v2:MetricValueStatus",
          "description": "current contains the current value for the given metric"
        },
        "name": {
          "type": "string",
          "description": "Name is the name of the resource in question."
        }
      },
      "type": "object",
      "required": [
        "current",
        "name"
      ],
      "language": {
        "nodejs": {
          "requiredOutputs": [
            "current",
            "name"
          ]
        }
      }
    },
    "kubernetes:meta/v1:LabelSelector": {
      "description": "A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.",
      "properties": {
        "matchExpressions": {
          "type": "array",
          "items": {
            "$ref": "#/types/kubernetes:meta/v1:LabelSelectorRequirement"
          },
          "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed."
        },
        "matchLabels": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed."
        }
      },
      "type": "object",
      "language": {
        "nodejs": {
          "requiredOutputs": [
            "matchExpressions",
            "matchLabels"
          ]
        }
      }
    },
    "kubernetes:meta/v1:LabelSelectorRequirement": {
      "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
      "properties": {
        "key": {
          "type": "string",
          "description": "key is the label key that the selector applies to."
        },
        "operator": {
          "type": "string",
          "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist."
        },
        "values": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch."
        }
      },
      "type": "object",
      "required": [
        "key",
        "operator"
      ],
      "language": {
        "nodejs": {
          "requiredOutputs": [
            "key",
            "operator",
            "values"
          ]
        }
      }
    },
    "kubernetes:meta/v1:ManagedFieldsEntry": {
      "description": "ManagedFieldsEntry is a workflow-id, a FieldSet and the group version of the resource that the fieldset applies to.",
      "properties": {
        "apiVersion": {
          "type": "string",
          "description": "APIVersion defines the version of this resource that this field set applies to. The format is \"group/version\" just like the top-level APIVersion field. It is necessary to track the version of a field set because it cannot be automatically converted."
        },
        "fieldsType": {
          "type": "string",
          "description": "FieldsType is the discriminator for the different fields format and version. There is currently only one possible value: \"FieldsV1\""
        },
        "fieldsV1": {
          "type": "object",
          "$ref": "pulumi.json#/Json",
          "description": "FieldsV1 holds the first JSON version format as described in the \"FieldsV1\" type."
        },
        "manager": {
          "type": "string",
          "description": "Manager is an identifier of the workflow managing these fields."
        },
        "operation": {
          "type": "string",
          "description": "Operation is the type of operation which lead to this ManagedFieldsEntry being created. The only valid values for this field are 'Apply' and 'Update'."
        },
        "subresource": {
          "type": "string",
          "description": "Subresource is the name of the subresource used to update that object, or empty string if the object was updated through the main resource. The value of this field is used to distinguish between managers, even if they share the same name. For example, a status update will be distinct from a regular update using the same manager name. Note that the APIVersion field is not related to the Subresource field and it always corresponds to the version of the main resource."
        },
        "time": {
          "type": "string",
          "description": "Time is the timestamp of when the ManagedFields entry was added. The timestamp will also be updated if a field is added, the manager changes any of the owned fields value or removes a field. The timestamp does not update when a field is removed from the entry because another manager took it over."
        }
      },
      "type": "object",
      "language": {
        "nodejs": {
          "requiredOutputs": [
            "apiVersion",
            "fieldsType",
            "fieldsV1",
            "manager",
            "operation",
            "subresource",
            "time"
          ]
        }
      }
    },
    "kubernetes:meta/v1:ObjectMeta": {
      "description": "ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.",
      "properties": {
        "annotations": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations"
        },
        "clusterName": {
          "type": "string",
          "description": "The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request."
        },
        "creationTimestamp": {
          "type": "string",
          "description": "CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.\n\nPopulated by the system. Read-only. Null for lists. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata"
        },
        "deletionGracePeriodSeconds": {
          "type": "integer",
          "description": "Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only."
        },
        "deletionTimestamp": {
          "type": "string",
          "description": "DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource is expected to be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field, once the finalizers list is empty. As long as the finalizers list contains items, deletion is blocked. Once the deletionTimestamp is set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. After that 30 seconds, the Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup, remove the pod from the API. In the presence of network partitions, this object may still exist after this timestamp, until an administrator or automated process can determine the resource is fully terminated. If not set, graceful deletion of the object has not been requested.\n\nPopulated by the system when a graceful deletion is requested. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata"
        },
        "finalizers": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list."
        },
        "generateName": {
          "type": "string",
          "description": "GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n\nIf this field is specified and the generated name exists, the server will return a 409.\n\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency"
        },
        "generation": {
          "type": "integer",
          "description": "A sequence number representing a specific generation of the desired state. Populated by the system. Read-only."
        },
        "labels": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels"
        },
        "managedFields": {
          "type": "array",
          "items": {
            "$ref": "#/types/kubernetes:meta/v1:ManagedFieldsEntry"
          },
          "description": "ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn't need to set or understand this field. A workflow can be the user's name, a controller's name, or the name of a specific apply path like \"ci-cd\". The set of fields is always in the version that the workflow used when modifying the object."
        },
        "name": {
          "type": "string",
          "description": "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names"
        },
        "namespace": {
          "type": "string",
          "description": "Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces"
        },
        "ownerReferences": {
          "type": "array",
          "items": {
            "$ref": "#/types/kubernetes:meta/v1:OwnerReference"
          },
          "description": "List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller."
        },
        "resourceVersion": {
          "type": "string",
          "description": "An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\n\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency"
        },
        "selfLink": {
          "type": "string",
          "description": "Deprecated: selfLink is a legacy read-only field that is no longer populated by the system."
        },
        "uid": {
          "type": "string",
          "description": "UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\n\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids"
        }
      },
      "type": "object",
      "language": {
        "nodejs": {
          "requiredOutputs": [
            "annotations",
            "clusterName",
            "creationTimestamp",
            "deletionGracePeriodSeconds",
            "deletionTimestamp",
            "finalizers",
            "generateName",
            "generation",
            "labels",
            "managedFields",
            "name",
            "namespace",
            "ownerReferences",
            "resourceVersion",
            "selfLink",
            "uid"
          ]
        }
      }
    },
    "kubernetes:meta/v1:OwnerReference": {
      "description": "OwnerReference contains enough information to let you identify an owning object. An owning object must be in the same namespace as the dependent, or be cluster-scoped, so there is no namespace field.",
      "properties": {
        "apiVersion": {
          "type": "string",
          "description": "API version of the referent."
        },
        "blockOwnerDeletion": {
          "type": "boolean",
          "description": "If true, AND if the owner has the \"foregroundDeletion\" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. See https://kubernetes.io/docs/concepts/architecture/garbage-collection/#foreground-deletion for how the garbage collector interacts with this field and enforces the foreground deletion. Defaults to false. To set this field, a user needs \"delete\" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned."
        },
        "controller": {
          "type": "boolean",
          "description": "If true, this reference points to the managing controller."
        },
        "kind": {
          "type": "string",
          "description": "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
        },
        "name": {
          "type": "string",
          "description": "Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names"
        },
        "uid": {
          "type": "string",
          "description": "UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids"
        }
      },
      "type": "object",
      "required": [
        "apiVersion",
        "kind",
        "name",
        "uid"
      ],
      "language": {
        "nodejs": {
          "requiredOutputs": [
            "apiVersion",
            "blockOwnerDeletion",
            "controller",
            "kind",
            "name",
            "uid"
          ]
        }
      }
    }
  },
  "resources": {
    "kubernetes:autoscaling/v2:HorizontalPodAutoscaler": {
      "description": "HorizontalPodAutoscaler is the configuration for a horizontal pod autoscaler, which automatically manages the replica count of any resource implementing the scale subresource based on the metrics specified.",
      "properties": {
        "apiVersion": {
          "type": "string",
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "const": "autoscaling/v2"
        },
        "kind": {
          "type": "string",
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "const": "HorizontalPodAutoscaler"
        },
        "metadata": {
          "$ref": "#/types/kubernetes:meta/v1:ObjectMeta",
          "description": "metadata is the standard object metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata"
        },
        "spec": {
          "$ref": "#/types/kubernetes:autoscaling/v2:HorizontalPodAutoscalerSpec",
          "description": "spec is the specification for the behaviour of the autoscaler. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status."
        },
        "status": {
          "$ref": "#/types/kubernetes:autoscaling/v2:HorizontalPodAutoscalerStatus",
          "description": "status is the current information about the autoscaler."
        }
      },
      "type": "object",
      "language": {
        "nodejs": {
          "requiredOutputs": [
            "apiVersion",
            "kind",
            "metadata",
            "spec",
            "status"
          ]
        }
      },
      "inputProperties": {
        "apiVersion": {
          "type": "string",
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "const": "autoscaling/v2"
        },
        "kind": {
          "type": "string",
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "const": "HorizontalPodAutoscaler"
        },
        "metadata": {
          "$ref": "#/types/kubernetes:meta/v1:ObjectMeta",
          "description": "metadata is the standard object metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata"
        },
        "spec": {
          "$ref": "#/types/kubernetes:autoscaling/v2:HorizontalPodAutoscalerSpec",
          "description": "spec is the specification for the behaviour of the autoscaler. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status."
        }
      },
      "aliases": [
        {
          "type": "kubernetes:autoscaling/v1:HorizontalPodAutoscaler"
        },
        {
          "type": "kubernetes:autoscaling/v2beta1:HorizontalPodAutoscaler"
        },
        {
          "type": "kubernetes:autoscaling/v2beta2:HorizontalPodAutoscaler"
        }
      ]
    }
  },
  "functions": {}
}
