{
  "name": "aws",
  "description": "A Pulumi package for creating and managing Amazon Web Services (AWS) cloud resources.",
  "keywords": [
    "pulumi",
    "aws"
  ],
  "homepage": "https://pulumi.io",
  "license": "Apache-2.0",
  "attribution": "This Pulumi package is based on the [`aws` Terraform Provider](https://github.com/hashicorp/terraform-provider-aws).",
  "repository": "https://github.com/pulumi/pulumi-aws",
  "meta": {
    "moduleFormat": "(.*)(?:/[^/]*)"
  },
  "config": {
    "variables": {
      "accessKey": {
        "type": "string",
        "description": "The access key for API operations. You can retrieve this from the 'Security \u0026 Credentials' section of the AWS console.\n"
      },
      "allowedAccountIds": {
        "type": "array",
        "items": {
          "type": "string"
        }
      },
      "assumeRole": {
        "$ref": "#/types/aws:config/assumeRole:assumeRole"
      },
      "assumeRoleWithWebIdentity": {
        "$ref": "#/types/aws:config/assumeRoleWithWebIdentity:assumeRoleWithWebIdentity"
      },
      "customCaBundle": {
        "type": "string",
        "description": "File containing custom root and intermediate certificates. Can also be configured using the `AWS_CA_BUNDLE` environment\nvariable. (Setting `ca_bundle` in the shared config file is not supported.)\n"
      },
      "defaultTags": {
        "$ref": "#/types/aws:config/defaultTags:defaultTags",
        "description": "Configuration block with settings to default resource tags across all resources.\n"
      },
      "ec2MetadataServiceEndpoint": {
        "type": "string",
        "description": "Address of the EC2 metadata service endpoint to use. Can also be configured using the\n`AWS_EC2_METADATA_SERVICE_ENDPOINT` environment variable.\n"
      },
      "ec2MetadataServiceEndpointMode": {
        "type": "string",
        "description": "Protocol to use with EC2 metadata service endpoint.Valid values are `IPv4` and `IPv6`. Can also be configured using the\n`AWS_EC2_METADATA_SERVICE_ENDPOINT_MODE` environment variable.\n"
      },
      "endpoints": {
        "type": "array",
        "items": {
          "$ref": "#/types/aws:config/endpoints:endpoints"
        }
      },
      "forbiddenAccountIds": {
        "type": "array",
        "items": {
          "type": "string"
        }
      },
      "httpProxy": {
        "type": "string",
        "description": "The address of an HTTP proxy to use when accessing the AWS API. Can also be configured using the `HTTP_PROXY` or\n`HTTPS_PROXY` environment variables.\n"
      },
      "ignoreTags": {
        "$ref": "#/types/aws:config/ignoreTags:ignoreTags",
        "description": "Configuration block with settings to ignore resource tags across all resources.\n"
      },
      "insecure": {
        "type": "boolean",
        "description": "Explicitly allow the provider to perform \"insecure\" SSL requests. If omitted, default value is `false`\n"
      },
      "maxRetries": {
        "type": "integer",
        "description": "The maximum number of times an AWS API request is being executed. If the API request still fails, an error is thrown.\n"
      },
      "profile": {
        "type": "string",
        "description": "The profile for API operations. If not set, the default profile created with `aws configure` will be used.\n"
      },
      "region": {
        "type": "string",
        "$ref": "#/types/aws:index/region:Region",
        "description": "The region where AWS operations will take place. Examples are us-east-1, us-west-2, etc.\n",
        "defaultInfo": {
          "environment": [
            "AWS_REGION",
            "AWS_DEFAULT_REGION"
          ]
        }
      },
      "s3ForcePathStyle": {
        "type": "boolean",
        "description": "Set this to true to enable the request to use path-style addressing, i.e., https://s3.amazonaws.com/BUCKET/KEY. By\ndefault, the S3 client will use virtual hosted bucket addressing when possible (https://BUCKET.s3.amazonaws.com/KEY).\nSpecific to the Amazon S3 service.\n",
        "deprecationMessage": "Use s3_use_path_style instead."
      },
      "s3UsePathStyle": {
        "type": "boolean",
        "description": "Set this to true to enable the request to use path-style addressing, i.e., https://s3.amazonaws.com/BUCKET/KEY. By\ndefault, the S3 client will use virtual hosted bucket addressing when possible (https://BUCKET.s3.amazonaws.com/KEY).\nSpecific to the Amazon S3 service.\n"
      },
      "secretKey": {
        "type": "string",
        "description": "The secret key for API operations. You can retrieve this from the 'Security \u0026 Credentials' section of the AWS console.\n"
      },
      "sharedConfigFiles": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "List of paths to shared config files. If not set, defaults to [~/.aws/config].\n"
      },
      "sharedCredentialsFile": {
        "type": "string",
        "description": "The path to the shared credentials file. If not set, defaults to ~/.aws/credentials.\n",
        "deprecationMessage": "Use shared_credentials_files instead."
      },
      "sharedCredentialsFiles": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "List of paths to shared credentials files. If not set, defaults to [~/.aws/credentials].\n"
      },
      "skipCredentialsValidation": {
        "type": "boolean",
        "description": "Skip the credentials validation via STS API. Used for AWS API implementations that do not have STS\navailable/implemented.\n",
        "default": false
      },
      "skipGetEc2Platforms": {
        "type": "boolean",
        "description": "Skip getting the supported EC2 platforms. Used by users that don't have ec2:DescribeAccountAttributes permissions.\n",
        "default": true
      },
      "skipMetadataApiCheck": {
        "type": "boolean",
        "description": "Skip the AWS Metadata API check. Used for AWS API implementations that do not have a metadata api endpoint.\n",
        "default": true
      },
      "skipRegionValidation": {
        "type": "boolean",
        "description": "Skip static validation of region name. Used by users of alternative AWS-like APIs or users w/ access to regions that are\nnot public (yet).\n",
        "default": true
      },
      "skipRequestingAccountId": {
        "type": "boolean",
        "description": "Skip requesting the account ID. Used for AWS API implementations that do not have IAM/STS API and/or metadata API.\n"
      },
      "stsRegion": {
        "type": "string",
        "description": "The region where AWS STS operations will take place. Examples are us-east-1 and us-west-2.\n"
      },
      "token": {
        "type": "string",
        "description": "session token. A session token is only required if you are using temporary security credentials.\n"
      },
      "useDualstackEndpoint": {
        "type": "boolean",
        "description": "Resolve an endpoint with DualStack capability\n"
      },
      "useFipsEndpoint": {
        "type": "boolean",
        "description": "Resolve an endpoint with FIPS capability\n"
      }
    }
  },
  "resources": {
    "aws:accessanalyzer/archiveRule:ArchiveRule": {
      "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n### Basic Usage\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as aws from \"@pulumi/aws\";\n\nconst example = new aws.accessanalyzer.ArchiveRule(\"example\", {\n    analyserName: \"example-analyzer\",\n    filters: [\n        {\n            criteria: \"condition.aws:UserId\",\n            eqs: [\"userid\"],\n        },\n        {\n            criteria: \"error\",\n            exists: \"true\",\n        },\n        {\n            criteria: \"isPublic\",\n            eqs: [\"false\"],\n        },\n    ],\n    ruleName: \"example-rule\",\n});\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.aws.accessanalyzer.ArchiveRule;\nimport com.pulumi.aws.accessanalyzer.ArchiveRuleArgs;\nimport com.pulumi.aws.accessanalyzer.inputs.ArchiveRuleFilterArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new ArchiveRule(\"example\", ArchiveRuleArgs.builder()        \n            .analyserName(\"example-analyzer\")\n            .filters(            \n                ArchiveRuleFilterArgs.builder()\n                    .criteria(\"condition.aws:UserId\")\n                    .eqs(\"userid\")\n                    .build(),\n                ArchiveRuleFilterArgs.builder()\n                    .criteria(\"error\")\n                    .exists(true)\n                    .build(),\n                ArchiveRuleFilterArgs.builder()\n                    .criteria(\"isPublic\")\n                    .eqs(\"false\")\n                    .build())\n            .ruleName(\"example-rule\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: aws:accessanalyzer:ArchiveRule\n    properties:\n      analyserName: example-analyzer\n      filters:\n        - criteria: condition.aws:UserId\n          eqs:\n            - userid\n        - criteria: error\n          exists: true\n        - criteria: isPublic\n          eqs:\n            - false\n      ruleName: example-rule\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nAccessAnalyzer ArchiveRule can be imported using the `analyzer_name/rule_name`, e.g.,\n\n```sh\n $ pulumi import aws:accessanalyzer/archiveRule:ArchiveRule example example-analyzer/example-rule\n```\n\n ",
      "properties": {
        "analyzerName": {
          "type": "string",
          "description": "Analyzer name.\n"
        },
        "filters": {
          "type": "array",
          "items": {
            "$ref": "#/types/aws:accessanalyzer/ArchiveRuleFilter:ArchiveRuleFilter"
          },
          "description": "The filter criteria for the archive rule. See Filter for more details.\n"
        },
        "ruleName": {
          "type": "string",
          "description": "Rule name.\n"
        }
      },
      "required": [
        "analyzerName",
        "filters",
        "ruleName"
      ],
      "inputProperties": {
        "analyzerName": {
          "type": "string",
          "description": "Analyzer name.\n",
          "willReplaceOnChanges": true
        },
        "filters": {
          "type": "array",
          "items": {
            "$ref": "#/types/aws:accessanalyzer/ArchiveRuleFilter:ArchiveRuleFilter"
          },
          "description": "The filter criteria for the archive rule. See Filter for more details.\n"
        },
        "ruleName": {
          "type": "string",
          "description": "Rule name.\n",
          "willReplaceOnChanges": true
        }
      },
      "requiredInputs": [
        "analyzerName",
        "filters",
        "ruleName"
      ],
      "stateInputs": {
        "description": "Input properties used for looking up and filtering ArchiveRule resources.\n",
        "properties": {
          "analyzerName": {
            "type": "string",
            "description": "Analyzer name.\n",
            "willReplaceOnChanges": true
          },
          "filters": {
            "type": "array",
            "items": {
              "$ref": "#/types/aws:accessanalyzer/ArchiveRuleFilter:ArchiveRuleFilter"
            },
            "description": "The filter criteria for the archive rule. See Filter for more details.\n"
          },
          "ruleName": {
            "type": "string",
            "description": "Rule name.\n",
            "willReplaceOnChanges": true
          }
        },
        "type": "object"
      }
    },
    "aws:acm/certificate:Certificate": {
      "description": "The ACM certificate resource allows requesting and management of certificates\nfrom the Amazon Certificate Manager.\n\nIt deals with requesting certificates and managing their attributes and life-cycle.\nThis resource does not deal with validation of a certificate but can provide inputs\nfor other resources implementing the validation. It does not wait for a certificate to be issued.\nUse a `aws.acm.CertificateValidation` resource for this.\n\nMost commonly, this resource is used together with `aws.route53.Record` and\n`aws.acm.CertificateValidation` to request a DNS validated certificate,\ndeploy the required validation records and wait for validation to complete.\n\nDomain validation through E-Mail is also supported but should be avoided as it requires a manual step outside\nof this provider.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n### Create Certificate\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as aws from \"@pulumi/aws\";\n\nconst cert = new aws.acm.Certificate(\"cert\", {\n    domainName: \"example.com\",\n    tags: {\n        Environment: \"test\",\n    },\n    validationMethod: \"DNS\",\n});\n```\n```python\nimport pulumi\nimport pulumi_aws as aws\n\ncert = aws.acm.Certificate(\"cert\",\n    domain_name=\"example.com\",\n    tags={\n        \"Environment\": \"test\",\n    },\n    validation_method=\"DNS\")\n```\n```csharp\nusing Pulumi;\nusing Aws = Pulumi.Aws;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var cert = new Aws.Acm.Certificate(\"cert\", new Aws.Acm.CertificateArgs\n        {\n            DomainName = \"example.com\",\n            Tags = \n            {\n                { \"Environment\", \"test\" },\n            },\n            ValidationMethod = \"DNS\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/acm\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := acm.NewCertificate(ctx, \"cert\", &acm.CertificateArgs{\n\t\t\tDomainName: pulumi.String(\"example.com\"),\n\t\t\tTags: pulumi.StringMap{\n\t\t\t\t\"Environment\": pulumi.String(\"test\"),\n\t\t\t},\n\t\t\tValidationMethod: pulumi.String(\"DNS\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.aws.acm.Certificate;\nimport com.pulumi.aws.acm.CertificateArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var cert = new Certificate(\"cert\", CertificateArgs.builder()        \n            .domainName(\"example.com\")\n            .tags(Map.of(\"Environment\", \"test\"))\n            .validationMethod(\"DNS\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  cert:\n    type: aws:acm:Certificate\n    properties:\n      domainName: example.com\n      tags:\n        Environment: test\n      validationMethod: DNS\n```\n{{% /example %}}\n{{% example %}}\n### Custom Domain Validation Options\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as aws from \"@pulumi/aws\";\n\nconst cert = new aws.acm.Certificate(\"cert\", {\n    domainName: \"testing.example.com\",\n    validationMethod: \"EMAIL\",\n    validationOptions: [{\n        domainName: \"testing.example.com\",\n        validationDomain: \"example.com\",\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_aws as aws\n\ncert = aws.acm.Certificate(\"cert\",\n    domain_name=\"testing.example.com\",\n    validation_method=\"EMAIL\",\n    validation_options=[aws.acm.CertificateValidationOptionArgs(\n        domain_name=\"testing.example.com\",\n        validation_domain=\"example.com\",\n    )])\n```\n```csharp\nusing Pulumi;\nusing Aws = Pulumi.Aws;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var cert = new Aws.Acm.Certificate(\"cert\", new Aws.Acm.CertificateArgs\n        {\n            DomainName = \"testing.example.com\",\n            ValidationMethod = \"EMAIL\",\n            ValidationOptions = \n            {\n                new Aws.Acm.Inputs.CertificateValidationOptionArgs\n                {\n                    DomainName = \"testing.example.com\",\n                    ValidationDomain = \"example.com\",\n                },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/acm\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := acm.NewCertificate(ctx, \"cert\", &acm.CertificateArgs{\n\t\t\tDomainName:       pulumi.String(\"testing.example.com\"),\n\t\t\tValidationMethod: pulumi.String(\"EMAIL\"),\n\t\t\tValidationOptions: acm.CertificateValidationOptionArray{\n\t\t\t\t&acm.CertificateValidationOptionArgs{\n\t\t\t\t\tDomainName:       pulumi.String(\"testing.example.com\"),\n\t\t\t\t\tValidationDomain: pulumi.String(\"example.com\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.aws.acm.Certificate;\nimport com.pulumi.aws.acm.CertificateArgs;\nimport com.pulumi.aws.acm.inputs.CertificateValidationOptionArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var cert = new Certificate(\"cert\", CertificateArgs.builder()        \n            .domainName(\"testing.example.com\")\n            .validationMethod(\"EMAIL\")\n            .validationOptions(CertificateValidationOptionArgs.builder()\n                .domainName(\"testing.example.com\")\n                .validationDomain(\"example.com\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  cert:\n    type: aws:acm:Certificate\n    properties:\n      domainName: testing.example.com\n      validationMethod: EMAIL\n      validationOptions:\n        - domainName: testing.example.com\n          validationDomain: example.com\n```\n{{% /example %}}\n{{% example %}}\n### Existing Certificate Body Import\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as aws from \"@pulumi/aws\";\nimport * as tls from \"@pulumi/tls\";\n\nconst examplePrivateKey = new tls.PrivateKey(\"examplePrivateKey\", {algorithm: \"RSA\"});\nconst exampleSelfSignedCert = new tls.SelfSignedCert(\"exampleSelfSignedCert\", {\n    keyAlgorithm: \"RSA\",\n    privateKeyPem: examplePrivateKey.privateKeyPem,\n    subjects: [{\n        commonName: \"example.com\",\n        organization: \"ACME Examples, Inc\",\n    }],\n    validityPeriodHours: 12,\n    allowedUses: [\n        \"key_encipherment\",\n        \"digital_signature\",\n        \"server_auth\",\n    ],\n});\nconst cert = new aws.acm.Certificate(\"cert\", {\n    privateKey: examplePrivateKey.privateKeyPem,\n    certificateBody: exampleSelfSignedCert.certPem,\n});\n```\n```python\nimport pulumi\nimport pulumi_aws as aws\nimport pulumi_tls as tls\n\nexample_private_key = tls.PrivateKey(\"examplePrivateKey\", algorithm=\"RSA\")\nexample_self_signed_cert = tls.SelfSignedCert(\"exampleSelfSignedCert\",\n    key_algorithm=\"RSA\",\n    private_key_pem=example_private_key.private_key_pem,\n    subjects=[tls.SelfSignedCertSubjectArgs(\n        common_name=\"example.com\",\n        organization=\"ACME Examples, Inc\",\n    )],\n    validity_period_hours=12,\n    allowed_uses=[\n        \"key_encipherment\",\n        \"digital_signature\",\n        \"server_auth\",\n    ])\ncert = aws.acm.Certificate(\"cert\",\n    private_key=example_private_key.private_key_pem,\n    certificate_body=example_self_signed_cert.cert_pem)\n```\n```csharp\nusing Pulumi;\nusing Aws = Pulumi.Aws;\nusing Tls = Pulumi.Tls;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var examplePrivateKey = new Tls.PrivateKey(\"examplePrivateKey\", new Tls.PrivateKeyArgs\n        {\n            Algorithm = \"RSA\",\n        });\n        var exampleSelfSignedCert = new Tls.SelfSignedCert(\"exampleSelfSignedCert\", new Tls.SelfSignedCertArgs\n        {\n            KeyAlgorithm = \"RSA\",\n            PrivateKeyPem = examplePrivateKey.PrivateKeyPem,\n            Subjects = \n            {\n                new Tls.Inputs.SelfSignedCertSubjectArgs\n                {\n                    CommonName = \"example.com\",\n                    Organization = \"ACME Examples, Inc\",\n                },\n            },\n            ValidityPeriodHours = 12,\n            AllowedUses = \n            {\n                \"key_encipherment\",\n                \"digital_signature\",\n                \"server_auth\",\n            },\n        });\n        var cert = new Aws.Acm.Certificate(\"cert\", new Aws.Acm.CertificateArgs\n        {\n            PrivateKey = examplePrivateKey.PrivateKeyPem,\n            CertificateBody = exampleSelfSignedCert.CertPem,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/acm\"\n\t\"github.com/pulumi/pulumi-tls/sdk/v4/go/tls\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texamplePrivateKey, err := tls.NewPrivateKey(ctx, \"examplePrivateKey\", &tls.PrivateKeyArgs{\n\t\t\tAlgorithm: pulumi.String(\"RSA\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleSelfSignedCert, err := tls.NewSelfSignedCert(ctx, \"exampleSelfSignedCert\", &tls.SelfSignedCertArgs{\n\t\t\tKeyAlgorithm:  pulumi.String(\"RSA\"),\n\t\t\tPrivateKeyPem: examplePrivateKey.PrivateKeyPem,\n\t\t\tSubjects: SelfSignedCertSubjectArray{\n\t\t\t\t&SelfSignedCertSubjectArgs{\n\t\t\t\t\tCommonName:   pulumi.String(\"example.com\"),\n\t\t\t\t\tOrganization: pulumi.String(\"ACME Examples, Inc\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tValidityPeriodHours: pulumi.Int(12),\n\t\t\tAllowedUses: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"key_encipherment\"),\n\t\t\t\tpulumi.String(\"digital_signature\"),\n\t\t\t\tpulumi.String(\"server_auth\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = acm.NewCertificate(ctx, \"cert\", &acm.CertificateArgs{\n\t\t\tPrivateKey:      examplePrivateKey.PrivateKeyPem,\n\t\t\tCertificateBody: exampleSelfSignedCert.CertPem,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.tls.PrivateKey;\nimport com.pulumi.tls.PrivateKeyArgs;\nimport com.pulumi.tls.SelfSignedCert;\nimport com.pulumi.tls.SelfSignedCertArgs;\nimport com.pulumi.tls.inputs.SelfSignedCertSubjectArgs;\nimport com.pulumi.aws.acm.Certificate;\nimport com.pulumi.aws.acm.CertificateArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var examplePrivateKey = new PrivateKey(\"examplePrivateKey\", PrivateKeyArgs.builder()        \n            .algorithm(\"RSA\")\n            .build());\n\n        var exampleSelfSignedCert = new SelfSignedCert(\"exampleSelfSignedCert\", SelfSignedCertArgs.builder()        \n            .keyAlgorithm(\"RSA\")\n            .privateKeyPem(examplePrivateKey.privateKeyPem())\n            .subjects(SelfSignedCertSubjectArgs.builder()\n                .commonName(\"example.com\")\n                .organization(\"ACME Examples, Inc\")\n                .build())\n            .validityPeriodHours(12)\n            .allowedUses(            \n                \"key_encipherment\",\n                \"digital_signature\",\n                \"server_auth\")\n            .build());\n\n        var cert = new Certificate(\"cert\", CertificateArgs.builder()        \n            .privateKey(examplePrivateKey.privateKeyPem())\n            .certificateBody(exampleSelfSignedCert.certPem())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  examplePrivateKey:\n    type: tls:PrivateKey\n    properties:\n      algorithm: RSA\n  exampleSelfSignedCert:\n    type: tls:SelfSignedCert\n    properties:\n      keyAlgorithm: RSA\n      privateKeyPem: ${examplePrivateKey.privateKeyPem}\n      subjects:\n        - commonName: example.com\n          organization: ACME Examples, Inc\n      validityPeriodHours: 12\n      allowedUses:\n        - key_encipherment\n        - digital_signature\n        - server_auth\n  cert:\n    type: aws:acm:Certificate\n    properties:\n      privateKey: ${examplePrivateKey.privateKeyPem}\n      certificateBody: ${exampleSelfSignedCert.certPem}\n```\n{{% /example %}}\n{{% example %}}\n### Referencing domain_validation_options With for_each Based Resources\n\nSee the `aws.acm.CertificateValidation` resource for a full example of performing DNS validation.\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as aws from \"@pulumi/aws\";\n\nconst example: aws.route53.Record[];\nfor (const range of Object.entries(.reduce((__obj, dvo) => { ...__obj, [dvo.domainName]: {\n    name: dvo.resourceRecordName,\n    record: dvo.resourceRecordValue,\n    type: dvo.resourceRecordType,\n} })).map(([k, v]) => {key: k, value: v})) {\n    example.push(new aws.route53.Record(`example-${range.key}`, {\n        allowOverwrite: true,\n        name: range.value.name,\n        records: [range.value.record],\n        ttl: 60,\n        type: aws.route53.recordtype.RecordType[range.value.type],\n        zoneId: aws_route53_zone.example.zone_id,\n    }));\n}\n```\n```python\nimport pulumi\nimport pulumi_aws as aws\n\nexample = []\nfor range in [{\"key\": k, \"value\": v} for [k, v] in enumerate({dvo.domainName: {\n    name: dvo.resourceRecordName,\n    record: dvo.resourceRecordValue,\n    type: dvo.resourceRecordType,\n} for dvo in aws_acm_certificate.example.domain_validation_options})]:\n    example.append(aws.route53.Record(f\"example-{range['key']}\",\n        allow_overwrite=True,\n        name=range[\"value\"][\"name\"],\n        records=[range[\"value\"][\"record\"]],\n        ttl=60,\n        type=aws.route53/recordtype.RecordType(range[\"value\"][\"type\"]),\n        zone_id=aws_route53_zone[\"example\"][\"zone_id\"]))\n```\n```yaml\nresources:\n  example:\n    type: aws:route53:Record\n    properties:\n      allowOverwrite: true\n      name: ${range.value.name}\n      records:\n        - ${range.value.record}\n      ttl: 60\n      type: ${range.value.type}\n      zoneId: ${aws_route53_zone.example.zone_id}\n    options: {}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nCertificates can be imported using their ARN, e.g.,\n\n```sh\n $ pulumi import aws:acm/certificate:Certificate cert arn:aws:acm:eu-central-1:123456789012:certificate/7e7a28d2-163f-4b8f-b9cd-822f96c08d6a\n```\n\n ",
      "properties": {
        "arn": {
          "type": "string",
          "description": "The ARN of the certificate\n"
        },
        "certificateAuthorityArn": {
          "type": "string",
          "description": "ARN of an ACM PCA\n"
        },
        "certificateBody": {
          "type": "string",
          "description": "The certificate's PEM-formatted public key\n"
        },
        "certificateChain": {
          "type": "string",
          "description": "The certificate's PEM-formatted chain\n* Creating a private CA issued certificate\n"
        },
        "domainName": {
          "type": "string",
          "description": "A fully qualified domain name (FQDN) in the certificate.\n"
        },
        "domainValidationOptions": {
          "type": "array",
          "items": {
            "$ref": "#/types/aws:acm/CertificateDomainValidationOption:CertificateDomainValidationOption"
          },
          "description": "Set of domain validation objects which can be used to complete certificate validation. Can have more than one element, e.g., if SANs are defined. Only set if `DNS`-validation was used.\n"
        },
        "options": {
          "$ref": "#/types/aws:acm/CertificateOptions:CertificateOptions",
          "description": "Configuration block used to set certificate options. Detailed below.\n"
        },
        "privateKey": {
          "type": "string",
          "description": "The certificate's PEM-formatted private key\n"
        },
        "status": {
          "type": "string",
          "description": "Status of the certificate.\n"
        },
        "subjectAlternativeNames": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Set of domains that should be SANs in the issued certificate. To remove all elements of a previously configured list, set this value equal to an empty list (`[]`).\n"
        },
        "tags": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "A map of tags to assign to the resource..\n"
        },
        "tagsAll": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "A map of tags assigned to the resource, including those inherited from the provider .\n"
        },
        "validationEmails": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of addresses that received a validation E-Mail. Only set if `EMAIL`-validation was used.\n"
        },
        "validationMethod": {
          "type": "string",
          "description": "Which method to use for validation. `DNS` or `EMAIL` are valid, `NONE` can be used for certificates that were imported into ACM and then into the provider.\n"
        },
        "validationOptions": {
          "type": "array",
          "items": {
            "$ref": "#/types/aws:acm/CertificateValidationOption:CertificateValidationOption"
          },
          "description": "Configuration block used to specify information about the initial validation of each domain name. Detailed below.\n* Importing an existing certificate\n"
        }
      },
      "required": [
        "arn",
        "domainName",
        "domainValidationOptions",
        "status",
        "subjectAlternativeNames",
        "tagsAll",
        "validationEmails",
        "validationMethod"
      ],
      "inputProperties": {
        "certificateAuthorityArn": {
          "type": "string",
          "description": "ARN of an ACM PCA\n",
          "willReplaceOnChanges": true
        },
        "certificateBody": {
          "type": "string",
          "description": "The certificate's PEM-formatted public key\n"
        },
        "certificateChain": {
          "type": "string",
          "description": "The certificate's PEM-formatted chain\n* Creating a private CA issued certificate\n"
        },
        "domainName": {
          "type": "string",
          "description": "A fully qualified domain name (FQDN) in the certificate.\n",
          "willReplaceOnChanges": true
        },
        "options": {
          "$ref": "#/types/aws:acm/CertificateOptions:CertificateOptions",
          "description": "Configuration block used to set certificate options. Detailed below.\n"
        },
        "privateKey": {
          "type": "string",
          "description": "The certificate's PEM-formatted private key\n"
        },
        "subjectAlternativeNames": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "willReplaceOnChanges": true,
          "description": "Set of domains that should be SANs in the issued certificate. To remove all elements of a previously configured list, set this value equal to an empty list (`[]`).\n"
        },
        "tags": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "A map of tags to assign to the resource..\n"
        },
        "validationMethod": {
          "type": "string",
          "description": "Which method to use for validation. `DNS` or `EMAIL` are valid, `NONE` can be used for certificates that were imported into ACM and then into the provider.\n",
          "willReplaceOnChanges": true
        },
        "validationOptions": {
          "type": "array",
          "items": {
            "$ref": "#/types/aws:acm/CertificateValidationOption:CertificateValidationOption"
          },
          "willReplaceOnChanges": true,
          "description": "Configuration block used to specify information about the initial validation of each domain name. Detailed below.\n* Importing an existing certificate\n"
        }
      },
      "stateInputs": {
        "description": "Input properties used for looking up and filtering Certificate resources.\n",
        "properties": {
          "arn": {
            "type": "string",
            "description": "The ARN of the certificate\n"
          },
          "certificateAuthorityArn": {
            "type": "string",
            "description": "ARN of an ACM PCA\n",
            "willReplaceOnChanges": true
          },
          "certificateBody": {
            "type": "string",
            "description": "The certificate's PEM-formatted public key\n"
          },
          "certificateChain": {
            "type": "string",
            "description": "The certificate's PEM-formatted chain\n* Creating a private CA issued certificate\n"
          },
          "domainName": {
            "type": "string",
            "description": "A fully qualified domain name (FQDN) in the certificate.\n",
            "willReplaceOnChanges": true
          },
          "domainValidationOptions": {
            "type": "array",
            "items": {
              "$ref": "#/types/aws:acm/CertificateDomainValidationOption:CertificateDomainValidationOption"
            },
            "description": "Set of domain validation objects which can be used to complete certificate validation. Can have more than one element, e.g., if SANs are defined. Only set if `DNS`-validation was used.\n"
          },
          "options": {
            "$ref": "#/types/aws:acm/CertificateOptions:CertificateOptions",
            "description": "Configuration block used to set certificate options. Detailed below.\n"
          },
          "privateKey": {
            "type": "string",
            "description": "The certificate's PEM-formatted private key\n"
          },
          "status": {
            "type": "string",
            "description": "Status of the certificate.\n"
          },
          "subjectAlternativeNames": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Set of domains that should be SANs in the issued certificate. To remove all elements of a previously configured list, set this value equal to an empty list (`[]`).\n",
            "willReplaceOnChanges": true
          },
          "tags": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "A map of tags to assign to the resource..\n"
          },
          "tagsAll": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "A map of tags assigned to the resource, including those inherited from the provider .\n"
          },
          "validationEmails": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "A list of addresses that received a validation E-Mail. Only set if `EMAIL`-validation was used.\n"
          },
          "validationMethod": {
            "type": "string",
            "description": "Which method to use for validation. `DNS` or `EMAIL` are valid, `NONE` can be used for certificates that were imported into ACM and then into the provider.\n",
            "willReplaceOnChanges": true
          },
          "validationOptions": {
            "type": "array",
            "items": {
              "$ref": "#/types/aws:acm/CertificateValidationOption:CertificateValidationOption"
            },
            "description": "Configuration block used to specify information about the initial validation of each domain name. Detailed below.\n* Importing an existing certificate\n",
            "willReplaceOnChanges": true
          }
        },
        "type": "object"
      }
    },
    "aws:acmpca/certificateAuthority:CertificateAuthority": {
      "description": "Provides a resource to manage AWS Certificate Manager Private Certificate Authorities (ACM PCA Certificate Authorities).\n\n> **NOTE:** Creating this resource will leave the certificate authority in a `PENDING_CERTIFICATE` status, which means it cannot yet issue certificates. To complete this setup, you must fully sign the certificate authority CSR available in the `certificate_signing_request` attribute and import the signed certificate using the AWS SDK, CLI or Console. This provider can support another resource to manage that workflow automatically in the future.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n### Basic\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as aws from \"@pulumi/aws\";\n\nconst example = new aws.acmpca.CertificateAuthority(\"example\", {\n    certificateAuthorityConfiguration: {\n        keyAlgorithm: \"RSA_4096\",\n        signingAlgorithm: \"SHA512WITHRSA\",\n        subject: {\n            commonName: \"example.com\",\n        },\n    },\n    permanentDeletionTimeInDays: 7,\n});\n```\n```python\nimport pulumi\nimport pulumi_aws as aws\n\nexample = aws.acmpca.CertificateAuthority(\"example\",\n    certificate_authority_configuration=aws.acmpca.CertificateAuthorityCertificateAuthorityConfigurationArgs(\n        key_algorithm=\"RSA_4096\",\n        signing_algorithm=\"SHA512WITHRSA\",\n        subject=aws.acmpca.CertificateAuthorityCertificateAuthorityConfigurationSubjectArgs(\n            common_name=\"example.com\",\n        ),\n    ),\n    permanent_deletion_time_in_days=7)\n```\n```csharp\nusing Pulumi;\nusing Aws = Pulumi.Aws;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var example = new Aws.Acmpca.CertificateAuthority(\"example\", new Aws.Acmpca.CertificateAuthorityArgs\n        {\n            CertificateAuthorityConfiguration = new Aws.Acmpca.Inputs.CertificateAuthorityCertificateAuthorityConfigurationArgs\n            {\n                KeyAlgorithm = \"RSA_4096\",\n                SigningAlgorithm = \"SHA512WITHRSA\",\n                Subject = new Aws.Acmpca.Inputs.CertificateAuthorityCertificateAuthorityConfigurationSubjectArgs\n                {\n                    CommonName = \"example.com\",\n                },\n            },\n            PermanentDeletionTimeInDays = 7,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/acmpca\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := acmpca.NewCertificateAuthority(ctx, \"example\", &acmpca.CertificateAuthorityArgs{\n\t\t\tCertificateAuthorityConfiguration: &acmpca.CertificateAuthorityCertificateAuthorityConfigurationArgs{\n\t\t\t\tKeyAlgorithm:     pulumi.String(\"RSA_4096\"),\n\t\t\t\tSigningAlgorithm: pulumi.String(\"SHA512WITHRSA\"),\n\t\t\t\tSubject: &acmpca.CertificateAuthorityCertificateAuthorityConfigurationSubjectArgs{\n\t\t\t\t\tCommonName: pulumi.String(\"example.com\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tPermanentDeletionTimeInDays: pulumi.Int(7),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.aws.acmpca.CertificateAuthority;\nimport com.pulumi.aws.acmpca.CertificateAuthorityArgs;\nimport com.pulumi.aws.acmpca.inputs.CertificateAuthorityCertificateAuthorityConfigurationArgs;\nimport com.pulumi.aws.acmpca.inputs.CertificateAuthorityCertificateAuthorityConfigurationSubjectArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new CertificateAuthority(\"example\", CertificateAuthorityArgs.builder()        \n            .certificateAuthorityConfiguration(CertificateAuthorityCertificateAuthorityConfigurationArgs.builder()\n                .keyAlgorithm(\"RSA_4096\")\n                .signingAlgorithm(\"SHA512WITHRSA\")\n                .subject(CertificateAuthorityCertificateAuthorityConfigurationSubjectArgs.builder()\n                    .commonName(\"example.com\")\n                    .build())\n                .build())\n            .permanentDeletionTimeInDays(7)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: aws:acmpca:CertificateAuthority\n    properties:\n      certificateAuthorityConfiguration:\n        keyAlgorithm: RSA_4096\n        signingAlgorithm: SHA512WITHRSA\n        subject:\n          commonName: example.com\n      permanentDeletionTimeInDays: 7\n```\n{{% /example %}}\n{{% example %}}\n### Enable Certificate Revocation List\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as aws from \"@pulumi/aws\";\n\nconst exampleBucketV2 = new aws.s3.BucketV2(\"exampleBucketV2\", {});\nconst acmpcaBucketAccess = aws.iam.getPolicyDocumentOutput({\n    statements: [{\n        actions: [\n            \"s3:GetBucketAcl\",\n            \"s3:GetBucketLocation\",\n            \"s3:PutObject\",\n            \"s3:PutObjectAcl\",\n        ],\n        resources: [\n            exampleBucketV2.arn,\n            pulumi.interpolate`${exampleBucketV2.arn}/*`,\n        ],\n        principals: [{\n            identifiers: [\"acm-pca.amazonaws.com\"],\n            type: \"Service\",\n        }],\n    }],\n});\nconst exampleBucketPolicy = new aws.s3.BucketPolicy(\"exampleBucketPolicy\", {\n    bucket: exampleBucketV2.id,\n    policy: acmpcaBucketAccess.apply(acmpcaBucketAccess => acmpcaBucketAccess.json),\n});\nconst exampleCertificateAuthority = new aws.acmpca.CertificateAuthority(\"exampleCertificateAuthority\", {\n    certificateAuthorityConfiguration: {\n        keyAlgorithm: \"RSA_4096\",\n        signingAlgorithm: \"SHA512WITHRSA\",\n        subject: {\n            commonName: \"example.com\",\n        },\n    },\n    revocationConfiguration: {\n        crlConfiguration: {\n            customCname: \"crl.example.com\",\n            enabled: true,\n            expirationInDays: 7,\n            s3BucketName: exampleBucketV2.id,\n        },\n    },\n}, {\n    dependsOn: [exampleBucketPolicy],\n});\n```\n```python\nimport pulumi\nimport pulumi_aws as aws\n\nexample_bucket_v2 = aws.s3.BucketV2(\"exampleBucketV2\")\nacmpca_bucket_access = aws.iam.get_policy_document_output(statements=[aws.iam.GetPolicyDocumentStatementArgs(\n    actions=[\n        \"s3:GetBucketAcl\",\n        \"s3:GetBucketLocation\",\n        \"s3:PutObject\",\n        \"s3:PutObjectAcl\",\n    ],\n    resources=[\n        example_bucket_v2.arn,\n        example_bucket_v2.arn.apply(lambda arn: f\"{arn}/*\"),\n    ],\n    principals=[aws.iam.GetPolicyDocumentStatementPrincipalArgs(\n        identifiers=[\"acm-pca.amazonaws.com\"],\n        type=\"Service\",\n    )],\n)])\nexample_bucket_policy = aws.s3.BucketPolicy(\"exampleBucketPolicy\",\n    bucket=example_bucket_v2.id,\n    policy=acmpca_bucket_access.json)\nexample_certificate_authority = aws.acmpca.CertificateAuthority(\"exampleCertificateAuthority\",\n    certificate_authority_configuration=aws.acmpca.CertificateAuthorityCertificateAuthorityConfigurationArgs(\n        key_algorithm=\"RSA_4096\",\n        signing_algorithm=\"SHA512WITHRSA\",\n        subject=aws.acmpca.CertificateAuthorityCertificateAuthorityConfigurationSubjectArgs(\n            common_name=\"example.com\",\n        ),\n    ),\n    revocation_configuration=aws.acmpca.CertificateAuthorityRevocationConfigurationArgs(\n        crl_configuration=aws.acmpca.CertificateAuthorityRevocationConfigurationCrlConfigurationArgs(\n            custom_cname=\"crl.example.com\",\n            enabled=True,\n            expiration_in_days=7,\n            s3_bucket_name=example_bucket_v2.id,\n        ),\n    ),\n    opts=pulumi.ResourceOptions(depends_on=[example_bucket_policy]))\n```\n```csharp\nusing Pulumi;\nusing Aws = Pulumi.Aws;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var exampleBucketV2 = new Aws.S3.BucketV2(\"exampleBucketV2\", new Aws.S3.BucketV2Args\n        {\n        });\n        var acmpcaBucketAccess = Aws.Iam.GetPolicyDocument.Invoke(new Aws.Iam.GetPolicyDocumentInvokeArgs\n        {\n            Statements = \n            {\n                new Aws.Iam.Inputs.GetPolicyDocumentStatementInputArgs\n                {\n                    Actions = \n                    {\n                        \"s3:GetBucketAcl\",\n                        \"s3:GetBucketLocation\",\n                        \"s3:PutObject\",\n                        \"s3:PutObjectAcl\",\n                    },\n                    Resources = \n                    {\n                        exampleBucketV2.Arn,\n                        exampleBucketV2.Arn.Apply(arn => $\"{arn}/*\"),\n                    },\n                    Principals = \n                    {\n                        new Aws.Iam.Inputs.GetPolicyDocumentStatementPrincipalInputArgs\n                        {\n                            Identifiers = \n                            {\n                                \"acm-pca.amazonaws.com\",\n                            },\n                            Type = \"Service\",\n                        },\n                    },\n                },\n            },\n        });\n        var exampleBucketPolicy = new Aws.S3.BucketPolicy(\"exampleBucketPolicy\", new Aws.S3.BucketPolicyArgs\n        {\n            Bucket = exampleBucketV2.Id,\n            Policy = acmpcaBucketAccess.Apply(acmpcaBucketAccess => acmpcaBucketAccess.Json),\n        });\n        var exampleCertificateAuthority = new Aws.Acmpca.CertificateAuthority(\"exampleCertificateAuthority\", new Aws.Acmpca.CertificateAuthorityArgs\n        {\n            CertificateAuthorityConfiguration = new Aws.Acmpca.Inputs.CertificateAuthorityCertificateAuthorityConfigurationArgs\n            {\n                KeyAlgorithm = \"RSA_4096\",\n                SigningAlgorithm = \"SHA512WITHRSA\",\n                Subject = new Aws.Acmpca.Inputs.CertificateAuthorityCertificateAuthorityConfigurationSubjectArgs\n                {\n                    CommonName = \"example.com\",\n                },\n            },\n            RevocationConfiguration = new Aws.Acmpca.Inputs.CertificateAuthorityRevocationConfigurationArgs\n            {\n                CrlConfiguration = new Aws.Acmpca.Inputs.CertificateAuthorityRevocationConfigurationCrlConfigurationArgs\n                {\n                    CustomCname = \"crl.example.com\",\n                    Enabled = true,\n                    ExpirationInDays = 7,\n                    S3BucketName = exampleBucketV2.Id,\n                },\n            },\n        }, new CustomResourceOptions\n        {\n            DependsOn = \n            {\n                exampleBucketPolicy,\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/acmpca\"\n\t\"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/iam\"\n\t\"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/s3\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleBucketV2, err := s3.NewBucketV2(ctx, \"exampleBucketV2\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tacmpcaBucketAccess := iam.GetPolicyDocumentOutput(ctx, iam.GetPolicyDocumentOutputArgs{\n\t\t\tStatements: iam.GetPolicyDocumentStatementArray{\n\t\t\t\t&iam.GetPolicyDocumentStatementArgs{\n\t\t\t\t\tActions: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"s3:GetBucketAcl\"),\n\t\t\t\t\t\tpulumi.String(\"s3:GetBucketLocation\"),\n\t\t\t\t\t\tpulumi.String(\"s3:PutObject\"),\n\t\t\t\t\t\tpulumi.String(\"s3:PutObjectAcl\"),\n\t\t\t\t\t},\n\t\t\t\t\tResources: pulumi.StringArray{\n\t\t\t\t\t\texampleBucketV2.Arn,\n\t\t\t\t\t\texampleBucketV2.Arn.ApplyT(func(arn string) (string, error) {\n\t\t\t\t\t\t\treturn fmt.Sprintf(\"%v/*\", arn), nil\n\t\t\t\t\t\t}).(pulumi.StringOutput),\n\t\t\t\t\t},\n\t\t\t\t\tPrincipals: iam.GetPolicyDocumentStatementPrincipalArray{\n\t\t\t\t\t\t&iam.GetPolicyDocumentStatementPrincipalArgs{\n\t\t\t\t\t\t\tIdentifiers: pulumi.StringArray{\n\t\t\t\t\t\t\t\tpulumi.String(\"acm-pca.amazonaws.com\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tType: pulumi.String(\"Service\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t}, nil)\n\t\texampleBucketPolicy, err := s3.NewBucketPolicy(ctx, \"exampleBucketPolicy\", &s3.BucketPolicyArgs{\n\t\t\tBucket: exampleBucketV2.ID(),\n\t\t\tPolicy: acmpcaBucketAccess.ApplyT(func(acmpcaBucketAccess iam.GetPolicyDocumentResult) (string, error) {\n\t\t\t\treturn acmpcaBucketAccess.Json, nil\n\t\t\t}).(pulumi.StringOutput),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = acmpca.NewCertificateAuthority(ctx, \"exampleCertificateAuthority\", &acmpca.CertificateAuthorityArgs{\n\t\t\tCertificateAuthorityConfiguration: &acmpca.CertificateAuthorityCertificateAuthorityConfigurationArgs{\n\t\t\t\tKeyAlgorithm:     pulumi.String(\"RSA_4096\"),\n\t\t\t\tSigningAlgorithm: pulumi.String(\"SHA512WITHRSA\"),\n\t\t\t\tSubject: &acmpca.CertificateAuthorityCertificateAuthorityConfigurationSubjectArgs{\n\t\t\t\t\tCommonName: pulumi.String(\"example.com\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tRevocationConfiguration: &acmpca.CertificateAuthorityRevocationConfigurationArgs{\n\t\t\t\tCrlConfiguration: &acmpca.CertificateAuthorityRevocationConfigurationCrlConfigurationArgs{\n\t\t\t\t\tCustomCname:      pulumi.String(\"crl.example.com\"),\n\t\t\t\t\tEnabled:          pulumi.Bool(true),\n\t\t\t\t\tExpirationInDays: pulumi.Int(7),\n\t\t\t\t\tS3BucketName:     exampleBucketV2.ID(),\n\t\t\t\t},\n\t\t\t},\n\t\t}, pulumi.DependsOn([]pulumi.Resource{\n\t\t\texampleBucketPolicy,\n\t\t}))\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.aws.s3.BucketV2;\nimport com.pulumi.aws.iam.IamFunctions;\nimport com.pulumi.aws.iam.inputs.GetPolicyDocumentArgs;\nimport com.pulumi.aws.s3.BucketPolicy;\nimport com.pulumi.aws.s3.BucketPolicyArgs;\nimport com.pulumi.aws.acmpca.CertificateAuthority;\nimport com.pulumi.aws.acmpca.CertificateAuthorityArgs;\nimport com.pulumi.aws.acmpca.inputs.CertificateAuthorityCertificateAuthorityConfigurationArgs;\nimport com.pulumi.aws.acmpca.inputs.CertificateAuthorityCertificateAuthorityConfigurationSubjectArgs;\nimport com.pulumi.aws.acmpca.inputs.CertificateAuthorityRevocationConfigurationArgs;\nimport com.pulumi.aws.acmpca.inputs.CertificateAuthorityRevocationConfigurationCrlConfigurationArgs;\nimport com.pulumi.resources.CustomResourceOptions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleBucketV2 = new BucketV2(\"exampleBucketV2\");\n\n        final var acmpcaBucketAccess = IamFunctions.getPolicyDocument(GetPolicyDocumentArgs.builder()\n            .statements(GetPolicyDocumentStatementArgs.builder()\n                .actions(                \n                    \"s3:GetBucketAcl\",\n                    \"s3:GetBucketLocation\",\n                    \"s3:PutObject\",\n                    \"s3:PutObjectAcl\")\n                .resources(                \n                    exampleBucketV2.arn(),\n                    exampleBucketV2.arn().applyValue(arn -> String.format(\"%s/*\", arn)))\n                .principals(GetPolicyDocumentStatementPrincipalArgs.builder()\n                    .identifiers(\"acm-pca.amazonaws.com\")\n                    .type(\"Service\")\n                    .build())\n                .build())\n            .build());\n\n        var exampleBucketPolicy = new BucketPolicy(\"exampleBucketPolicy\", BucketPolicyArgs.builder()        \n            .bucket(exampleBucketV2.id())\n            .policy(acmpcaBucketAccess.applyValue(getPolicyDocumentResult -> getPolicyDocumentResult).applyValue(acmpcaBucketAccess -> acmpcaBucketAccess.applyValue(getPolicyDocumentResult -> getPolicyDocumentResult.json())))\n            .build());\n\n        var exampleCertificateAuthority = new CertificateAuthority(\"exampleCertificateAuthority\", CertificateAuthorityArgs.builder()        \n            .certificateAuthorityConfiguration(CertificateAuthorityCertificateAuthorityConfigurationArgs.builder()\n                .keyAlgorithm(\"RSA_4096\")\n                .signingAlgorithm(\"SHA512WITHRSA\")\n                .subject(CertificateAuthorityCertificateAuthorityConfigurationSubjectArgs.builder()\n                    .commonName(\"example.com\")\n                    .build())\n                .build())\n            .revocationConfiguration(CertificateAuthorityRevocationConfigurationArgs.builder()\n                .crlConfiguration(CertificateAuthorityRevocationConfigurationCrlConfigurationArgs.builder()\n                    .customCname(\"crl.example.com\")\n                    .enabled(true)\n                    .expirationInDays(7)\n                    .s3BucketName(exampleBucketV2.id())\n                    .build())\n                .build())\n            .build(), CustomResourceOptions.builder()\n                .dependsOn(exampleBucketPolicy)\n                .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleBucketV2:\n    type: aws:s3:BucketV2\n  exampleBucketPolicy:\n    type: aws:s3:BucketPolicy\n    properties:\n      bucket: ${exampleBucketV2.id}\n      policy: ${acmpcaBucketAccess.json}\n  exampleCertificateAuthority:\n    type: aws:acmpca:CertificateAuthority\n    properties:\n      certificateAuthorityConfiguration:\n        keyAlgorithm: RSA_4096\n        signingAlgorithm: SHA512WITHRSA\n        subject:\n          commonName: example.com\n      revocationConfiguration:\n        crlConfiguration:\n          customCname: crl.example.com\n          enabled: true\n          expirationInDays: 7\n          s3BucketName: ${exampleBucketV2.id}\n    options:\n      dependson:\n        - ${exampleBucketPolicy}\nvariables:\n  acmpcaBucketAccess:\n    Fn::Invoke:\n      Function: aws:iam:getPolicyDocument\n      Arguments:\n        statements:\n          - actions:\n              - s3:GetBucketAcl\n              - s3:GetBucketLocation\n              - s3:PutObject\n              - s3:PutObjectAcl\n            resources:\n              - ${exampleBucketV2.arn}\n              - ${exampleBucketV2.arn}/*\n            principals:\n              - identifiers:\n                  - acm-pca.amazonaws.com\n                type: Service\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n`aws_acmpca_certificate_authority` can be imported by using the certificate authority Amazon Resource Name (ARN), e.g.,\n\n```sh\n $ pulumi import aws:acmpca/certificateAuthority:CertificateAuthority example arn:aws:acm-pca:us-east-1:123456789012:certificate-authority/12345678-1234-1234-1234-123456789012\n```\n\n ",
      "properties": {
        "arn": {
          "type": "string",
          "description": "Amazon Resource Name (ARN) of the certificate authority.\n"
        },
        "certificate": {
          "type": "string",
          "description": "Base64-encoded certificate authority (CA) certificate. Only available after the certificate authority certificate has been imported.\n"
        },
        "certificateAuthorityConfiguration": {
          "$ref": "#/types/aws:acmpca/CertificateAuthorityCertificateAuthorityConfiguration:CertificateAuthorityCertificateAuthorityConfiguration",
          "description": "Nested argument containing algorithms and certificate subject information. Defined below.\n"
        },
        "certificateChain": {
          "type": "string",
          "description": "Base64-encoded certificate chain that includes any intermediate certificates and chains up to root on-premises certificate that you used to sign your private CA certificate. The chain does not include your private CA certificate. Only available after the certificate authority certificate has been imported.\n"
        },
        "certificateSigningRequest": {
          "type": "string",
          "description": "The base64 PEM-encoded certificate signing request (CSR) for your private CA certificate.\n"
        },
        "enabled": {
          "type": "boolean",
          "description": "Boolean value that specifies whether a custom OCSP responder is enabled.\n"
        },
        "notAfter": {
          "type": "string",
          "description": "Date and time after which the certificate authority is not valid. Only available after the certificate authority certificate has been imported.\n"
        },
        "notBefore": {
          "type": "string",
          "description": "Date and time before which the certificate authority is not valid. Only available after the certificate authority certificate has been imported.\n"
        },
        "permanentDeletionTimeInDays": {
          "type": "integer",
          "description": "The number of days to make a CA restorable after it has been deleted, must be between 7 to 30 days, with default to 30 days.\n"
        },
        "revocationConfiguration": {
          "$ref": "#/types/aws:acmpca/CertificateAuthorityRevocationConfiguration:CertificateAuthorityRevocationConfiguration",
          "description": "Nested argument containing revocation configuration. Defined below.\n"
        },
        "serial": {
          "type": "string",
          "description": "Serial number of the certificate authority. Only available after the certificate authority certificate has been imported.\n"
        },
        "status": {
          "type": "string",
          "description": "(**Deprecated** use the `enabled` attribute instead) Status of the certificate authority.\n",
          "deprecationMessage": "The reported value of the \"status\" attribute is often inaccurate. Use the resource's \"enabled\" attribute to explicitly set status."
        },
        "tags": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Specifies a key-value map of user-defined tags that are attached to the certificate authority. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.\n"
        },
        "tagsAll": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.\n"
        },
        "type": {
          "type": "string",
          "description": "The type of the certificate authority. Defaults to `SUBORDINATE`. Valid values: `ROOT` and `SUBORDINATE`.\n"
        }
      },
      "required": [
        "arn",
        "certificate",
        "certificateAuthorityConfiguration",
        "certificateChain",
        "certificateSigningRequest",
        "notAfter",
        "notBefore",
        "serial",
        "status",
        "tagsAll"
      ],
      "inputProperties": {
        "certificateAuthorityConfiguration": {
          "$ref": "#/types/aws:acmpca/CertificateAuthorityCertificateAuthorityConfiguration:CertificateAuthorityCertificateAuthorityConfiguration",
          "description": "Nested argument containing algorithms and certificate subject information. Defined below.\n"
        },
        "enabled": {
          "type": "boolean",
          "description": "Boolean value that specifies whether a custom OCSP responder is enabled.\n"
        },
        "permanentDeletionTimeInDays": {
          "type": "integer",
          "description": "The number of days to make a CA restorable after it has been deleted, must be between 7 to 30 days, with default to 30 days.\n"
        },
        "revocationConfiguration": {
          "$ref": "#/types/aws:acmpca/CertificateAuthorityRevocationConfiguration:CertificateAuthorityRevocationConfiguration",
          "description": "Nested argument containing revocation configuration. Defined below.\n"
        },
        "tags": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Specifies a key-value map of user-defined tags that are attached to the certificate authority. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.\n"
        },
        "type": {
          "type": "string",
          "description": "The type of the certificate authority. Defaults to `SUBORDINATE`. Valid values: `ROOT` and `SUBORDINATE`.\n",
          "willReplaceOnChanges": true
        }
      },
      "requiredInputs": [
        "certificateAuthorityConfiguration"
      ],
      "stateInputs": {
        "description": "Input properties used for looking up and filtering CertificateAuthority resources.\n",
        "properties": {
          "arn": {
            "type": "string",
            "description": "Amazon Resource Name (ARN) of the certificate authority.\n"
          },
          "certificate": {
            "type": "string",
            "description": "Base64-encoded certificate authority (CA) certificate. Only available after the certificate authority certificate has been imported.\n"
          },
          "certificateAuthorityConfiguration": {
            "$ref": "#/types/aws:acmpca/CertificateAuthorityCertificateAuthorityConfiguration:CertificateAuthorityCertificateAuthorityConfiguration",
            "description": "Nested argument containing algorithms and certificate subject information. Defined below.\n"
          },
          "certificateChain": {
            "type": "string",
            "description": "Base64-encoded certificate chain that includes any intermediate certificates and chains up to root on-premises certificate that you used to sign your private CA certificate. The chain does not include your private CA certificate. Only available after the certificate authority certificate has been imported.\n"
          },
          "certificateSigningRequest": {
            "type": "string",
            "description": "The base64 PEM-encoded certificate signing request (CSR) for your private CA certificate.\n"
          },
          "enabled": {
            "type": "boolean",
            "description": "Boolean value that specifies whether a custom OCSP responder is enabled.\n"
          },
          "notAfter": {
            "type": "string",
            "description": "Date and time after which the certificate authority is not valid. Only available after the certificate authority certificate has been imported.\n"
          },
          "notBefore": {
            "type": "string",
            "description": "Date and time before which the certificate authority is not valid. Only available after the certificate authority certificate has been imported.\n"
          },
          "permanentDeletionTimeInDays": {
            "type": "integer",
            "description": "The number of days to make a CA restorable after it has been deleted, must be between 7 to 30 days, with default to 30 days.\n"
          },
          "revocationConfiguration": {
            "$ref": "#/types/aws:acmpca/CertificateAuthorityRevocationConfiguration:CertificateAuthorityRevocationConfiguration",
            "description": "Nested argument containing revocation configuration. Defined below.\n"
          },
          "serial": {
            "type": "string",
            "description": "Serial number of the certificate authority. Only available after the certificate authority certificate has been imported.\n"
          },
          "status": {
            "type": "string",
            "description": "(**Deprecated** use the `enabled` attribute instead) Status of the certificate authority.\n",
            "deprecationMessage": "The reported value of the \"status\" attribute is often inaccurate. Use the resource's \"enabled\" attribute to explicitly set status."
          },
          "tags": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Specifies a key-value map of user-defined tags that are attached to the certificate authority. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.\n"
          },
          "tagsAll": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.\n"
          },
          "type": {
            "type": "string",
            "description": "The type of the certificate authority. Defaults to `SUBORDINATE`. Valid values: `ROOT` and `SUBORDINATE`.\n",
            "willReplaceOnChanges": true
          }
        },
        "type": "object"
      }
    },
    "aws:amplify/app:App": {
      "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as aws from \"@pulumi/aws\";\n\nconst example = new aws.amplify.App(\"example\", {\n    // The default build_spec added by the Amplify Console for React.\n    buildSpec: `  version: 0.1\n  frontend:\n    phases:\n      preBuild:\n        commands:\n          - yarn install\n      build:\n        commands:\n          - yarn run build\n    artifacts:\n      baseDirectory: build\n      files:\n        - '**/*'\n    cache:\n      paths:\n        - node_modules/**/*\n`,\n    // The default rewrites and redirects added by the Amplify Console.\n    customRules: [{\n        source: \"/<*>\",\n        status: \"404\",\n        target: \"/index.html\",\n    }],\n    environmentVariables: {\n        ENV: \"test\",\n    },\n    repository: \"https://github.com/example/app\",\n});\n```\n```python\nimport pulumi\nimport pulumi_aws as aws\n\nexample = aws.amplify.App(\"example\",\n    build_spec=\"\"\"  version: 0.1\n  frontend:\n    phases:\n      preBuild:\n        commands:\n          - yarn install\n      build:\n        commands:\n          - yarn run build\n    artifacts:\n      baseDirectory: build\n      files:\n        - '**/*'\n    cache:\n      paths:\n        - node_modules/**/*\n\n\"\"\",\n    custom_rules=[aws.amplify.AppCustomRuleArgs(\n        source=\"/<*>\",\n        status=\"404\",\n        target=\"/index.html\",\n    )],\n    environment_variables={\n        \"ENV\": \"test\",\n    },\n    repository=\"https://github.com/example/app\")\n```\n```csharp\nusing Pulumi;\nusing Aws = Pulumi.Aws;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var example = new Aws.Amplify.App(\"example\", new Aws.Amplify.AppArgs\n        {\n            BuildSpec = @\"  version: 0.1\n  frontend:\n    phases:\n      preBuild:\n        commands:\n          - yarn install\n      build:\n        commands:\n          - yarn run build\n    artifacts:\n      baseDirectory: build\n      files:\n        - '**/*'\n    cache:\n      paths:\n        - node_modules/**/*\n\n\",\n            CustomRules = \n            {\n                new Aws.Amplify.Inputs.AppCustomRuleArgs\n                {\n                    Source = \"/<*>\",\n                    Status = \"404\",\n                    Target = \"/index.html\",\n                },\n            },\n            EnvironmentVariables = \n            {\n                { \"ENV\", \"test\" },\n            },\n            Repository = \"https://github.com/example/app\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/amplify\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := amplify.NewApp(ctx, \"example\", &amplify.AppArgs{\n\t\t\tBuildSpec: pulumi.String(fmt.Sprintf(`  version: 0.1\n  frontend:\n    phases:\n      preBuild:\n        commands:\n          - yarn install\n      build:\n        commands:\n          - yarn run build\n    artifacts:\n      baseDirectory: build\n      files:\n        - '**/*'\n    cache:\n      paths:\n        - node_modules/**/*\n\n`)),\n\t\t\tCustomRules: amplify.AppCustomRuleArray{\n\t\t\t\t&amplify.AppCustomRuleArgs{\n\t\t\t\t\tSource: pulumi.String(\"/<*>\"),\n\t\t\t\t\tStatus: pulumi.String(\"404\"),\n\t\t\t\t\tTarget: pulumi.String(\"/index.html\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tEnvironmentVariables: pulumi.StringMap{\n\t\t\t\t\"ENV\": pulumi.String(\"test\"),\n\t\t\t},\n\t\t\tRepository: pulumi.String(\"https://github.com/example/app\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.aws.amplify.App;\nimport com.pulumi.aws.amplify.AppArgs;\nimport com.pulumi.aws.amplify.inputs.AppCustomRuleArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new App(\"example\", AppArgs.builder()        \n            .buildSpec(\"\"\"\n  version: 0.1\n  frontend:\n    phases:\n      preBuild:\n        commands:\n          - yarn install\n      build:\n        commands:\n          - yarn run build\n    artifacts:\n      baseDirectory: build\n      files:\n        - '**/*'\n    cache:\n      paths:\n        - node_modules/**/*\n\n            \"\"\")\n            .customRules(AppCustomRuleArgs.builder()\n                .source(\"/<*>\")\n                .status(\"404\")\n                .target(\"/index.html\")\n                .build())\n            .environmentVariables(Map.of(\"ENV\", \"test\"))\n            .repository(\"https://github.com/example/app\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: aws:amplify:App\n    properties:\n      # The default build_spec added by the Amplify Console for React.\n      buildSpec: |2+\n          version: 0.1\n          frontend:\n            phases:\n              preBuild:\n                commands:\n                  - yarn install\n              build:\n                commands:\n                  - yarn run build\n            artifacts:\n              baseDirectory: build\n              files:\n                - '**/*'\n            cache:\n              paths:\n                - node_modules/**/*\n\n      # The default rewrites and redirects added by the Amplify Console.\n      customRules:\n        - source: /<*>\n          status: 404\n          target: /index.html\n      environmentVariables:\n        ENV: test\n      repository: https://github.com/example/app\n```\n{{% /example %}}\n{{% example %}}\n### Repository with Tokens\n\nIf you create a new Amplify App with the `repository` argument, you also need to set `oauth_token` or `access_token` for authentication. For GitHub, get a [personal access token](https://help.github.com/en/github/authenticating-to-github/creating-a-personal-access-token-for-the-command-line) and set `access_token` as follows:\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as aws from \"@pulumi/aws\";\n\nconst example = new aws.amplify.App(\"example\", {\n    // GitHub personal access token\n    accessToken: \"...\",\n    repository: \"https://github.com/example/app\",\n});\n```\n```python\nimport pulumi\nimport pulumi_aws as aws\n\nexample = aws.amplify.App(\"example\",\n    access_token=\"...\",\n    repository=\"https://github.com/example/app\")\n```\n```csharp\nusing Pulumi;\nusing Aws = Pulumi.Aws;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var example = new Aws.Amplify.App(\"example\", new Aws.Amplify.AppArgs\n        {\n            AccessToken = \"...\",\n            Repository = \"https://github.com/example/app\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/amplify\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := amplify.NewApp(ctx, \"example\", &amplify.AppArgs{\n\t\t\tAccessToken: pulumi.String(\"...\"),\n\t\t\tRepository:  pulumi.String(\"https://github.com/example/app\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.aws.amplify.App;\nimport com.pulumi.aws.amplify.AppArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new App(\"example\", AppArgs.builder()        \n            .accessToken(\"...\")\n            .repository(\"https://github.com/example/app\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: aws:amplify:App\n    properties:\n      # GitHub personal access token\n      accessToken: '...'\n      repository: https://github.com/example/app\n```\n\nYou can omit `access_token` if you import an existing Amplify App created by the Amplify Console (using OAuth for authentication).\n{{% /example %}}\n{{% example %}}\n### Auto Branch Creation\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as aws from \"@pulumi/aws\";\n\nconst example = new aws.amplify.App(\"example\", {\n    autoBranchCreationConfig: {\n        // Enable auto build for the created branch.\n        enableAutoBuild: true,\n    },\n    // The default patterns added by the Amplify Console.\n    autoBranchCreationPatterns: [\n        \"*\",\n        \"*/**\",\n    ],\n    enableAutoBranchCreation: true,\n});\n```\n```python\nimport pulumi\nimport pulumi_aws as aws\n\nexample = aws.amplify.App(\"example\",\n    auto_branch_creation_config=aws.amplify.AppAutoBranchCreationConfigArgs(\n        enable_auto_build=True,\n    ),\n    auto_branch_creation_patterns=[\n        \"*\",\n        \"*/**\",\n    ],\n    enable_auto_branch_creation=True)\n```\n```csharp\nusing Pulumi;\nusing Aws = Pulumi.Aws;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var example = new Aws.Amplify.App(\"example\", new Aws.Amplify.AppArgs\n        {\n            AutoBranchCreationConfig = new Aws.Amplify.Inputs.AppAutoBranchCreationConfigArgs\n            {\n                EnableAutoBuild = true,\n            },\n            AutoBranchCreationPatterns = \n            {\n                \"*\",\n                \"*/**\",\n            },\n            EnableAutoBranchCreation = true,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/amplify\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := amplify.NewApp(ctx, \"example\", &amplify.AppArgs{\n\t\t\tAutoBranchCreationConfig: &amplify.AppAutoBranchCreationConfigArgs{\n\t\t\t\tEnableAutoBuild: pulumi.Bool(true),\n\t\t\t},\n\t\t\tAutoBranchCreationPatterns: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"*\"),\n\t\t\t\tpulumi.String(\"*/**\"),\n\t\t\t},\n\t\t\tEnableAutoBranchCreation: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.aws.amplify.App;\nimport com.pulumi.aws.amplify.AppArgs;\nimport com.pulumi.aws.amplify.inputs.AppAutoBranchCreationConfigArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new App(\"example\", AppArgs.builder()        \n            .autoBranchCreationConfig(AppAutoBranchCreationConfigArgs.builder()\n                .enableAutoBuild(true)\n                .build())\n            .autoBranchCreationPatterns(            \n                \"*\",\n                \"*/**\")\n            .enableAutoBranchCreation(true)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: aws:amplify:App\n    properties:\n      autoBranchCreationConfig:\n        enableAutoBuild: true\n      # The default patterns added by the Amplify Console.\n      autoBranchCreationPatterns:\n        - '*'\n        - '*/**'\n      enableAutoBranchCreation: true\n```\n{{% /example %}}\n{{% example %}}\n### Rewrites and Redirects\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as aws from \"@pulumi/aws\";\n\nconst example = new aws.amplify.App(\"example\", {\n    customRules: [\n        // Reverse Proxy Rewrite for API requests\n        // https://docs.aws.amazon.com/amplify/latest/userguide/redirects.html#reverse-proxy-rewrite\n        {\n            source: \"/api/<*>\",\n            status: \"200\",\n            target: \"https://api.example.com/api/<*>\",\n        },\n        // Redirects for Single Page Web Apps (SPA)\n        // https://docs.aws.amazon.com/amplify/latest/userguide/redirects.html#redirects-for-single-page-web-apps-spa\n        {\n            source: \"</^[^.]+$|\\\\.(?!(css|gif|ico|jpg|js|png|txt|svg|woff|ttf|map|json)$)([^.]+$)/>\",\n            status: \"200\",\n            target: \"/index.html\",\n        },\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_aws as aws\n\nexample = aws.amplify.App(\"example\", custom_rules=[\n    aws.amplify.AppCustomRuleArgs(\n        source=\"/api/<*>\",\n        status=\"200\",\n        target=\"https://api.example.com/api/<*>\",\n    ),\n    aws.amplify.AppCustomRuleArgs(\n        source=\"</^[^.]+$|\\\\.(?!(css|gif|ico|jpg|js|png|txt|svg|woff|ttf|map|json)$)([^.]+$)/>\",\n        status=\"200\",\n        target=\"/index.html\",\n    ),\n])\n```\n```csharp\nusing Pulumi;\nusing Aws = Pulumi.Aws;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var example = new Aws.Amplify.App(\"example\", new Aws.Amplify.AppArgs\n        {\n            CustomRules = \n            {\n                new Aws.Amplify.Inputs.AppCustomRuleArgs\n                {\n                    Source = \"/api/<*>\",\n                    Status = \"200\",\n                    Target = \"https://api.example.com/api/<*>\",\n                },\n                new Aws.Amplify.Inputs.AppCustomRuleArgs\n                {\n                    Source = \"</^[^.]+$|\\\\.(?!(css|gif|ico|jpg|js|png|txt|svg|woff|ttf|map|json)$)([^.]+$)/>\",\n                    Status = \"200\",\n                    Target = \"/index.html\",\n                },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/amplify\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := amplify.NewApp(ctx, \"example\", &amplify.AppArgs{\n\t\t\tCustomRules: amplify.AppCustomRuleArray{\n\t\t\t\t&amplify.AppCustomRuleArgs{\n\t\t\t\t\tSource: pulumi.String(\"/api/<*>\"),\n\t\t\t\t\tStatus: pulumi.String(\"200\"),\n\t\t\t\t\tTarget: pulumi.String(\"https://api.example.com/api/<*>\"),\n\t\t\t\t},\n\t\t\t\t&amplify.AppCustomRuleArgs{\n\t\t\t\t\tSource: pulumi.String(fmt.Sprintf(\"</^[^.]+$|\\\\.(?!(css|gif|ico|jpg|js|png|txt|svg|woff|ttf|map|json)$)([^.]+$)/>\")),\n\t\t\t\t\tStatus: pulumi.String(\"200\"),\n\t\t\t\t\tTarget: pulumi.String(\"/index.html\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.aws.amplify.App;\nimport com.pulumi.aws.amplify.AppArgs;\nimport com.pulumi.aws.amplify.inputs.AppCustomRuleArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new App(\"example\", AppArgs.builder()        \n            .customRules(            \n                AppCustomRuleArgs.builder()\n                    .source(\"/api/<*>\")\n                    .status(\"200\")\n                    .target(\"https://api.example.com/api/<*>\")\n                    .build(),\n                AppCustomRuleArgs.builder()\n                    .source(\"</^[^.]+$|\\\\.(?!(css|gif|ico|jpg|js|png|txt|svg|woff|ttf|map|json)$)([^.]+$)/>\")\n                    .status(\"200\")\n                    .target(\"/index.html\")\n                    .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: aws:amplify:App\n    properties:\n      customRules:\n        - source: /api/<*>\n          status: 200\n          target: https://api.example.com/api/<*>\n        - source: </^[^.]+$|\\.(?!(css|gif|ico|jpg|js|png|txt|svg|woff|ttf|map|json)$)([^.]+$)/>\n          status: 200\n          target: /index.html\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nAmplify App can be imported using Amplify App ID (appId), e.g.,\n\n```sh\n $ pulumi import aws:amplify/app:App example d2ypk4k47z8u6\n```\n\n App ID can be obtained from App ARN (e.g., `arn:aws:amplify:us-east-1:12345678:apps/d2ypk4k47z8u6`). ",
      "properties": {
        "accessToken": {
          "type": "string",
          "description": "The personal access token for a third-party source control system for an Amplify app. The personal access token is used to create a webhook and a read-only deploy key. The token is not stored.\n"
        },
        "arn": {
          "type": "string",
          "description": "The Amazon Resource Name (ARN) of the Amplify app.\n"
        },
        "autoBranchCreationConfig": {
          "$ref": "#/types/aws:amplify/AppAutoBranchCreationConfig:AppAutoBranchCreationConfig",
          "description": "The automated branch creation configuration for an Amplify app. An `auto_branch_creation_config` block is documented below.\n"
        },
        "autoBranchCreationPatterns": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The automated branch creation glob patterns for an Amplify app.\n"
        },
        "basicAuthCredentials": {
          "type": "string",
          "description": "The credentials for basic authorization for an Amplify app.\n"
        },
        "buildSpec": {
          "type": "string",
          "description": "The [build specification](https://docs.aws.amazon.com/amplify/latest/userguide/build-settings.html) (build spec) for an Amplify app.\n"
        },
        "customRules": {
          "type": "array",
          "items": {
            "$ref": "#/types/aws:amplify/AppCustomRule:AppCustomRule"
          },
          "description": "The custom rewrite and redirect rules for an Amplify app. A `custom_rule` block is documented below.\n"
        },
        "defaultDomain": {
          "type": "string",
          "description": "The default domain for the Amplify app.\n"
        },
        "description": {
          "type": "string",
          "description": "The description for an Amplify app.\n"
        },
        "enableAutoBranchCreation": {
          "type": "boolean",
          "description": "Enables automated branch creation for an Amplify app.\n"
        },
        "enableBasicAuth": {
          "type": "boolean",
          "description": "Enables basic authorization for an Amplify app. This will apply to all branches that are part of this app.\n"
        },
        "enableBranchAutoBuild": {
          "type": "boolean",
          "description": "Enables auto-building of branches for the Amplify App.\n"
        },
        "enableBranchAutoDeletion": {
          "type": "boolean",
          "description": "Automatically disconnects a branch in the Amplify Console when you delete a branch from your Git repository.\n"
        },
        "environmentVariables": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "The environment variables map for an Amplify app.\n"
        },
        "iamServiceRoleArn": {
          "type": "string",
          "description": "The AWS Identity and Access Management (IAM) service role for an Amplify app.\n"
        },
        "name": {
          "type": "string",
          "description": "The name for an Amplify app.\n"
        },
        "oauthToken": {
          "type": "string",
          "description": "The OAuth token for a third-party source control system for an Amplify app. The OAuth token is used to create a webhook and a read-only deploy key. The OAuth token is not stored.\n"
        },
        "platform": {
          "type": "string",
          "description": "The platform or framework for an Amplify app. Valid values: `WEB`.\n"
        },
        "productionBranches": {
          "type": "array",
          "items": {
            "$ref": "#/types/aws:amplify/AppProductionBranch:AppProductionBranch"
          },
          "description": "Describes the information about a production branch for an Amplify app. A `production_branch` block is documented below.\n"
        },
        "repository": {
          "type": "string",
          "description": "The repository for an Amplify app.\n"
        },
        "tags": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Key-value mapping of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.\n"
        },
        "tagsAll": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.\n"
        }
      },
      "required": [
        "arn",
        "autoBranchCreationConfig",
        "buildSpec",
        "defaultDomain",
        "name",
        "productionBranches",
        "tagsAll"
      ],
      "inputProperties": {
        "accessToken": {
          "type": "string",
          "description": "The personal access token for a third-party source control system for an Amplify app. The personal access token is used to create a webhook and a read-only deploy key. The token is not stored.\n"
        },
        "autoBranchCreationConfig": {
          "$ref": "#/types/aws:amplify/AppAutoBranchCreationConfig:AppAutoBranchCreationConfig",
          "description": "The automated branch creation configuration for an Amplify app. An `auto_branch_creation_config` block is documented below.\n"
        },
        "autoBranchCreationPatterns": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The automated branch creation glob patterns for an Amplify app.\n"
        },
        "basicAuthCredentials": {
          "type": "string",
          "description": "The credentials for basic authorization for an Amplify app.\n"
        },
        "buildSpec": {
          "type": "string",
          "description": "The [build specification](https://docs.aws.amazon.com/amplify/latest/userguide/build-settings.html) (build spec) for an Amplify app.\n"
        },
        "customRules": {
          "type": "array",
          "items": {
            "$ref": "#/types/aws:amplify/AppCustomRule:AppCustomRule"
          },
          "description": "The custom rewrite and redirect rules for an Amplify app. A `custom_rule` block is documented below.\n"
        },
        "description": {
          "type": "string",
          "description": "The description for an Amplify app.\n"
        },
        "enableAutoBranchCreation": {
          "type": "boolean",
          "description": "Enables automated branch creation for an Amplify app.\n"
        },
        "enableBasicAuth": {
          "type": "boolean",
          "description": "Enables basic authorization for an Amplify app. This will apply to all branches that are part of this app.\n"
        },
        "enableBranchAutoBuild": {
          "type": "boolean",
          "description": "Enables auto-building of branches for the Amplify App.\n"
        },
        "enableBranchAutoDeletion": {
          "type": "boolean",
          "description": "Automatically disconnects a branch in the Amplify Console when you delete a branch from your Git repository.\n"
        },
        "environmentVariables": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "The environment variables map for an Amplify app.\n"
        },
        "iamServiceRoleArn": {
          "type": "string",
          "description": "The AWS Identity and Access Management (IAM) service role for an Amplify app.\n"
        },
        "name": {
          "type": "string",
          "description": "The name for an Amplify app.\n"
        },
        "oauthToken": {
          "type": "string",
          "description": "The OAuth token for a third-party source control system for an Amplify app. The OAuth token is used to create a webhook and a read-only deploy key. The OAuth token is not stored.\n"
        },
        "platform": {
          "type": "string",
          "description": "The platform or framework for an Amplify app. Valid values: `WEB`.\n"
        },
        "repository": {
          "type": "string",
          "description": "The repository for an Amplify app.\n"
        },
        "tags": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Key-value mapping of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.\n"
        }
      },
      "stateInputs": {
        "description": "Input properties used for looking up and filtering App resources.\n",
        "properties": {
          "accessToken": {
            "type": "string",
            "description": "The personal access token for a third-party source control system for an Amplify app. The personal access token is used to create a webhook and a read-only deploy key. The token is not stored.\n"
          },
          "arn": {
            "type": "string",
            "description": "The Amazon Resource Name (ARN) of the Amplify app.\n"
          },
          "autoBranchCreationConfig": {
            "$ref": "#/types/aws:amplify/AppAutoBranchCreationConfig:AppAutoBranchCreationConfig",
            "description": "The automated branch creation configuration for an Amplify app. An `auto_branch_creation_config` block is documented below.\n"
          },
          "autoBranchCreationPatterns": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The automated branch creation glob patterns for an Amplify app.\n"
          },
          "basicAuthCredentials": {
            "type": "string",
            "description": "The credentials for basic authorization for an Amplify app.\n"
          },
          "buildSpec": {
            "type": "string",
            "description": "The [build specification](https://docs.aws.amazon.com/amplify/latest/userguide/build-settings.html) (build spec) for an Amplify app.\n"
          },
          "customRules": {
            "type": "array",
            "items": {
              "$ref": "#/types/aws:amplify/AppCustomRule:AppCustomRule"
            },
            "description": "The custom rewrite and redirect rules for an Amplify app. A `custom_rule` block is documented below.\n"
          },
          "defaultDomain": {
            "type": "string",
            "description": "The default domain for the Amplify app.\n"
          },
          "description": {
            "type": "string",
            "description": "The description for an Amplify app.\n"
          },
          "enableAutoBranchCreation": {
            "type": "boolean",
            "description": "Enables automated branch creation for an Amplify app.\n"
          },
          "enableBasicAuth": {
            "type": "boolean",
            "description": "Enables basic authorization for an Amplify app. This will apply to all branches that are part of this app.\n"
          },
          "enableBranchAutoBuild": {
            "type": "boolean",
            "description": "Enables auto-building of branches for the Amplify App.\n"
          },
          "enableBranchAutoDeletion": {
            "type": "boolean",
            "description": "Automatically disconnects a branch in the Amplify Console when you delete a branch from your Git repository.\n"
          },
          "environmentVariables": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "The environment variables map for an Amplify app.\n"
          },
          "iamServiceRoleArn": {
            "type": "string",
            "description": "The AWS Identity and Access Management (IAM) service role for an Amplify app.\n"
          },
          "name": {
            "type": "string",
            "description": "The name for an Amplify app.\n"
          },
          "oauthToken": {
            "type": "string",
            "description": "The OAuth token for a third-party source control system for an Amplify app. The OAuth token is used to create a webhook and a read-only deploy key. The OAuth token is not stored.\n"
          },
          "platform": {
            "type": "string",
            "description": "The platform or framework for an Amplify app. Valid values: `WEB`.\n"
          },
          "productionBranches": {
            "type": "array",
            "items": {
              "$ref": "#/types/aws:amplify/AppProductionBranch:AppProductionBranch"
            },
            "description": "Describes the information about a production branch for an Amplify app. A `production_branch` block is documented below.\n"
          },
          "repository": {
            "type": "string",
            "description": "The repository for an Amplify app.\n"
          },
          "tags": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Key-value mapping of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.\n"
          },
          "tagsAll": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.\n"
          }
        },
        "type": "object"
      }
    },
    "aws:amplify/domainAssociation:DomainAssociation": {
      "description": "Provides an Amplify Domain Association resource.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as aws from \"@pulumi/aws\";\n\nconst exampleApp = new aws.amplify.App(\"exampleApp\", {customRules: [{\n    source: \"https://example.com\",\n    status: \"302\",\n    target: \"https://www.example.com\",\n}]});\nconst master = new aws.amplify.Branch(\"master\", {\n    appId: exampleApp.id,\n    branchName: \"master\",\n});\nconst exampleDomainAssociation = new aws.amplify.DomainAssociation(\"exampleDomainAssociation\", {\n    appId: exampleApp.id,\n    domainName: \"example.com\",\n    subDomains: [\n        {\n            branchName: master.branchName,\n            prefix: \"\",\n        },\n        {\n            branchName: master.branchName,\n            prefix: \"www\",\n        },\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_aws as aws\n\nexample_app = aws.amplify.App(\"exampleApp\", custom_rules=[aws.amplify.AppCustomRuleArgs(\n    source=\"https://example.com\",\n    status=\"302\",\n    target=\"https://www.example.com\",\n)])\nmaster = aws.amplify.Branch(\"master\",\n    app_id=example_app.id,\n    branch_name=\"master\")\nexample_domain_association = aws.amplify.DomainAssociation(\"exampleDomainAssociation\",\n    app_id=example_app.id,\n    domain_name=\"example.com\",\n    sub_domains=[\n        aws.amplify.DomainAssociationSubDomainArgs(\n            branch_name=master.branch_name,\n            prefix=\"\",\n        ),\n        aws.amplify.DomainAssociationSubDomainArgs(\n            branch_name=master.branch_name,\n            prefix=\"www\",\n        ),\n    ])\n```\n```csharp\nusing Pulumi;\nusing Aws = Pulumi.Aws;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var exampleApp = new Aws.Amplify.App(\"exampleApp\", new Aws.Amplify.AppArgs\n        {\n            CustomRules = \n            {\n                new Aws.Amplify.Inputs.AppCustomRuleArgs\n                {\n                    Source = \"https://example.com\",\n                    Status = \"302\",\n                    Target = \"https://www.example.com\",\n                },\n            },\n        });\n        var master = new Aws.Amplify.Branch(\"master\", new Aws.Amplify.BranchArgs\n        {\n            AppId = exampleApp.Id,\n            BranchName = \"master\",\n        });\n        var exampleDomainAssociation = new Aws.Amplify.DomainAssociation(\"exampleDomainAssociation\", new Aws.Amplify.DomainAssociationArgs\n        {\n            AppId = exampleApp.Id,\n            DomainName = \"example.com\",\n            SubDomains = \n            {\n                new Aws.Amplify.Inputs.DomainAssociationSubDomainArgs\n                {\n                    BranchName = master.BranchName,\n                    Prefix = \"\",\n                },\n                new Aws.Amplify.Inputs.DomainAssociationSubDomainArgs\n                {\n                    BranchName = master.BranchName,\n                    Prefix = \"www\",\n                },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/amplify\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleApp, err := amplify.NewApp(ctx, \"exampleApp\", &amplify.AppArgs{\n\t\t\tCustomRules: amplify.AppCustomRuleArray{\n\t\t\t\t&amplify.AppCustomRuleArgs{\n\t\t\t\t\tSource: pulumi.String(\"https://example.com\"),\n\t\t\t\t\tStatus: pulumi.String(\"302\"),\n\t\t\t\t\tTarget: pulumi.String(\"https://www.example.com\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tmaster, err := amplify.NewBranch(ctx, \"master\", &amplify.BranchArgs{\n\t\t\tAppId:      exampleApp.ID(),\n\t\t\tBranchName: pulumi.String(\"master\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = amplify.NewDomainAssociation(ctx, \"exampleDomainAssociation\", &amplify.DomainAssociationArgs{\n\t\t\tAppId:      exampleApp.ID(),\n\t\t\tDomainName: pulumi.String(\"example.com\"),\n\t\t\tSubDomains: amplify.DomainAssociationSubDomainArray{\n\t\t\t\t&amplify.DomainAssociationSubDomainArgs{\n\t\t\t\t\tBranchName: master.BranchName,\n\t\t\t\t\tPrefix:     pulumi.String(\"\"),\n\t\t\t\t},\n\t\t\t\t&amplify.DomainAssociationSubDomainArgs{\n\t\t\t\t\tBranchName: master.BranchName,\n\t\t\t\t\tPrefix:     pulumi.String(\"www\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.aws.amplify.App;\nimport com.pulumi.aws.amplify.AppArgs;\nimport com.pulumi.aws.amplify.inputs.AppCustomRuleArgs;\nimport com.pulumi.aws.amplify.Branch;\nimport com.pulumi.aws.amplify.BranchArgs;\nimport com.pulumi.aws.amplify.DomainAssociation;\nimport com.pulumi.aws.amplify.DomainAssociationArgs;\nimport com.pulumi.aws.amplify.inputs.DomainAssociationSubDomainArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleApp = new App(\"exampleApp\", AppArgs.builder()        \n            .customRules(AppCustomRuleArgs.builder()\n                .source(\"https://example.com\")\n                .status(\"302\")\n                .target(\"https://www.example.com\")\n                .build())\n            .build());\n\n        var master = new Branch(\"master\", BranchArgs.builder()        \n            .appId(exampleApp.id())\n            .branchName(\"master\")\n            .build());\n\n        var exampleDomainAssociation = new DomainAssociation(\"exampleDomainAssociation\", DomainAssociationArgs.builder()        \n            .appId(exampleApp.id())\n            .domainName(\"example.com\")\n            .subDomains(            \n                DomainAssociationSubDomainArgs.builder()\n                    .branchName(master.branchName())\n                    .prefix(\"\")\n                    .build(),\n                DomainAssociationSubDomainArgs.builder()\n                    .branchName(master.branchName())\n                    .prefix(\"www\")\n                    .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleApp:\n    type: aws:amplify:App\n    properties:\n      # Setup redirect from https://example.com to https://www.example.com\n      customRules:\n        - source: https://example.com\n          status: 302\n          target: https://www.example.com\n  master:\n    type: aws:amplify:Branch\n    properties:\n      appId: ${exampleApp.id}\n      branchName: master\n  exampleDomainAssociation:\n    type: aws:amplify:DomainAssociation\n    properties:\n      appId: ${exampleApp.id}\n      domainName: example.com\n      # https://example.com\n      subDomains:\n        - branchName: ${master.branchName}\n          prefix:\n        - branchName: ${master.branchName}\n          prefix: www\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nAmplify domain association can be imported using `app_id` and `domain_name`, e.g.,\n\n```sh\n $ pulumi import aws:amplify/domainAssociation:DomainAssociation app d2ypk4k47z8u6/example.com\n```\n\n ",
      "properties": {
        "appId": {
          "type": "string",
          "description": "The unique ID for an Amplify app.\n"
        },
        "arn": {
          "type": "string",
          "description": "The Amazon Resource Name (ARN) for the domain association.\n"
        },
        "certificateVerificationDnsRecord": {
          "type": "string",
          "description": "The DNS record for certificate verification.\n"
        },
        "domainName": {
          "type": "string",
          "description": "The domain name for the domain association.\n"
        },
        "subDomains": {
          "type": "array",
          "items": {
            "$ref": "#/types/aws:amplify/DomainAssociationSubDomain:DomainAssociationSubDomain"
          },
          "description": "The setting for the subdomain. Documented below.\n"
        },
        "waitForVerification": {
          "type": "boolean",
          "description": "If enabled, the resource will wait for the domain association status to change to `PENDING_DEPLOYMENT` or `AVAILABLE`. Setting this to `false` will skip the process. Default: `true`.\n"
        }
      },
      "required": [
        "appId",
        "arn",
        "certificateVerificationDnsRecord",
        "domainName",
        "subDomains"
      ],
      "inputProperties": {
        "appId": {
          "type": "string",
          "description": "The unique ID for an Amplify app.\n",
          "willReplaceOnChanges": true
        },
        "domainName": {
          "type": "string",
          "description": "The domain name for the domain association.\n",
          "willReplaceOnChanges": true
        },
        "subDomains": {
          "type": "array",
          "items": {
            "$ref": "#/types/aws:amplify/DomainAssociationSubDomain:DomainAssociationSubDomain"
          },
          "description": "The setting for the subdomain. Documented below.\n"
        },
        "waitForVerification": {
          "type": "boolean",
          "description": "If enabled, the resource will wait for the domain association status to change to `PENDING_DEPLOYMENT` or `AVAILABLE`. Setting this to `false` will skip the process. Default: `true`.\n"
        }
      },
      "requiredInputs": [
        "appId",
        "domainName",
        "subDomains"
      ],
      "stateInputs": {
        "description": "Input properties used for looking up and filtering DomainAssociation resources.\n",
        "properties": {
          "appId": {
            "type": "string",
            "description": "The unique ID for an Amplify app.\n",
            "willReplaceOnChanges": true
          },
          "arn": {
            "type": "string",
            "description": "The Amazon Resource Name (ARN) for the domain association.\n"
          },
          "certificateVerificationDnsRecord": {
            "type": "string",
            "description": "The DNS record for certificate verification.\n"
          },
          "domainName": {
            "type": "string",
            "description": "The domain name for the domain association.\n",
            "willReplaceOnChanges": true
          },
          "subDomains": {
            "type": "array",
            "items": {
              "$ref": "#/types/aws:amplify/DomainAssociationSubDomain:DomainAssociationSubDomain"
            },
            "description": "The setting for the subdomain. Documented below.\n"
          },
          "waitForVerification": {
            "type": "boolean",
            "description": "If enabled, the resource will wait for the domain association status to change to `PENDING_DEPLOYMENT` or `AVAILABLE`. Setting this to `false` will skip the process. Default: `true`.\n"
          }
        },
        "type": "object"
      }
    },
    "aws:apigateway/usagePlan:UsagePlan": {
      "description": "Provides an API Gateway Usage Plan.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as aws from \"@pulumi/aws\";\nimport * as crypto from \"crypto\";\n\nconst exampleRestApi = new aws.apigateway.RestApi(\"exampleRestApi\", {body: JSON.stringify({\n    openapi: \"3.0.1\",\n    info: {\n        title: \"example\",\n        version: \"1.0\",\n    },\n    paths: {\n        \"/path1\": {\n            get: {\n                \"x-amazon-apigateway-integration\": {\n                    httpMethod: \"GET\",\n                    payloadFormatVersion: \"1.0\",\n                    type: \"HTTP_PROXY\",\n                    uri: \"https://ip-ranges.amazonaws.com/ip-ranges.json\",\n                },\n            },\n        },\n    },\n})});\nconst exampleDeployment = new aws.apigateway.Deployment(\"exampleDeployment\", {\n    restApi: exampleRestApi.id,\n    triggers: {\n        redeployment: exampleRestApi.body.apply(body => JSON.stringify(body)).apply(toJSON => crypto.createHash('sha1').update(toJSON).digest('hex')),\n    },\n});\nconst development = new aws.apigateway.Stage(\"development\", {\n    deployment: exampleDeployment.id,\n    restApi: exampleRestApi.id,\n    stageName: \"development\",\n});\nconst production = new aws.apigateway.Stage(\"production\", {\n    deployment: exampleDeployment.id,\n    restApi: exampleRestApi.id,\n    stageName: \"production\",\n});\nconst exampleUsagePlan = new aws.apigateway.UsagePlan(\"exampleUsagePlan\", {\n    description: \"my description\",\n    productCode: \"MYCODE\",\n    apiStages: [\n        {\n            apiId: exampleRestApi.id,\n            stage: development.stageName,\n        },\n        {\n            apiId: exampleRestApi.id,\n            stage: production.stageName,\n        },\n    ],\n    quotaSettings: {\n        limit: 20,\n        offset: 2,\n        period: \"WEEK\",\n    },\n    throttleSettings: {\n        burstLimit: 5,\n        rateLimit: 10,\n    },\n});\n```\n```python\nimport pulumi\nimport hashlib\nimport json\nimport pulumi_aws as aws\n\nexample_rest_api = aws.apigateway.RestApi(\"exampleRestApi\", body=json.dumps({\n    \"openapi\": \"3.0.1\",\n    \"info\": {\n        \"title\": \"example\",\n        \"version\": \"1.0\",\n    },\n    \"paths\": {\n        \"/path1\": {\n            \"get\": {\n                \"x-amazon-apigateway-integration\": {\n                    \"httpMethod\": \"GET\",\n                    \"payloadFormatVersion\": \"1.0\",\n                    \"type\": \"HTTP_PROXY\",\n                    \"uri\": \"https://ip-ranges.amazonaws.com/ip-ranges.json\",\n                },\n            },\n        },\n    },\n}))\nexample_deployment = aws.apigateway.Deployment(\"exampleDeployment\",\n    rest_api=example_rest_api.id,\n    triggers={\n        \"redeployment\": example_rest_api.body.apply(lambda body: json.dumps(body)).apply(lambda to_json: hashlib.sha1(to_json.encode()).hexdigest()),\n    })\ndevelopment = aws.apigateway.Stage(\"development\",\n    deployment=example_deployment.id,\n    rest_api=example_rest_api.id,\n    stage_name=\"development\")\nproduction = aws.apigateway.Stage(\"production\",\n    deployment=example_deployment.id,\n    rest_api=example_rest_api.id,\n    stage_name=\"production\")\nexample_usage_plan = aws.apigateway.UsagePlan(\"exampleUsagePlan\",\n    description=\"my description\",\n    product_code=\"MYCODE\",\n    api_stages=[\n        aws.apigateway.UsagePlanApiStageArgs(\n            api_id=example_rest_api.id,\n            stage=development.stage_name,\n        ),\n        aws.apigateway.UsagePlanApiStageArgs(\n            api_id=example_rest_api.id,\n            stage=production.stage_name,\n        ),\n    ],\n    quota_settings=aws.apigateway.UsagePlanQuotaSettingsArgs(\n        limit=20,\n        offset=2,\n        period=\"WEEK\",\n    ),\n    throttle_settings=aws.apigateway.UsagePlanThrottleSettingsArgs(\n        burst_limit=5,\n        rate_limit=10,\n    ))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Security.Cryptography;\nusing System.Text;\nusing System.Text.Json;\nusing Pulumi;\nusing Aws = Pulumi.Aws;\n\nclass MyStack : Stack\n{\n\tprivate static string ComputeSHA1(string input) {\n\t\treturn BitConverter.ToString(\n\t\t\tSHA1.Create().ComputeHash(Encoding.UTF8.GetBytes(input))\n\t\t).Replace(\"-\",\"\").ToLowerInvariant());\n\t}\n\n    public MyStack()\n    {\n        var exampleRestApi = new Aws.ApiGateway.RestApi(\"exampleRestApi\", new Aws.ApiGateway.RestApiArgs\n        {\n            Body = JsonSerializer.Serialize(new Dictionary<string, object?>\n            {\n                { \"openapi\", \"3.0.1\" },\n                { \"info\", new Dictionary<string, object?>\n                {\n                    { \"title\", \"example\" },\n                    { \"version\", \"1.0\" },\n                } },\n                { \"paths\", new Dictionary<string, object?>\n                {\n                    { \"/path1\", new Dictionary<string, object?>\n                    {\n                        { \"get\", new Dictionary<string, object?>\n                        {\n                            { \"x-amazon-apigateway-integration\", new Dictionary<string, object?>\n                            {\n                                { \"httpMethod\", \"GET\" },\n                                { \"payloadFormatVersion\", \"1.0\" },\n                                { \"type\", \"HTTP_PROXY\" },\n                                { \"uri\", \"https://ip-ranges.amazonaws.com/ip-ranges.json\" },\n                            } },\n                        } },\n                    } },\n                } },\n            }),\n        });\n        var exampleDeployment = new Aws.ApiGateway.Deployment(\"exampleDeployment\", new Aws.ApiGateway.DeploymentArgs\n        {\n            RestApi = exampleRestApi.Id,\n            Triggers = \n            {\n                { \"redeployment\", exampleRestApi.Body.Apply(body => JsonSerializer.Serialize(body)).Apply(toJSON => ComputeSHA1(toJSON)) },\n            },\n        });\n        var development = new Aws.ApiGateway.Stage(\"development\", new Aws.ApiGateway.StageArgs\n        {\n            Deployment = exampleDeployment.Id,\n            RestApi = exampleRestApi.Id,\n            StageName = \"development\",\n        });\n        var production = new Aws.ApiGateway.Stage(\"production\", new Aws.ApiGateway.StageArgs\n        {\n            Deployment = exampleDeployment.Id,\n            RestApi = exampleRestApi.Id,\n            StageName = \"production\",\n        });\n        var exampleUsagePlan = new Aws.ApiGateway.UsagePlan(\"exampleUsagePlan\", new Aws.ApiGateway.UsagePlanArgs\n        {\n            Description = \"my description\",\n            ProductCode = \"MYCODE\",\n            ApiStages = \n            {\n                new Aws.ApiGateway.Inputs.UsagePlanApiStageArgs\n                {\n                    ApiId = exampleRestApi.Id,\n                    Stage = development.StageName,\n                },\n                new Aws.ApiGateway.Inputs.UsagePlanApiStageArgs\n                {\n                    ApiId = exampleRestApi.Id,\n                    Stage = production.StageName,\n                },\n            },\n            QuotaSettings = new Aws.ApiGateway.Inputs.UsagePlanQuotaSettingsArgs\n            {\n                Limit = 20,\n                Offset = 2,\n                Period = \"WEEK\",\n            },\n            ThrottleSettings = new Aws.ApiGateway.Inputs.UsagePlanThrottleSettingsArgs\n            {\n                BurstLimit = 5,\n                RateLimit = 10,\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"crypto/sha1\"\n\t\"encoding/json\"\n\t\"fmt\"\n\n\t\"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/apigateway\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc sha1Hash(input string) string {\n\thash := sha1.Sum([]byte(input))\n\treturn hex.EncodeToString(hash[:])\n}\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttmpJSON0, err := json.Marshal(map[string]interface{}{\n\t\t\t\"openapi\": \"3.0.1\",\n\t\t\t\"info\": map[string]interface{}{\n\t\t\t\t\"title\":   \"example\",\n\t\t\t\t\"version\": \"1.0\",\n\t\t\t},\n\t\t\t\"paths\": map[string]interface{}{\n\t\t\t\t\"/path1\": map[string]interface{}{\n\t\t\t\t\t\"get\": map[string]interface{}{\n\t\t\t\t\t\t\"x-amazon-apigateway-integration\": map[string]interface{}{\n\t\t\t\t\t\t\t\"httpMethod\":           \"GET\",\n\t\t\t\t\t\t\t\"payloadFormatVersion\": \"1.0\",\n\t\t\t\t\t\t\t\"type\":                 \"HTTP_PROXY\",\n\t\t\t\t\t\t\t\"uri\":                  \"https://ip-ranges.amazonaws.com/ip-ranges.json\",\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tjson0 := string(tmpJSON0)\n\t\texampleRestApi, err := apigateway.NewRestApi(ctx, \"exampleRestApi\", &apigateway.RestApiArgs{\n\t\t\tBody: pulumi.String(json0),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleDeployment, err := apigateway.NewDeployment(ctx, \"exampleDeployment\", &apigateway.DeploymentArgs{\n\t\t\tRestApi: exampleRestApi.ID(),\n\t\t\tTriggers: pulumi.StringMap{\n\t\t\t\t\"redeployment\": exampleRestApi.Body.ApplyT(func(body string) (pulumi.String, error) {\n\t\t\t\t\tvar _zero pulumi.String\n\t\t\t\t\ttmpJSON1, err := json.Marshal(body)\n\t\t\t\t\tif err != nil {\n\t\t\t\t\t\treturn _zero, err\n\t\t\t\t\t}\n\t\t\t\t\tjson1 := string(tmpJSON1)\n\t\t\t\t\treturn json1, nil\n\t\t\t\t}).(pulumi.StringOutput).ApplyT(func(toJSON string) (pulumi.String, error) {\n\t\t\t\t\treturn sha1Hash(toJSON), nil\n\t\t\t\t}).(pulumi.StringOutput),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tdevelopment, err := apigateway.NewStage(ctx, \"development\", &apigateway.StageArgs{\n\t\t\tDeployment: exampleDeployment.ID(),\n\t\t\tRestApi:    exampleRestApi.ID(),\n\t\t\tStageName:  pulumi.String(\"development\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tproduction, err := apigateway.NewStage(ctx, \"production\", &apigateway.StageArgs{\n\t\t\tDeployment: exampleDeployment.ID(),\n\t\t\tRestApi:    exampleRestApi.ID(),\n\t\t\tStageName:  pulumi.String(\"production\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = apigateway.NewUsagePlan(ctx, \"exampleUsagePlan\", &apigateway.UsagePlanArgs{\n\t\t\tDescription: pulumi.String(\"my description\"),\n\t\t\tProductCode: pulumi.String(\"MYCODE\"),\n\t\t\tApiStages: apigateway.UsagePlanApiStageArray{\n\t\t\t\t&apigateway.UsagePlanApiStageArgs{\n\t\t\t\t\tApiId: exampleRestApi.ID(),\n\t\t\t\t\tStage: development.StageName,\n\t\t\t\t},\n\t\t\t\t&apigateway.UsagePlanApiStageArgs{\n\t\t\t\t\tApiId: exampleRestApi.ID(),\n\t\t\t\t\tStage: production.StageName,\n\t\t\t\t},\n\t\t\t},\n\t\t\tQuotaSettings: &apigateway.UsagePlanQuotaSettingsArgs{\n\t\t\t\tLimit:  pulumi.Int(20),\n\t\t\t\tOffset: pulumi.Int(2),\n\t\t\t\tPeriod: pulumi.String(\"WEEK\"),\n\t\t\t},\n\t\t\tThrottleSettings: &apigateway.UsagePlanThrottleSettingsArgs{\n\t\t\t\tBurstLimit: pulumi.Int(5),\n\t\t\t\tRateLimit:  pulumi.Float64(10),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.aws.apigateway.RestApi;\nimport com.pulumi.aws.apigateway.RestApiArgs;\nimport com.pulumi.aws.apigateway.Deployment;\nimport com.pulumi.aws.apigateway.DeploymentArgs;\nimport com.pulumi.aws.apigateway.Stage;\nimport com.pulumi.aws.apigateway.StageArgs;\nimport com.pulumi.aws.apigateway.UsagePlan;\nimport com.pulumi.aws.apigateway.UsagePlanArgs;\nimport com.pulumi.aws.apigateway.inputs.UsagePlanApiStageArgs;\nimport com.pulumi.aws.apigateway.inputs.UsagePlanQuotaSettingsArgs;\nimport com.pulumi.aws.apigateway.inputs.UsagePlanThrottleSettingsArgs;\nimport static com.pulumi.codegen.internal.Serialization.*;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleRestApi = new RestApi(\"exampleRestApi\", RestApiArgs.builder()        \n            .body(serializeJson(\n                jsonObject(\n                    jsonProperty(\"openapi\", \"3.0.1\"),\n                    jsonProperty(\"info\", jsonObject(\n                        jsonProperty(\"title\", \"example\"),\n                        jsonProperty(\"version\", \"1.0\")\n                    )),\n                    jsonProperty(\"paths\", jsonObject(\n                        jsonProperty(\"/path1\", jsonObject(\n                            jsonProperty(\"get\", jsonObject(\n                                jsonProperty(\"x-amazon-apigateway-integration\", jsonObject(\n                                    jsonProperty(\"httpMethod\", \"GET\"),\n                                    jsonProperty(\"payloadFormatVersion\", \"1.0\"),\n                                    jsonProperty(\"type\", \"HTTP_PROXY\"),\n                                    jsonProperty(\"uri\", \"https://ip-ranges.amazonaws.com/ip-ranges.json\")\n                                ))\n                            ))\n                        ))\n                    ))\n                )))\n            .build());\n\n        var exampleDeployment = new Deployment(\"exampleDeployment\", DeploymentArgs.builder()        \n            .restApi(exampleRestApi.id())\n            .triggers(Map.of(\"redeployment\", exampleRestApi.body().applyValue(body -> serializeJson(\n                body)).applyValue(toJSON -> computeSHA1(toJSON))))\n            .build());\n\n        var development = new Stage(\"development\", StageArgs.builder()        \n            .deployment(exampleDeployment.id())\n            .restApi(exampleRestApi.id())\n            .stageName(\"development\")\n            .build());\n\n        var production = new Stage(\"production\", StageArgs.builder()        \n            .deployment(exampleDeployment.id())\n            .restApi(exampleRestApi.id())\n            .stageName(\"production\")\n            .build());\n\n        var exampleUsagePlan = new UsagePlan(\"exampleUsagePlan\", UsagePlanArgs.builder()        \n            .description(\"my description\")\n            .productCode(\"MYCODE\")\n            .apiStages(            \n                UsagePlanApiStageArgs.builder()\n                    .apiId(exampleRestApi.id())\n                    .stage(development.stageName())\n                    .build(),\n                UsagePlanApiStageArgs.builder()\n                    .apiId(exampleRestApi.id())\n                    .stage(production.stageName())\n                    .build())\n            .quotaSettings(UsagePlanQuotaSettingsArgs.builder()\n                .limit(20)\n                .offset(2)\n                .period(\"WEEK\")\n                .build())\n            .throttleSettings(UsagePlanThrottleSettingsArgs.builder()\n                .burstLimit(5)\n                .rateLimit(10)\n                .build())\n            .build());\n\n    }\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nAWS API Gateway Usage Plan can be imported using the `id`, e.g.,\n\n```sh\n $ pulumi import aws:apigateway/usagePlan:UsagePlan myusageplan <usage_plan_id>\n```\n\n ",
      "properties": {
        "apiStages": {
          "type": "array",
          "items": {
            "$ref": "#/types/aws:apigateway/UsagePlanApiStage:UsagePlanApiStage"
          },
          "description": "The associated API stages of the usage plan.\n"
        },
        "arn": {
          "type": "string",
          "description": "Amazon Resource Name (ARN)\n"
        },
        "description": {
          "type": "string",
          "description": "The description of a usage plan.\n"
        },
        "name": {
          "type": "string",
          "description": "The name of the usage plan.\n"
        },
        "productCode": {
          "type": "string",
          "description": "The AWS Marketplace product identifier to associate with the usage plan as a SaaS product on AWS Marketplace.\n"
        },
        "quotaSettings": {
          "$ref": "#/types/aws:apigateway/UsagePlanQuotaSettings:UsagePlanQuotaSettings",
          "description": "The quota settings of the usage plan.\n"
        },
        "tags": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Key-value map of resource tags. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.\n"
        },
        "tagsAll": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "A map of tags assigned to the resource, including those inherited from the provider .\n"
        },
        "throttleSettings": {
          "$ref": "#/types/aws:apigateway/UsagePlanThrottleSettings:UsagePlanThrottleSettings",
          "description": "The throttling limits of the usage plan.\n"
        }
      },
      "required": [
        "arn",
        "name",
        "tagsAll"
      ],
      "inputProperties": {
        "apiStages": {
          "type": "array",
          "items": {
            "$ref": "#/types/aws:apigateway/UsagePlanApiStage:UsagePlanApiStage"
          },
          "description": "The associated API stages of the usage plan.\n"
        },
        "description": {
          "type": "string",
          "description": "The description of a usage plan.\n"
        },
        "name": {
          "type": "string",
          "description": "The name of the usage plan.\n"
        },
        "productCode": {
          "type": "string",
          "description": "The AWS Marketplace product identifier to associate with the usage plan as a SaaS product on AWS Marketplace.\n"
        },
        "quotaSettings": {
          "$ref": "#/types/aws:apigateway/UsagePlanQuotaSettings:UsagePlanQuotaSettings",
          "description": "The quota settings of the usage plan.\n"
        },
        "tags": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Key-value map of resource tags. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.\n"
        },
        "throttleSettings": {
          "$ref": "#/types/aws:apigateway/UsagePlanThrottleSettings:UsagePlanThrottleSettings",
          "description": "The throttling limits of the usage plan.\n"
        }
      },
      "stateInputs": {
        "description": "Input properties used for looking up and filtering UsagePlan resources.\n",
        "properties": {
          "apiStages": {
            "type": "array",
            "items": {
              "$ref": "#/types/aws:apigateway/UsagePlanApiStage:UsagePlanApiStage"
            },
            "description": "The associated API stages of the usage plan.\n"
          },
          "arn": {
            "type": "string",
            "description": "Amazon Resource Name (ARN)\n"
          },
          "description": {
            "type": "string",
            "description": "The description of a usage plan.\n"
          },
          "name": {
            "type": "string",
            "description": "The name of the usage plan.\n"
          },
          "productCode": {
            "type": "string",
            "description": "The AWS Marketplace product identifier to associate with the usage plan as a SaaS product on AWS Marketplace.\n"
          },
          "quotaSettings": {
            "$ref": "#/types/aws:apigateway/UsagePlanQuotaSettings:UsagePlanQuotaSettings",
            "description": "The quota settings of the usage plan.\n"
          },
          "tags": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Key-value map of resource tags. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.\n"
          },
          "tagsAll": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "A map of tags assigned to the resource, including those inherited from the provider .\n"
          },
          "throttleSettings": {
            "$ref": "#/types/aws:apigateway/UsagePlanThrottleSettings:UsagePlanThrottleSettings",
            "description": "The throttling limits of the usage plan.\n"
          }
        },
        "type": "object"
      }
    },
    "aws:apigatewayv2/integration:Integration": {
      "description": "Manages an Amazon API Gateway Version 2 integration.\nMore information can be found in the [Amazon API Gateway Developer Guide](https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api.html).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n### Basic\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as aws from \"@pulumi/aws\";\n\nconst example = new aws.apigatewayv2.Integration(\"example\", {\n    apiId: aws_apigatewayv2_api.example.id,\n    integrationType: \"MOCK\",\n});\n```\n```python\nimport pulumi\nimport pulumi_aws as aws\n\nexample = aws.apigatewayv2.Integration(\"example\",\n    api_id=aws_apigatewayv2_api[\"example\"][\"id\"],\n    integration_type=\"MOCK\")\n```\n```csharp\nusing Pulumi;\nusing Aws = Pulumi.Aws;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var example = new Aws.ApiGatewayV2.Integration(\"example\", new Aws.ApiGatewayV2.IntegrationArgs\n        {\n            ApiId = aws_apigatewayv2_api.Example.Id,\n            IntegrationType = \"MOCK\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/apigatewayv2\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := apigatewayv2.NewIntegration(ctx, \"example\", &apigatewayv2.IntegrationArgs{\n\t\t\tApiId:           pulumi.Any(aws_apigatewayv2_api.Example.Id),\n\t\t\tIntegrationType: pulumi.String(\"MOCK\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.aws.apigatewayv2.Integration;\nimport com.pulumi.aws.apigatewayv2.IntegrationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new Integration(\"example\", IntegrationArgs.builder()        \n            .apiId(aws_apigatewayv2_api.example().id())\n            .integrationType(\"MOCK\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: aws:apigatewayv2:Integration\n    properties:\n      apiId: ${aws_apigatewayv2_api.example.id}\n      integrationType: MOCK\n```\n{{% /example %}}\n{{% example %}}\n### Lambda Integration\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as aws from \"@pulumi/aws\";\n\nconst exampleFunction = new aws.lambda.Function(\"exampleFunction\", {\n    code: new pulumi.asset.FileArchive(\"example.zip\"),\n    role: aws_iam_role.example.arn,\n    handler: \"index.handler\",\n    runtime: \"nodejs12.x\",\n});\nconst exampleIntegration = new aws.apigatewayv2.Integration(\"exampleIntegration\", {\n    apiId: aws_apigatewayv2_api.example.id,\n    integrationType: \"AWS\",\n    connectionType: \"INTERNET\",\n    contentHandlingStrategy: \"CONVERT_TO_TEXT\",\n    description: \"Lambda example\",\n    integrationMethod: \"POST\",\n    integrationUri: exampleFunction.invokeArn,\n    passthroughBehavior: \"WHEN_NO_MATCH\",\n});\n```\n```python\nimport pulumi\nimport pulumi_aws as aws\n\nexample_function = aws.lambda_.Function(\"exampleFunction\",\n    code=pulumi.FileArchive(\"example.zip\"),\n    role=aws_iam_role[\"example\"][\"arn\"],\n    handler=\"index.handler\",\n    runtime=\"nodejs12.x\")\nexample_integration = aws.apigatewayv2.Integration(\"exampleIntegration\",\n    api_id=aws_apigatewayv2_api[\"example\"][\"id\"],\n    integration_type=\"AWS\",\n    connection_type=\"INTERNET\",\n    content_handling_strategy=\"CONVERT_TO_TEXT\",\n    description=\"Lambda example\",\n    integration_method=\"POST\",\n    integration_uri=example_function.invoke_arn,\n    passthrough_behavior=\"WHEN_NO_MATCH\")\n```\n```csharp\nusing Pulumi;\nusing Aws = Pulumi.Aws;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var exampleFunction = new Aws.Lambda.Function(\"exampleFunction\", new Aws.Lambda.FunctionArgs\n        {\n            Code = new FileArchive(\"example.zip\"),\n            Role = aws_iam_role.Example.Arn,\n            Handler = \"index.handler\",\n            Runtime = \"nodejs12.x\",\n        });\n        var exampleIntegration = new Aws.ApiGatewayV2.Integration(\"exampleIntegration\", new Aws.ApiGatewayV2.IntegrationArgs\n        {\n            ApiId = aws_apigatewayv2_api.Example.Id,\n            IntegrationType = \"AWS\",\n            ConnectionType = \"INTERNET\",\n            ContentHandlingStrategy = \"CONVERT_TO_TEXT\",\n            Description = \"Lambda example\",\n            IntegrationMethod = \"POST\",\n            IntegrationUri = exampleFunction.InvokeArn,\n            PassthroughBehavior = \"WHEN_NO_MATCH\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-aws/sdk/v5/go/aws\"\n\t\"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/apigatewayv2\"\n\t\"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/lambda\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleFunction, err := lambda.NewFunction(ctx, \"exampleFunction\", &lambda.FunctionArgs{\n\t\t\tCode:    pulumi.NewFileArchive(\"example.zip\"),\n\t\t\tRole:    pulumi.Any(aws_iam_role.Example.Arn),\n\t\t\tHandler: pulumi.String(\"index.handler\"),\n\t\t\tRuntime: pulumi.String(\"nodejs12.x\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = apigatewayv2.NewIntegration(ctx, \"exampleIntegration\", &apigatewayv2.IntegrationArgs{\n\t\t\tApiId:                   pulumi.Any(aws_apigatewayv2_api.Example.Id),\n\t\t\tIntegrationType:         pulumi.String(\"AWS\"),\n\t\t\tConnectionType:          pulumi.String(\"INTERNET\"),\n\t\t\tContentHandlingStrategy: pulumi.String(\"CONVERT_TO_TEXT\"),\n\t\t\tDescription:             pulumi.String(\"Lambda example\"),\n\t\t\tIntegrationMethod:       pulumi.String(\"POST\"),\n\t\t\tIntegrationUri:          exampleFunction.InvokeArn,\n\t\t\tPassthroughBehavior:     pulumi.String(\"WHEN_NO_MATCH\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.aws.lambda.Function;\nimport com.pulumi.aws.lambda.FunctionArgs;\nimport com.pulumi.aws.apigatewayv2.Integration;\nimport com.pulumi.aws.apigatewayv2.IntegrationArgs;\nimport com.pulumi.asset.FileArchive;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleFunction = new Function(\"exampleFunction\", FunctionArgs.builder()        \n            .code(new FileArchive(\"example.zip\"))\n            .role(aws_iam_role.example().arn())\n            .handler(\"index.handler\")\n            .runtime(\"nodejs12.x\")\n            .build());\n\n        var exampleIntegration = new Integration(\"exampleIntegration\", IntegrationArgs.builder()        \n            .apiId(aws_apigatewayv2_api.example().id())\n            .integrationType(\"AWS\")\n            .connectionType(\"INTERNET\")\n            .contentHandlingStrategy(\"CONVERT_TO_TEXT\")\n            .description(\"Lambda example\")\n            .integrationMethod(\"POST\")\n            .integrationUri(exampleFunction.invokeArn())\n            .passthroughBehavior(\"WHEN_NO_MATCH\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleFunction:\n    type: aws:lambda:Function\n    properties:\n      code:\n        Fn::FileArchive: example.zip\n      role: ${aws_iam_role.example.arn}\n      handler: index.handler\n      runtime: nodejs12.x\n  exampleIntegration:\n    type: aws:apigatewayv2:Integration\n    properties:\n      apiId: ${aws_apigatewayv2_api.example.id}\n      integrationType: AWS\n      connectionType: INTERNET\n      contentHandlingStrategy: CONVERT_TO_TEXT\n      description: Lambda example\n      integrationMethod: POST\n      integrationUri: ${exampleFunction.invokeArn}\n      passthroughBehavior: WHEN_NO_MATCH\n```\n{{% /example %}}\n{{% example %}}\n### AWS Service Integration\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as aws from \"@pulumi/aws\";\n\nconst example = new aws.apigatewayv2.Integration(\"example\", {\n    apiId: aws_apigatewayv2_api.example.id,\n    credentialsArn: aws_iam_role.example.arn,\n    description: \"SQS example\",\n    integrationType: \"AWS_PROXY\",\n    integrationSubtype: \"SQS-SendMessage\",\n    requestParameters: {\n        QueueUrl: `$request.header.queueUrl`,\n        MessageBody: `$request.body.message`,\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_aws as aws\n\nexample = aws.apigatewayv2.Integration(\"example\",\n    api_id=aws_apigatewayv2_api[\"example\"][\"id\"],\n    credentials_arn=aws_iam_role[\"example\"][\"arn\"],\n    description=\"SQS example\",\n    integration_type=\"AWS_PROXY\",\n    integration_subtype=\"SQS-SendMessage\",\n    request_parameters={\n        \"QueueUrl\": \"$request.header.queueUrl\",\n        \"MessageBody\": \"$request.body.message\",\n    })\n```\n```csharp\nusing Pulumi;\nusing Aws = Pulumi.Aws;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var example = new Aws.ApiGatewayV2.Integration(\"example\", new Aws.ApiGatewayV2.IntegrationArgs\n        {\n            ApiId = aws_apigatewayv2_api.Example.Id,\n            CredentialsArn = aws_iam_role.Example.Arn,\n            Description = \"SQS example\",\n            IntegrationType = \"AWS_PROXY\",\n            IntegrationSubtype = \"SQS-SendMessage\",\n            RequestParameters = \n            {\n                { \"QueueUrl\", \"$request.header.queueUrl\" },\n                { \"MessageBody\", \"$request.body.message\" },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/apigatewayv2\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := apigatewayv2.NewIntegration(ctx, \"example\", &apigatewayv2.IntegrationArgs{\n\t\t\tApiId:              pulumi.Any(aws_apigatewayv2_api.Example.Id),\n\t\t\tCredentialsArn:     pulumi.Any(aws_iam_role.Example.Arn),\n\t\t\tDescription:        pulumi.String(\"SQS example\"),\n\t\t\tIntegrationType:    pulumi.String(\"AWS_PROXY\"),\n\t\t\tIntegrationSubtype: pulumi.String(\"SQS-SendMessage\"),\n\t\t\tRequestParameters: pulumi.StringMap{\n\t\t\t\t\"QueueUrl\":    pulumi.String(fmt.Sprintf(\"$request.header.queueUrl\")),\n\t\t\t\t\"MessageBody\": pulumi.String(fmt.Sprintf(\"$request.body.message\")),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.aws.apigatewayv2.Integration;\nimport com.pulumi.aws.apigatewayv2.IntegrationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new Integration(\"example\", IntegrationArgs.builder()        \n            .apiId(aws_apigatewayv2_api.example().id())\n            .credentialsArn(aws_iam_role.example().arn())\n            .description(\"SQS example\")\n            .integrationType(\"AWS_PROXY\")\n            .integrationSubtype(\"SQS-SendMessage\")\n            .requestParameters(Map.ofEntries(\n                Map.entry(\"QueueUrl\", \"$request.header.queueUrl\"),\n                Map.entry(\"MessageBody\", \"$request.body.message\")\n            ))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: aws:apigatewayv2:Integration\n    properties:\n      apiId: ${aws_apigatewayv2_api.example.id}\n      credentialsArn: ${aws_iam_role.example.arn}\n      description: SQS example\n      integrationType: AWS_PROXY\n      integrationSubtype: SQS-SendMessage\n      requestParameters:\n        QueueUrl: $request.header.queueUrl\n        MessageBody: $request.body.message\n```\n{{% /example %}}\n{{% example %}}\n### Private Integration\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as aws from \"@pulumi/aws\";\n\nconst example = new aws.apigatewayv2.Integration(\"example\", {\n    apiId: aws_apigatewayv2_api.example.id,\n    credentialsArn: aws_iam_role.example.arn,\n    description: \"Example with a load balancer\",\n    integrationType: \"HTTP_PROXY\",\n    integrationUri: aws_lb_listener.example.arn,\n    integrationMethod: \"ANY\",\n    connectionType: \"VPC_LINK\",\n    connectionId: aws_apigatewayv2_vpc_link.example.id,\n    tlsConfig: {\n        serverNameToVerify: \"example.com\",\n    },\n    requestParameters: {\n        \"append:header.authforintegration\": `$context.authorizer.authorizerResponse`,\n        \"overwrite:path\": \"staticValueForIntegration\",\n    },\n    responseParameters: [\n        {\n            statusCode: \"403\",\n            mappings: {\n                \"append:header.auth\": `$context.authorizer.authorizerResponse`,\n            },\n        },\n        {\n            statusCode: \"200\",\n            mappings: {\n                \"overwrite:statuscode\": \"204\",\n            },\n        },\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_aws as aws\n\nexample = aws.apigatewayv2.Integration(\"example\",\n    api_id=aws_apigatewayv2_api[\"example\"][\"id\"],\n    credentials_arn=aws_iam_role[\"example\"][\"arn\"],\n    description=\"Example with a load balancer\",\n    integration_type=\"HTTP_PROXY\",\n    integration_uri=aws_lb_listener[\"example\"][\"arn\"],\n    integration_method=\"ANY\",\n    connection_type=\"VPC_LINK\",\n    connection_id=aws_apigatewayv2_vpc_link[\"example\"][\"id\"],\n    tls_config=aws.apigatewayv2.IntegrationTlsConfigArgs(\n        server_name_to_verify=\"example.com\",\n    ),\n    request_parameters={\n        \"append:header.authforintegration\": \"$context.authorizer.authorizerResponse\",\n        \"overwrite:path\": \"staticValueForIntegration\",\n    },\n    response_parameters=[\n        aws.apigatewayv2.IntegrationResponseParameterArgs(\n            status_code=\"403\",\n            mappings={\n                \"append:header.auth\": \"$context.authorizer.authorizerResponse\",\n            },\n        ),\n        aws.apigatewayv2.IntegrationResponseParameterArgs(\n            status_code=\"200\",\n            mappings={\n                \"overwrite:statuscode\": \"204\",\n            },\n        ),\n    ])\n```\n```csharp\nusing Pulumi;\nusing Aws = Pulumi.Aws;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var example = new Aws.ApiGatewayV2.Integration(\"example\", new Aws.ApiGatewayV2.IntegrationArgs\n        {\n            ApiId = aws_apigatewayv2_api.Example.Id,\n            CredentialsArn = aws_iam_role.Example.Arn,\n            Description = \"Example with a load balancer\",\n            IntegrationType = \"HTTP_PROXY\",\n            IntegrationUri = aws_lb_listener.Example.Arn,\n            IntegrationMethod = \"ANY\",\n            ConnectionType = \"VPC_LINK\",\n            ConnectionId = aws_apigatewayv2_vpc_link.Example.Id,\n            TlsConfig = new Aws.ApiGatewayV2.Inputs.IntegrationTlsConfigArgs\n            {\n                ServerNameToVerify = \"example.com\",\n            },\n            RequestParameters = \n            {\n                { \"append:header.authforintegration\", \"$context.authorizer.authorizerResponse\" },\n                { \"overwrite:path\", \"staticValueForIntegration\" },\n            },\n            ResponseParameters = \n            {\n                new Aws.ApiGatewayV2.Inputs.IntegrationResponseParameterArgs\n                {\n                    StatusCode = \"403\",\n                    Mappings = \n                    {\n                        { \"append:header.auth\", \"$context.authorizer.authorizerResponse\" },\n                    },\n                },\n                new Aws.ApiGatewayV2.Inputs.IntegrationResponseParameterArgs\n                {\n                    StatusCode = \"200\",\n                    Mappings = \n                    {\n                        { \"overwrite:statuscode\", \"204\" },\n                    },\n                },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/apigatewayv2\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := apigatewayv2.NewIntegration(ctx, \"example\", &apigatewayv2.IntegrationArgs{\n\t\t\tApiId:             pulumi.Any(aws_apigatewayv2_api.Example.Id),\n\t\t\tCredentialsArn:    pulumi.Any(aws_iam_role.Example.Arn),\n\t\t\tDescription:       pulumi.String(\"Example with a load balancer\"),\n\t\t\tIntegrationType:   pulumi.String(\"HTTP_PROXY\"),\n\t\t\tIntegrationUri:    pulumi.Any(aws_lb_listener.Example.Arn),\n\t\t\tIntegrationMethod: pulumi.String(\"ANY\"),\n\t\t\tConnectionType:    pulumi.String(\"VPC_LINK\"),\n\t\t\tConnectionId:      pulumi.Any(aws_apigatewayv2_vpc_link.Example.Id),\n\t\t\tTlsConfig: &apigatewayv2.IntegrationTlsConfigArgs{\n\t\t\t\tServerNameToVerify: pulumi.String(\"example.com\"),\n\t\t\t},\n\t\t\tRequestParameters: pulumi.StringMap{\n\t\t\t\t\"append:header.authforintegration\": pulumi.String(fmt.Sprintf(\"$context.authorizer.authorizerResponse\")),\n\t\t\t\t\"overwrite:path\":                   pulumi.String(\"staticValueForIntegration\"),\n\t\t\t},\n\t\t\tResponseParameters: apigatewayv2.IntegrationResponseParameterArray{\n\t\t\t\t&apigatewayv2.IntegrationResponseParameterArgs{\n\t\t\t\t\tStatusCode: pulumi.String(\"403\"),\n\t\t\t\t\tMappings: pulumi.StringMap{\n\t\t\t\t\t\t\"append:header.auth\": pulumi.String(fmt.Sprintf(\"$context.authorizer.authorizerResponse\")),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t&apigatewayv2.IntegrationResponseParameterArgs{\n\t\t\t\t\tStatusCode: pulumi.String(\"200\"),\n\t\t\t\t\tMappings: pulumi.StringMap{\n\t\t\t\t\t\t\"overwrite:statuscode\": pulumi.String(\"204\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.aws.apigatewayv2.Integration;\nimport com.pulumi.aws.apigatewayv2.IntegrationArgs;\nimport com.pulumi.aws.apigatewayv2.inputs.IntegrationTlsConfigArgs;\nimport com.pulumi.aws.apigatewayv2.inputs.IntegrationResponseParameterArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new Integration(\"example\", IntegrationArgs.builder()        \n            .apiId(aws_apigatewayv2_api.example().id())\n            .credentialsArn(aws_iam_role.example().arn())\n            .description(\"Example with a load balancer\")\n            .integrationType(\"HTTP_PROXY\")\n            .integrationUri(aws_lb_listener.example().arn())\n            .integrationMethod(\"ANY\")\n            .connectionType(\"VPC_LINK\")\n            .connectionId(aws_apigatewayv2_vpc_link.example().id())\n            .tlsConfig(IntegrationTlsConfigArgs.builder()\n                .serverNameToVerify(\"example.com\")\n                .build())\n            .requestParameters(Map.ofEntries(\n                Map.entry(\"append:header.authforintegration\", \"$context.authorizer.authorizerResponse\"),\n                Map.entry(\"overwrite:path\", \"staticValueForIntegration\")\n            ))\n            .responseParameters(            \n                IntegrationResponseParameterArgs.builder()\n                    .statusCode(403)\n                    .mappings(Map.of(\"append:header.auth\", \"$context.authorizer.authorizerResponse\"))\n                    .build(),\n                IntegrationResponseParameterArgs.builder()\n                    .statusCode(200)\n                    .mappings(Map.of(\"overwrite:statuscode\", \"204\"))\n                    .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: aws:apigatewayv2:Integration\n    properties:\n      apiId: ${aws_apigatewayv2_api.example.id}\n      credentialsArn: ${aws_iam_role.example.arn}\n      description: Example with a load balancer\n      integrationType: HTTP_PROXY\n      integrationUri: ${aws_lb_listener.example.arn}\n      integrationMethod: ANY\n      connectionType: VPC_LINK\n      connectionId: ${aws_apigatewayv2_vpc_link.example.id}\n      tlsConfig:\n        serverNameToVerify: example.com\n      requestParameters:\n        append:header.authforintegration: $context.authorizer.authorizerResponse\n        overwrite:path: staticValueForIntegration\n      responseParameters:\n        - statusCode: 403\n          mappings:\n            append:header.auth: $context.authorizer.authorizerResponse\n        - statusCode: 200\n          mappings:\n            overwrite:statuscode: 204\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n`aws_apigatewayv2_integration` can be imported by using the API identifier and integration identifier, e.g.,\n\n```sh\n $ pulumi import aws:apigatewayv2/integration:Integration example aabbccddee/1122334\n```\n\n ",
      "properties": {
        "apiId": {
          "type": "string",
          "description": "The API identifier.\n"
        },
        "connectionId": {
          "type": "string",
          "description": "The ID of the VPC link for a private integration. Supported only for HTTP APIs. Must be between 1 and 1024 characters in length.\n"
        },
        "connectionType": {
          "type": "string",
          "description": "The type of the network connection to the integration endpoint. Valid values: `INTERNET`, `VPC_LINK`. Default is `INTERNET`.\n"
        },
        "contentHandlingStrategy": {
          "type": "string",
          "description": "How to handle response payload content type conversions. Valid values: `CONVERT_TO_BINARY`, `CONVERT_TO_TEXT`. Supported only for WebSocket APIs.\n"
        },
        "credentialsArn": {
          "type": "string",
          "description": "The credentials required for the integration, if any.\n"
        },
        "description": {
          "type": "string",
          "description": "The description of the integration.\n"
        },
        "integrationMethod": {
          "type": "string",
          "description": "The integration's HTTP method. Must be specified if `integration_type` is not `MOCK`.\n"
        },
        "integrationResponseSelectionExpression": {
          "type": "string",
          "description": "The [integration response selection expression](https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-integration-response-selection-expressions) for the integration.\n"
        },
        "integrationSubtype": {
          "type": "string",
          "description": "Specifies the AWS service action to invoke. Supported only for HTTP APIs when `integration_type` is `AWS_PROXY`. See the [AWS service integration reference](https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-develop-integrations-aws-services-reference.html) documentation for supported values. Must be between 1 and 128 characters in length.\n"
        },
        "integrationType": {
          "type": "string",
          "description": "The integration type of an integration.\nValid values: `AWS` (supported only for WebSocket APIs), `AWS_PROXY`, `HTTP` (supported only for WebSocket APIs), `HTTP_PROXY`, `MOCK` (supported only for WebSocket APIs). For an HTTP API private integration, use `HTTP_PROXY`.\n"
        },
        "integrationUri": {
          "type": "string",
          "description": "The URI of the Lambda function for a Lambda proxy integration, when `integration_type` is `AWS_PROXY`.\nFor an `HTTP` integration, specify a fully-qualified URL. For an HTTP API private integration, specify the ARN of an Application Load Balancer listener, Network Load Balancer listener, or AWS Cloud Map service.\n"
        },
        "passthroughBehavior": {
          "type": "string",
          "description": "The pass-through behavior for incoming requests based on the Content-Type header in the request, and the available mapping templates specified as the `request_templates` attribute.\nValid values: `WHEN_NO_MATCH`, `WHEN_NO_TEMPLATES`, `NEVER`. Default is `WHEN_NO_MATCH`. Supported only for WebSocket APIs.\n"
        },
        "payloadFormatVersion": {
          "type": "string",
          "description": "The [format of the payload](https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-develop-integrations-lambda.html#http-api-develop-integrations-lambda.proxy-format) sent to an integration. Valid values: `1.0`, `2.0`. Default is `1.0`.\n"
        },
        "requestParameters": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "For WebSocket APIs, a key-value map specifying request parameters that are passed from the method request to the backend.\nFor HTTP APIs with a specified `integration_subtype`, a key-value map specifying parameters that are passed to `AWS_PROXY` integrations.\nFor HTTP APIs without a specified `integration_subtype`, a key-value map specifying how to transform HTTP requests before sending them to the backend.\nSee the [Amazon API Gateway Developer Guide](https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-parameter-mapping.html) for details.\n"
        },
        "requestTemplates": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "A map of [Velocity](https://velocity.apache.org/) templates that are applied on the request payload based on the value of the Content-Type header sent by the client. Supported only for WebSocket APIs.\n"
        },
        "responseParameters": {
          "type": "array",
          "items": {
            "$ref": "#/types/aws:apigatewayv2/IntegrationResponseParameter:IntegrationResponseParameter"
          },
          "description": "Mappings to transform the HTTP response from a backend integration before returning the response to clients. Supported only for HTTP APIs.\n"
        },
        "templateSelectionExpression": {
          "type": "string",
          "description": "The [template selection expression](https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-template-selection-expressions) for the integration.\n"
        },
        "timeoutMilliseconds": {
          "type": "integer",
          "description": "Custom timeout between 50 and 29,000 milliseconds for WebSocket APIs and between 50 and 30,000 milliseconds for HTTP APIs.\nThe default timeout is 29 seconds for WebSocket APIs and 30 seconds for HTTP APIs.\nthis provider will only perform drift detection of its value when present in a configuration.\n"
        },
        "tlsConfig": {
          "$ref": "#/types/aws:apigatewayv2/IntegrationTlsConfig:IntegrationTlsConfig",
          "description": "The TLS configuration for a private integration. Supported only for HTTP APIs.\n"
        }
      },
      "required": [
        "apiId",
        "integrationResponseSelectionExpression",
        "integrationType",
        "timeoutMilliseconds"
      ],
      "inputProperties": {
        "apiId": {
          "type": "string",
          "description": "The API identifier.\n",
          "willReplaceOnChanges": true
        },
        "connectionId": {
          "type": "string",
          "description": "The ID of the VPC link for a private integration. Supported only for HTTP APIs. Must be between 1 and 1024 characters in length.\n"
        },
        "connectionType": {
          "type": "string",
          "description": "The type of the network connection to the integration endpoint. Valid values: `INTERNET`, `VPC_LINK`. Default is `INTERNET`.\n"
        },
        "contentHandlingStrategy": {
          "type": "string",
          "description": "How to handle response payload content type conversions. Valid values: `CONVERT_TO_BINARY`, `CONVERT_TO_TEXT`. Supported only for WebSocket APIs.\n"
        },
        "credentialsArn": {
          "type": "string",
          "description": "The credentials required for the integration, if any.\n"
        },
        "description": {
          "type": "string",
          "description": "The description of the integration.\n"
        },
        "integrationMethod": {
          "type": "string",
          "description": "The integration's HTTP method. Must be specified if `integration_type` is not `MOCK`.\n"
        },
        "integrationSubtype": {
          "type": "string",
          "description": "Specifies the AWS service action to invoke. Supported only for HTTP APIs when `integration_type` is `AWS_PROXY`. See the [AWS service integration reference](https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-develop-integrations-aws-services-reference.html) documentation for supported values. Must be between 1 and 128 characters in length.\n",
          "willReplaceOnChanges": true
        },
        "integrationType": {
          "type": "string",
          "description": "The integration type of an integration.\nValid values: `AWS` (supported only for WebSocket APIs), `AWS_PROXY`, `HTTP` (supported only for WebSocket APIs), `HTTP_PROXY`, `MOCK` (supported only for WebSocket APIs). For an HTTP API private integration, use `HTTP_PROXY`.\n",
          "willReplaceOnChanges": true
        },
        "integrationUri": {
          "type": "string",
          "description": "The URI of the Lambda function for a Lambda proxy integration, when `integration_type` is `AWS_PROXY`.\nFor an `HTTP` integration, specify a fully-qualified URL. For an HTTP API private integration, specify the ARN of an Application Load Balancer listener, Network Load Balancer listener, or AWS Cloud Map service.\n"
        },
        "passthroughBehavior": {
          "type": "string",
          "description": "The pass-through behavior for incoming requests based on the Content-Type header in the request, and the available mapping templates specified as the `request_templates` attribute.\nValid values: `WHEN_NO_MATCH`, `WHEN_NO_TEMPLATES`, `NEVER`. Default is `WHEN_NO_MATCH`. Supported only for WebSocket APIs.\n"
        },
        "payloadFormatVersion": {
          "type": "string",
          "description": "The [format of the payload](https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-develop-integrations-lambda.html#http-api-develop-integrations-lambda.proxy-format) sent to an integration. Valid values: `1.0`, `2.0`. Default is `1.0`.\n"
        },
        "requestParameters": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "For WebSocket APIs, a key-value map specifying request parameters that are passed from the method request to the backend.\nFor HTTP APIs with a specified `integration_subtype`, a key-value map specifying parameters that are passed to `AWS_PROXY` integrations.\nFor HTTP APIs without a specified `integration_subtype`, a key-value map specifying how to transform HTTP requests before sending them to the backend.\nSee the [Amazon API Gateway Developer Guide](https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-parameter-mapping.html) for details.\n"
        },
        "requestTemplates": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "A map of [Velocity](https://velocity.apache.org/) templates that are applied on the request payload based on the value of the Content-Type header sent by the client. Supported only for WebSocket APIs.\n"
        },
        "responseParameters": {
          "type": "array",
          "items": {
            "$ref": "#/types/aws:apigatewayv2/IntegrationResponseParameter:IntegrationResponseParameter"
          },
          "description": "Mappings to transform the HTTP response from a backend integration before returning the response to clients. Supported only for HTTP APIs.\n"
        },
        "templateSelectionExpression": {
          "type": "string",
          "description": "The [template selection expression](https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-template-selection-expressions) for the integration.\n"
        },
        "timeoutMilliseconds": {
          "type": "integer",
          "description": "Custom timeout between 50 and 29,000 milliseconds for WebSocket APIs and between 50 and 30,000 milliseconds for HTTP APIs.\nThe default timeout is 29 seconds for WebSocket APIs and 30 seconds for HTTP APIs.\nthis provider will only perform drift detection of its value when present in a configuration.\n"
        },
        "tlsConfig": {
          "$ref": "#/types/aws:apigatewayv2/IntegrationTlsConfig:IntegrationTlsConfig",
          "description": "The TLS configuration for a private integration. Supported only for HTTP APIs.\n"
        }
      },
      "requiredInputs": [
        "apiId",
        "integrationType"
      ],
      "stateInputs": {
        "description": "Input properties used for looking up and filtering Integration resources.\n",
        "properties": {
          "apiId": {
            "type": "string",
            "description": "The API identifier.\n",
            "willReplaceOnChanges": true
          },
          "connectionId": {
            "type": "string",
            "description": "The ID of the VPC link for a private integration. Supported only for HTTP APIs. Must be between 1 and 1024 characters in length.\n"
          },
          "connectionType": {
            "type": "string",
            "description": "The type of the network connection to the integration endpoint. Valid values: `INTERNET`, `VPC_LINK`. Default is `INTERNET`.\n"
          },
          "contentHandlingStrategy": {
            "type": "string",
            "description": "How to handle response payload content type conversions. Valid values: `CONVERT_TO_BINARY`, `CONVERT_TO_TEXT`. Supported only for WebSocket APIs.\n"
          },
          "credentialsArn": {
            "type": "string",
            "description": "The credentials required for the integration, if any.\n"
          },
          "description": {
            "type": "string",
            "description": "The description of the integration.\n"
          },
          "integrationMethod": {
            "type": "string",
            "description": "The integration's HTTP method. Must be specified if `integration_type` is not `MOCK`.\n"
          },
          "integrationResponseSelectionExpression": {
            "type": "string",
            "description": "The [integration response selection expression](https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-integration-response-selection-expressions) for the integration.\n"
          },
          "integrationSubtype": {
            "type": "string",
            "description": "Specifies the AWS service action to invoke. Supported only for HTTP APIs when `integration_type` is `AWS_PROXY`. See the [AWS service integration reference](https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-develop-integrations-aws-services-reference.html) documentation for supported values. Must be between 1 and 128 characters in length.\n",
            "willReplaceOnChanges": true
          },
          "integrationType": {
            "type": "string",
            "description": "The integration type of an integration.\nValid values: `AWS` (supported only for WebSocket APIs), `AWS_PROXY`, `HTTP` (supported only for WebSocket APIs), `HTTP_PROXY`, `MOCK` (supported only for WebSocket APIs). For an HTTP API private integration, use `HTTP_PROXY`.\n",
            "willReplaceOnChanges": true
          },
          "integrationUri": {
            "type": "string",
            "description": "The URI of the Lambda function for a Lambda proxy integration, when `integration_type` is `AWS_PROXY`.\nFor an `HTTP` integration, specify a fully-qualified URL. For an HTTP API private integration, specify the ARN of an Application Load Balancer listener, Network Load Balancer listener, or AWS Cloud Map service.\n"
          },
          "passthroughBehavior": {
            "type": "string",
            "description": "The pass-through behavior for incoming requests based on the Content-Type header in the request, and the available mapping templates specified as the `request_templates` attribute.\nValid values: `WHEN_NO_MATCH`, `WHEN_NO_TEMPLATES`, `NEVER`. Default is `WHEN_NO_MATCH`. Supported only for WebSocket APIs.\n"
          },
          "payloadFormatVersion": {
            "type": "string",
            "description": "The [format of the payload](https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-develop-integrations-lambda.html#http-api-develop-integrations-lambda.proxy-format) sent to an integration. Valid values: `1.0`, `2.0`. Default is `1.0`.\n"
          },
          "requestParameters": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "For WebSocket APIs, a key-value map specifying request parameters that are passed from the method request to the backend.\nFor HTTP APIs with a specified `integration_subtype`, a key-value map specifying parameters that are passed to `AWS_PROXY` integrations.\nFor HTTP APIs without a specified `integration_subtype`, a key-value map specifying how to transform HTTP requests before sending them to the backend.\nSee the [Amazon API Gateway Developer Guide](https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-parameter-mapping.html) for details.\n"
          },
          "requestTemplates": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "A map of [Velocity](https://velocity.apache.org/) templates that are applied on the request payload based on the value of the Content-Type header sent by the client. Supported only for WebSocket APIs.\n"
          },
          "responseParameters": {
            "type": "array",
            "items": {
              "$ref": "#/types/aws:apigatewayv2/IntegrationResponseParameter:IntegrationResponseParameter"
            },
            "description": "Mappings to transform the HTTP response from a backend integration before returning the response to clients. Supported only for HTTP APIs.\n"
          },
          "templateSelectionExpression": {
            "type": "string",
            "description": "The [template selection expression](https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-template-selection-expressions) for the integration.\n"
          },
          "timeoutMilliseconds": {
            "type": "integer",
            "description": "Custom timeout between 50 and 29,000 milliseconds for WebSocket APIs and between 50 and 30,000 milliseconds for HTTP APIs.\nThe default timeout is 29 seconds for WebSocket APIs and 30 seconds for HTTP APIs.\nthis provider will only perform drift detection of its value when present in a configuration.\n"
          },
          "tlsConfig": {
            "$ref": "#/types/aws:apigatewayv2/IntegrationTlsConfig:IntegrationTlsConfig",
            "description": "The TLS configuration for a private integration. Supported only for HTTP APIs.\n"
          }
        },
        "type": "object"
      }
    },
    "aws:apigatewayv2/route:Route": {
      "description": "Manages an Amazon API Gateway Version 2 route.\nMore information can be found in the [Amazon API Gateway Developer Guide](https://docs.aws.amazon.com/apigateway/latest/developerguide/welcome.html) for [WebSocket](https://docs.aws.amazon.com/apigateway/latest/developerguide/websocket-api-develop-routes.html) and [HTTP](https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-develop-routes.html) APIs.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n### Basic\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as aws from \"@pulumi/aws\";\n\nconst exampleApi = new aws.apigatewayv2.Api(\"exampleApi\", {\n    protocolType: \"WEBSOCKET\",\n    routeSelectionExpression: `$request.body.action`,\n});\nconst exampleRoute = new aws.apigatewayv2.Route(\"exampleRoute\", {\n    apiId: exampleApi.id,\n    routeKey: `$default`,\n});\n```\n```python\nimport pulumi\nimport pulumi_aws as aws\n\nexample_api = aws.apigatewayv2.Api(\"exampleApi\",\n    protocol_type=\"WEBSOCKET\",\n    route_selection_expression=\"$request.body.action\")\nexample_route = aws.apigatewayv2.Route(\"exampleRoute\",\n    api_id=example_api.id,\n    route_key=\"$default\")\n```\n```csharp\nusing Pulumi;\nusing Aws = Pulumi.Aws;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var exampleApi = new Aws.ApiGatewayV2.Api(\"exampleApi\", new Aws.ApiGatewayV2.ApiArgs\n        {\n            ProtocolType = \"WEBSOCKET\",\n            RouteSelectionExpression = \"$request.body.action\",\n        });\n        var exampleRoute = new Aws.ApiGatewayV2.Route(\"exampleRoute\", new Aws.ApiGatewayV2.RouteArgs\n        {\n            ApiId = exampleApi.Id,\n            RouteKey = \"$default\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/apigatewayv2\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleApi, err := apigatewayv2.NewApi(ctx, \"exampleApi\", &apigatewayv2.ApiArgs{\n\t\t\tProtocolType:             pulumi.String(\"WEBSOCKET\"),\n\t\t\tRouteSelectionExpression: pulumi.String(fmt.Sprintf(\"$request.body.action\")),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = apigatewayv2.NewRoute(ctx, \"exampleRoute\", &apigatewayv2.RouteArgs{\n\t\t\tApiId:    exampleApi.ID(),\n\t\t\tRouteKey: pulumi.String(fmt.Sprintf(\"$default\")),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.aws.apigatewayv2.Api;\nimport com.pulumi.aws.apigatewayv2.ApiArgs;\nimport com.pulumi.aws.apigatewayv2.Route;\nimport com.pulumi.aws.apigatewayv2.RouteArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleApi = new Api(\"exampleApi\", ApiArgs.builder()        \n            .protocolType(\"WEBSOCKET\")\n            .routeSelectionExpression(\"$request.body.action\")\n            .build());\n\n        var exampleRoute = new Route(\"exampleRoute\", RouteArgs.builder()        \n            .apiId(exampleApi.id())\n            .routeKey(\"$default\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleApi:\n    type: aws:apigatewayv2:Api\n    properties:\n      protocolType: WEBSOCKET\n      routeSelectionExpression: $request.body.action\n  exampleRoute:\n    type: aws:apigatewayv2:Route\n    properties:\n      apiId: ${exampleApi.id}\n      routeKey: $default\n```\n{{% /example %}}\n{{% example %}}\n### HTTP Proxy Integration\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as aws from \"@pulumi/aws\";\n\nconst exampleApi = new aws.apigatewayv2.Api(\"exampleApi\", {protocolType: \"HTTP\"});\nconst exampleIntegration = new aws.apigatewayv2.Integration(\"exampleIntegration\", {\n    apiId: exampleApi.id,\n    integrationType: \"HTTP_PROXY\",\n    integrationMethod: \"ANY\",\n    integrationUri: \"https://example.com/{proxy}\",\n});\nconst exampleRoute = new aws.apigatewayv2.Route(\"exampleRoute\", {\n    apiId: exampleApi.id,\n    routeKey: \"ANY /example/{proxy+}\",\n    target: pulumi.interpolate`integrations/${exampleIntegration.id}`,\n});\n```\n```python\nimport pulumi\nimport pulumi_aws as aws\n\nexample_api = aws.apigatewayv2.Api(\"exampleApi\", protocol_type=\"HTTP\")\nexample_integration = aws.apigatewayv2.Integration(\"exampleIntegration\",\n    api_id=example_api.id,\n    integration_type=\"HTTP_PROXY\",\n    integration_method=\"ANY\",\n    integration_uri=\"https://example.com/{proxy}\")\nexample_route = aws.apigatewayv2.Route(\"exampleRoute\",\n    api_id=example_api.id,\n    route_key=\"ANY /example/{proxy+}\",\n    target=example_integration.id.apply(lambda id: f\"integrations/{id}\"))\n```\n```csharp\nusing Pulumi;\nusing Aws = Pulumi.Aws;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var exampleApi = new Aws.ApiGatewayV2.Api(\"exampleApi\", new Aws.ApiGatewayV2.ApiArgs\n        {\n            ProtocolType = \"HTTP\",\n        });\n        var exampleIntegration = new Aws.ApiGatewayV2.Integration(\"exampleIntegration\", new Aws.ApiGatewayV2.IntegrationArgs\n        {\n            ApiId = exampleApi.Id,\n            IntegrationType = \"HTTP_PROXY\",\n            IntegrationMethod = \"ANY\",\n            IntegrationUri = \"https://example.com/{proxy}\",\n        });\n        var exampleRoute = new Aws.ApiGatewayV2.Route(\"exampleRoute\", new Aws.ApiGatewayV2.RouteArgs\n        {\n            ApiId = exampleApi.Id,\n            RouteKey = \"ANY /example/{proxy+}\",\n            Target = exampleIntegration.Id.Apply(id => $\"integrations/{id}\"),\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/apigatewayv2\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleApi, err := apigatewayv2.NewApi(ctx, \"exampleApi\", &apigatewayv2.ApiArgs{\n\t\t\tProtocolType: pulumi.String(\"HTTP\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleIntegration, err := apigatewayv2.NewIntegration(ctx, \"exampleIntegration\", &apigatewayv2.IntegrationArgs{\n\t\t\tApiId:             exampleApi.ID(),\n\t\t\tIntegrationType:   pulumi.String(\"HTTP_PROXY\"),\n\t\t\tIntegrationMethod: pulumi.String(\"ANY\"),\n\t\t\tIntegrationUri:    pulumi.String(\"https://example.com/{proxy}\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = apigatewayv2.NewRoute(ctx, \"exampleRoute\", &apigatewayv2.RouteArgs{\n\t\t\tApiId:    exampleApi.ID(),\n\t\t\tRouteKey: pulumi.String(\"ANY /example/{proxy+}\"),\n\t\t\tTarget: exampleIntegration.ID().ApplyT(func(id string) (string, error) {\n\t\t\t\treturn fmt.Sprintf(\"integrations/%v\", id), nil\n\t\t\t}).(pulumi.StringOutput),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.aws.apigatewayv2.Api;\nimport com.pulumi.aws.apigatewayv2.ApiArgs;\nimport com.pulumi.aws.apigatewayv2.Integration;\nimport com.pulumi.aws.apigatewayv2.IntegrationArgs;\nimport com.pulumi.aws.apigatewayv2.Route;\nimport com.pulumi.aws.apigatewayv2.RouteArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleApi = new Api(\"exampleApi\", ApiArgs.builder()        \n            .protocolType(\"HTTP\")\n            .build());\n\n        var exampleIntegration = new Integration(\"exampleIntegration\", IntegrationArgs.builder()        \n            .apiId(exampleApi.id())\n            .integrationType(\"HTTP_PROXY\")\n            .integrationMethod(\"ANY\")\n            .integrationUri(\"https://example.com/{proxy}\")\n            .build());\n\n        var exampleRoute = new Route(\"exampleRoute\", RouteArgs.builder()        \n            .apiId(exampleApi.id())\n            .routeKey(\"ANY /example/{proxy+}\")\n            .target(exampleIntegration.id().applyValue(id -> String.format(\"integrations/%s\", id)))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleApi:\n    type: aws:apigatewayv2:Api\n    properties:\n      protocolType: HTTP\n  exampleIntegration:\n    type: aws:apigatewayv2:Integration\n    properties:\n      apiId: ${exampleApi.id}\n      integrationType: HTTP_PROXY\n      integrationMethod: ANY\n      integrationUri: https://example.com/{proxy}\n  exampleRoute:\n    type: aws:apigatewayv2:Route\n    properties:\n      apiId: ${exampleApi.id}\n      routeKey: ANY /example/{proxy+}\n      target: integrations/${exampleIntegration.id}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n`aws_apigatewayv2_route` can be imported by using the API identifier and route identifier, e.g.,\n\n```sh\n $ pulumi import aws:apigatewayv2/route:Route example aabbccddee/1122334\n```\n\n ",
      "properties": {
        "apiId": {
          "type": "string",
          "description": "The API identifier.\n"
        },
        "apiKeyRequired": {
          "type": "boolean",
          "description": "Boolean whether an API key is required for the route. Defaults to `false`. Supported only for WebSocket APIs.\n"
        },
        "authorizationScopes": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The authorization scopes supported by this route. The scopes are used with a JWT authorizer to authorize the method invocation.\n"
        },
        "authorizationType": {
          "type": "string",
          "description": "The authorization type for the route.\nFor WebSocket APIs, valid values are `NONE` for open access, `AWS_IAM` for using AWS IAM permissions, and `CUSTOM` for using a Lambda authorizer.\nFor HTTP APIs, valid values are `NONE` for open access, `JWT` for using JSON Web Tokens, `AWS_IAM` for using AWS IAM permissions, and `CUSTOM` for using a Lambda authorizer.\nDefaults to `NONE`.\n"
        },
        "authorizerId": {
          "type": "string",
          "description": "The identifier of the `aws.apigatewayv2.Authorizer` resource to be associated with this route.\n"
        },
        "modelSelectionExpression": {
          "type": "string",
          "description": "The [model selection expression](https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-model-selection-expressions) for the route. Supported only for WebSocket APIs.\n"
        },
        "operationName": {
          "type": "string",
          "description": "The operation name for the route. Must be between 1 and 64 characters in length.\n"
        },
        "requestModels": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "The request models for the route. Supported only for WebSocket APIs.\n"
        },
        "requestParameters": {
          "type": "array",
          "items": {
            "$ref": "#/types/aws:apigatewayv2/RouteRequestParameter:RouteRequestParameter"
          },
          "description": "The request parameters for the route. Supported only for WebSocket APIs.\n"
        },
        "routeKey": {
          "type": "string",
          "description": "The route key for the route. For HTTP APIs, the route key can be either `$default`, or a combination of an HTTP method and resource path, for example, `GET /pets`.\n"
        },
        "routeResponseSelectionExpression": {
          "type": "string",
          "description": "The [route response selection expression](https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-route-response-selection-expressions) for the route. Supported only for WebSocket APIs.\n"
        },
        "target": {
          "type": "string",
          "description": "The target for the route, of the form `integrations/`*`IntegrationID`*, where *`IntegrationID`* is the identifier of an `aws.apigatewayv2.Integration` resource.\n"
        }
      },
      "required": [
        "apiId",
        "routeKey"
      ],
      "inputProperties": {
        "apiId": {
          "type": "string",
          "description": "The API identifier.\n",
          "willReplaceOnChanges": true
        },
        "apiKeyRequired": {
          "type": "boolean",
          "description": "Boolean whether an API key is required for the route. Defaults to `false`. Supported only for WebSocket APIs.\n"
        },
        "authorizationScopes": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The authorization scopes supported by this route. The scopes are used with a JWT authorizer to authorize the method invocation.\n"
        },
        "authorizationType": {
          "type": "string",
          "description": "The authorization type for the route.\nFor WebSocket APIs, valid values are `NONE` for open access, `AWS_IAM` for using AWS IAM permissions, and `CUSTOM` for using a Lambda authorizer.\nFor HTTP APIs, valid values are `NONE` for open access, `JWT` for using JSON Web Tokens, `AWS_IAM` for using AWS IAM permissions, and `CUSTOM` for using a Lambda authorizer.\nDefaults to `NONE`.\n"
        },
        "authorizerId": {
          "type": "string",
          "description": "The identifier of the `aws.apigatewayv2.Authorizer` resource to be associated with this route.\n"
        },
        "modelSelectionExpression": {
          "type": "string",
          "description": "The [model selection expression](https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-model-selection-expressions) for the route. Supported only for WebSocket APIs.\n"
        },
        "operationName": {
          "type": "string",
          "description": "The operation name for the route. Must be between 1 and 64 characters in length.\n"
        },
        "requestModels": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "The request models for the route. Supported only for WebSocket APIs.\n"
        },
        "requestParameters": {
          "type": "array",
          "items": {
            "$ref": "#/types/aws:apigatewayv2/RouteRequestParameter:RouteRequestParameter"
          },
          "description": "The request parameters for the route. Supported only for WebSocket APIs.\n"
        },
        "routeKey": {
          "type": "string",
          "description": "The route key for the route. For HTTP APIs, the route key can be either `$default`, or a combination of an HTTP method and resource path, for example, `GET /pets`.\n"
        },
        "routeResponseSelectionExpression": {
          "type": "string",
          "description": "The [route response selection expression](https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-route-response-selection-expressions) for the route. Supported only for WebSocket APIs.\n"
        },
        "target": {
          "type": "string",
          "description": "The target for the route, of the form `integrations/`*`IntegrationID`*, where *`IntegrationID`* is the identifier of an `aws.apigatewayv2.Integration` resource.\n"
        }
      },
      "requiredInputs": [
        "apiId",
        "routeKey"
      ],
      "stateInputs": {
        "description": "Input properties used for looking up and filtering Route resources.\n",
        "properties": {
          "apiId": {
            "type": "string",
            "description": "The API identifier.\n",
            "willReplaceOnChanges": true
          },
          "apiKeyRequired": {
            "type": "boolean",
            "description": "Boolean whether an API key is required for the route. Defaults to `false`. Supported only for WebSocket APIs.\n"
          },
          "authorizationScopes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The authorization scopes supported by this route. The scopes are used with a JWT authorizer to authorize the method invocation.\n"
          },
          "authorizationType": {
            "type": "string",
            "description": "The authorization type for the route.\nFor WebSocket APIs, valid values are `NONE` for open access, `AWS_IAM` for using AWS IAM permissions, and `CUSTOM` for using a Lambda authorizer.\nFor HTTP APIs, valid values are `NONE` for open access, `JWT` for using JSON Web Tokens, `AWS_IAM` for using AWS IAM permissions, and `CUSTOM` for using a Lambda authorizer.\nDefaults to `NONE`.\n"
          },
          "authorizerId": {
            "type": "string",
            "description": "The identifier of the `aws.apigatewayv2.Authorizer` resource to be associated with this route.\n"
          },
          "modelSelectionExpression": {
            "type": "string",
            "description": "The [model selection expression](https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-model-selection-expressions) for the route. Supported only for WebSocket APIs.\n"
          },
          "operationName": {
            "type": "string",
            "description": "The operation name for the route. Must be between 1 and 64 characters in length.\n"
          },
          "requestModels": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "The request models for the route. Supported only for WebSocket APIs.\n"
          },
          "requestParameters": {
            "type": "array",
            "items": {
              "$ref": "#/types/aws:apigatewayv2/RouteRequestParameter:RouteRequestParameter"
            },
            "description": "The request parameters for the route. Supported only for WebSocket APIs.\n"
          },
          "routeKey": {
            "type": "string",
            "description": "The route key for the route. For HTTP APIs, the route key can be either `$default`, or a combination of an HTTP method and resource path, for example, `GET /pets`.\n"
          },
          "routeResponseSelectionExpression": {
            "type": "string",
            "description": "The [route response selection expression](https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-route-response-selection-expressions) for the route. Supported only for WebSocket APIs.\n"
          },
          "target": {
            "type": "string",
            "description": "The target for the route, of the form `integrations/`*`IntegrationID`*, where *`IntegrationID`* is the identifier of an `aws.apigatewayv2.Integration` resource.\n"
          }
        },
        "type": "object"
      }
    },
    "aws:apigatewayv2/stage:Stage": {
      "description": "Manages an Amazon API Gateway Version 2 stage.\nMore information can be found in the [Amazon API Gateway Developer Guide](https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api.html).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n### Basic\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as aws from \"@pulumi/aws\";\n\nconst example = new aws.apigatewayv2.Stage(\"example\", {apiId: aws_apigatewayv2_api.example.id});\n```\n```python\nimport pulumi\nimport pulumi_aws as aws\n\nexample = aws.apigatewayv2.Stage(\"example\", api_id=aws_apigatewayv2_api[\"example\"][\"id\"])\n```\n```csharp\nusing Pulumi;\nusing Aws = Pulumi.Aws;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var example = new Aws.ApiGatewayV2.Stage(\"example\", new Aws.ApiGatewayV2.StageArgs\n        {\n            ApiId = aws_apigatewayv2_api.Example.Id,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/apigatewayv2\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := apigatewayv2.NewStage(ctx, \"example\", &apigatewayv2.StageArgs{\n\t\t\tApiId: pulumi.Any(aws_apigatewayv2_api.Example.Id),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.aws.apigatewayv2.Stage;\nimport com.pulumi.aws.apigatewayv2.StageArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new Stage(\"example\", StageArgs.builder()        \n            .apiId(aws_apigatewayv2_api.example().id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: aws:apigatewayv2:Stage\n    properties:\n      apiId: ${aws_apigatewayv2_api.example.id}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n`aws_apigatewayv2_stage` can be imported by using the API identifier and stage name, e.g.,\n\n```sh\n $ pulumi import aws:apigatewayv2/stage:Stage example aabbccddee/example-stage\n```\n\n ",
      "properties": {
        "accessLogSettings": {
          "$ref": "#/types/aws:apigatewayv2/StageAccessLogSettings:StageAccessLogSettings",
          "description": "Settings for logging access in this stage.\nUse the `aws.apigateway.Account` resource to configure [permissions for CloudWatch Logging](https://docs.aws.amazon.com/apigateway/latest/developerguide/set-up-logging.html#set-up-access-logging-permissions).\n"
        },
        "apiId": {
          "type": "string",
          "description": "The API identifier.\n"
        },
        "arn": {
          "type": "string",
          "description": "The ARN of the stage.\n"
        },
        "autoDeploy": {
          "type": "boolean",
          "description": "Whether updates to an API automatically trigger a new deployment. Defaults to `false`.\n"
        },
        "clientCertificateId": {
          "type": "string",
          "description": "The identifier of a client certificate for the stage. Use the `aws.apigateway.ClientCertificate` resource to configure a client certificate.\nSupported only for WebSocket APIs.\n"
        },
        "defaultRouteSettings": {
          "$ref": "#/types/aws:apigatewayv2/StageDefaultRouteSettings:StageDefaultRouteSettings",
          "description": "The default route settings for the stage.\n"
        },
        "deploymentId": {
          "type": "string",
          "description": "The deployment identifier of the stage. Use the `aws.apigatewayv2.Deployment` resource to configure a deployment.\n"
        },
        "description": {
          "type": "string",
          "description": "The description for the stage. Must be less than or equal to 1024 characters in length.\n"
        },
        "executionArn": {
          "type": "string",
          "description": "The ARN prefix to be used in an `aws.lambda.Permission` `source_arn` attribute.\nFor WebSocket APIs this attribute can additionally be used in an `aws.iam.Policy` to authorize access to the [`@connections` API](https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-how-to-call-websocket-api-connections.html).\nSee the [Amazon API Gateway Developer Guide](https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-control-access-iam.html) for details.\n"
        },
        "invokeUrl": {
          "type": "string",
          "description": "The URL to invoke the API pointing to the stage,\ne.g., `wss://z4675bid1j.execute-api.eu-west-2.amazonaws.com/example-stage`, or `https://z4675bid1j.execute-api.eu-west-2.amazonaws.com/`\n"
        },
        "name": {
          "type": "string",
          "description": "The name of the stage. Must be between 1 and 128 characters in length.\n"
        },
        "routeSettings": {
          "type": "array",
          "items": {
            "$ref": "#/types/aws:apigatewayv2/StageRouteSetting:StageRouteSetting"
          },
          "description": "Route settings for the stage.\n"
        },
        "stageVariables": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "A map that defines the stage variables for the stage.\n"
        },
        "tags": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "A map of tags to assign to the stage. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.\n"
        },
        "tagsAll": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.\n"
        }
      },
      "required": [
        "apiId",
        "arn",
        "deploymentId",
        "executionArn",
        "invokeUrl",
        "name",
        "tagsAll"
      ],
      "inputProperties": {
        "accessLogSettings": {
          "$ref": "#/types/aws:apigatewayv2/StageAccessLogSettings:StageAccessLogSettings",
          "description": "Settings for logging access in this stage.\nUse the `aws.apigateway.Account` resource to configure [permissions for CloudWatch Logging](https://docs.aws.amazon.com/apigateway/latest/developerguide/set-up-logging.html#set-up-access-logging-permissions).\n"
        },
        "apiId": {
          "type": "string",
          "description": "The API identifier.\n",
          "willReplaceOnChanges": true
        },
        "autoDeploy": {
          "type": "boolean",
          "description": "Whether updates to an API automatically trigger a new deployment. Defaults to `false`.\n"
        },
        "clientCertificateId": {
          "type": "string",
          "description": "The identifier of a client certificate for the stage. Use the `aws.apigateway.ClientCertificate` resource to configure a client certificate.\nSupported only for WebSocket APIs.\n"
        },
        "defaultRouteSettings": {
          "$ref": "#/types/aws:apigatewayv2/StageDefaultRouteSettings:StageDefaultRouteSettings",
          "description": "The default route settings for the stage.\n"
        },
        "deploymentId": {
          "type": "string",
          "description": "The deployment identifier of the stage. Use the `aws.apigatewayv2.Deployment` resource to configure a deployment.\n"
        },
        "description": {
          "type": "string",
          "description": "The description for the stage. Must be less than or equal to 1024 characters in length.\n"
        },
        "name": {
          "type": "string",
          "description": "The name of the stage. Must be between 1 and 128 characters in length.\n",
          "willReplaceOnChanges": true
        },
        "routeSettings": {
          "type": "array",
          "items": {
            "$ref": "#/types/aws:apigatewayv2/StageRouteSetting:StageRouteSetting"
          },
          "description": "Route settings for the stage.\n"
        },
        "stageVariables": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "A map that defines the stage variables for the stage.\n"
        },
        "tags": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "A map of tags to assign to the stage. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.\n"
        }
      },
      "requiredInputs": [
        "apiId"
      ],
      "stateInputs": {
        "description": "Input properties used for looking up and filtering Stage resources.\n",
        "properties": {
          "accessLogSettings": {
            "$ref": "#/types/aws:apigatewayv2/StageAccessLogSettings:StageAccessLogSettings",
            "description": "Settings for logging access in this stage.\nUse the `aws.apigateway.Account` resource to configure [permissions for CloudWatch Logging](https://docs.aws.amazon.com/apigateway/latest/developerguide/set-up-logging.html#set-up-access-logging-permissions).\n"
          },
          "apiId": {
            "type": "string",
            "description": "The API identifier.\n",
            "willReplaceOnChanges": true
          },
          "arn": {
            "type": "string",
            "description": "The ARN of the stage.\n"
          },
          "autoDeploy": {
            "type": "boolean",
            "description": "Whether updates to an API automatically trigger a new deployment. Defaults to `false`.\n"
          },
          "clientCertificateId": {
            "type": "string",
            "description": "The identifier of a client certificate for the stage. Use the `aws.apigateway.ClientCertificate` resource to configure a client certificate.\nSupported only for WebSocket APIs.\n"
          },
          "defaultRouteSettings": {
            "$ref": "#/types/aws:apigatewayv2/StageDefaultRouteSettings:StageDefaultRouteSettings",
            "description": "The default route settings for the stage.\n"
          },
          "deploymentId": {
            "type": "string",
            "description": "The deployment identifier of the stage. Use the `aws.apigatewayv2.Deployment` resource to configure a deployment.\n"
          },
          "description": {
            "type": "string",
            "description": "The description for the stage. Must be less than or equal to 1024 characters in length.\n"
          },
          "executionArn": {
            "type": "string",
            "description": "The ARN prefix to be used in an `aws.lambda.Permission` `source_arn` attribute.\nFor WebSocket APIs this attribute can additionally be used in an `aws.iam.Policy` to authorize access to the [`@connections` API](https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-how-to-call-websocket-api-connections.html).\nSee the [Amazon API Gateway Developer Guide](https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-control-access-iam.html) for details.\n"
          },
          "invokeUrl": {
            "type": "string",
            "description": "The URL to invoke the API pointing to the stage,\ne.g., `wss://z4675bid1j.execute-api.eu-west-2.amazonaws.com/example-stage`, or `https://z4675bid1j.execute-api.eu-west-2.amazonaws.com/`\n"
          },
          "name": {
            "type": "string",
            "description": "The name of the stage. Must be between 1 and 128 characters in length.\n",
            "willReplaceOnChanges": true
          },
          "routeSettings": {
            "type": "array",
            "items": {
              "$ref": "#/types/aws:apigatewayv2/StageRouteSetting:StageRouteSetting"
            },
            "description": "Route settings for the stage.\n"
          },
          "stageVariables": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "A map that defines the stage variables for the stage.\n"
          },
          "tags": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "A map of tags to assign to the stage. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.\n"
          },
          "tagsAll": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.\n"
          }
        },
        "type": "object"
      }
    },
    "aws:appconfig/configurationProfile:ConfigurationProfile": {
      "description": "Provides an AppConfig Configuration Profile resource.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as aws from \"@pulumi/aws\";\n\nconst example = new aws.appconfig.ConfigurationProfile(\"example\", {\n    applicationId: aws_appconfig_application.example.id,\n    description: \"Example Configuration Profile\",\n    locationUri: \"hosted\",\n    validators: [{\n        content: aws_lambda_function.example.arn,\n        type: \"LAMBDA\",\n    }],\n    tags: {\n        Type: \"AppConfig Configuration Profile\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_aws as aws\n\nexample = aws.appconfig.ConfigurationProfile(\"example\",\n    application_id=aws_appconfig_application[\"example\"][\"id\"],\n    description=\"Example Configuration Profile\",\n    location_uri=\"hosted\",\n    validators=[aws.appconfig.ConfigurationProfileValidatorArgs(\n        content=aws_lambda_function[\"example\"][\"arn\"],\n        type=\"LAMBDA\",\n    )],\n    tags={\n        \"Type\": \"AppConfig Configuration Profile\",\n    })\n```\n```csharp\nusing Pulumi;\nusing Aws = Pulumi.Aws;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var example = new Aws.AppConfig.ConfigurationProfile(\"example\", new Aws.AppConfig.ConfigurationProfileArgs\n        {\n            ApplicationId = aws_appconfig_application.Example.Id,\n            Description = \"Example Configuration Profile\",\n            LocationUri = \"hosted\",\n            Validators = \n            {\n                new Aws.AppConfig.Inputs.ConfigurationProfileValidatorArgs\n                {\n                    Content = aws_lambda_function.Example.Arn,\n                    Type = \"LAMBDA\",\n                },\n            },\n            Tags = \n            {\n                { \"Type\", \"AppConfig Configuration Profile\" },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/appconfig\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := appconfig.NewConfigurationProfile(ctx, \"example\", &appconfig.ConfigurationProfileArgs{\n\t\t\tApplicationId: pulumi.Any(aws_appconfig_application.Example.Id),\n\t\t\tDescription:   pulumi.String(\"Example Configuration Profile\"),\n\t\t\tLocationUri:   pulumi.String(\"hosted\"),\n\t\t\tValidators: appconfig.ConfigurationProfileValidatorArray{\n\t\t\t\t&appconfig.ConfigurationProfileValidatorArgs{\n\t\t\t\t\tContent: pulumi.Any(aws_lambda_function.Example.Arn),\n\t\t\t\t\tType:    pulumi.String(\"LAMBDA\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tTags: pulumi.StringMap{\n\t\t\t\t\"Type\": pulumi.String(\"AppConfig Configuration Profile\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.aws.appconfig.ConfigurationProfile;\nimport com.pulumi.aws.appconfig.ConfigurationProfileArgs;\nimport com.pulumi.aws.appconfig.inputs.ConfigurationProfileValidatorArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new ConfigurationProfile(\"example\", ConfigurationProfileArgs.builder()        \n            .applicationId(aws_appconfig_application.example().id())\n            .description(\"Example Configuration Profile\")\n            .locationUri(\"hosted\")\n            .validators(ConfigurationProfileValidatorArgs.builder()\n                .content(aws_lambda_function.example().arn())\n                .type(\"LAMBDA\")\n                .build())\n            .tags(Map.of(\"Type\", \"AppConfig Configuration Profile\"))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: aws:appconfig:ConfigurationProfile\n    properties:\n      applicationId: ${aws_appconfig_application.example.id}\n      description: Example Configuration Profile\n      locationUri: hosted\n      validators:\n        - content: ${aws_lambda_function.example.arn}\n          type: LAMBDA\n      tags:\n        Type: AppConfig Configuration Profile\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nAppConfig Configuration Profiles can be imported by using the configuration profile ID and application ID separated by a colon (`:`), e.g.,\n\n```sh\n $ pulumi import aws:appconfig/configurationProfile:ConfigurationProfile example 71abcde:11xxxxx\n```\n\n ",
      "properties": {
        "applicationId": {
          "type": "string",
          "description": "The application ID. Must be between 4 and 7 characters in length.\n"
        },
        "arn": {
          "type": "string",
          "description": "The Amazon Resource Name (ARN) of the AppConfig Configuration Profile.\n"
        },
        "configurationProfileId": {
          "type": "string",
          "description": "The configuration profile ID.\n"
        },
        "description": {
          "type": "string",
          "description": "The description of the configuration profile. Can be at most 1024 characters.\n"
        },
        "locationUri": {
          "type": "string",
          "description": "A URI to locate the configuration. You can specify the AWS AppConfig hosted configuration store, Systems Manager (SSM) document, an SSM Parameter Store parameter, or an Amazon S3 object. For the hosted configuration store, specify `hosted`. For an SSM document, specify either the document name in the format `ssm-document://<Document_name>` or the Amazon Resource Name (ARN). For a parameter, specify either the parameter name in the format `ssm-parameter://<Parameter_name>` or the ARN. For an Amazon S3 object, specify the URI in the following format: `s3://<bucket>/<objectKey>`.\n"
        },
        "name": {
          "type": "string",
          "description": "The name for the configuration profile. Must be between 1 and 64 characters in length.\n"
        },
        "retrievalRoleArn": {
          "type": "string",
          "description": "The ARN of an IAM role with permission to access the configuration at the specified `location_uri`. A retrieval role ARN is not required for configurations stored in the AWS AppConfig `hosted` configuration store. It is required for all other sources that store your configuration.\n"
        },
        "tags": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.\n"
        },
        "tagsAll": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.\n"
        },
        "type": {
          "type": "string",
          "description": "The type of configurations contained in the profile. Valid values: `AWS.AppConfig.FeatureFlags` and `AWS.Freeform`.  Default: `AWS.Freeform`.\n"
        },
        "validators": {
          "type": "array",
          "items": {
            "$ref": "#/types/aws:appconfig/ConfigurationProfileValidator:ConfigurationProfileValidator"
          },
          "description": "A set of methods for validating the configuration. Maximum of 2. See Validator below for more details.\n"
        }
      },
      "required": [
        "applicationId",
        "arn",
        "configurationProfileId",
        "locationUri",
        "name",
        "tagsAll"
      ],
      "inputProperties": {
        "applicationId": {
          "type": "string",
          "description": "The application ID. Must be between 4 and 7 characters in length.\n",
          "willReplaceOnChanges": true
        },
        "description": {
          "type": "string",
          "description": "The description of the configuration profile. Can be at most 1024 characters.\n"
        },
        "locationUri": {
          "type": "string",
          "description": "A URI to locate the configuration. You can specify the AWS AppConfig hosted configuration store, Systems Manager (SSM) document, an SSM Parameter Store parameter, or an Amazon S3 object. For the hosted configuration store, specify `hosted`. For an SSM document, specify either the document name in the format `ssm-document://<Document_name>` or the Amazon Resource Name (ARN). For a parameter, specify either the parameter name in the format `ssm-parameter://<Parameter_name>` or the ARN. For an Amazon S3 object, specify the URI in the following format: `s3://<bucket>/<objectKey>`.\n",
          "willReplaceOnChanges": true
        },
        "name": {
          "type": "string",
          "description": "The name for the configuration profile. Must be between 1 and 64 characters in length.\n"
        },
        "retrievalRoleArn": {
          "type": "string",
          "description": "The ARN of an IAM role with permission to access the configuration at the specified `location_uri`. A retrieval role ARN is not required for configurations stored in the AWS AppConfig `hosted` configuration store. It is required for all other sources that store your configuration.\n"
        },
        "tags": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.\n"
        },
        "type": {
          "type": "string",
          "description": "The type of configurations contained in the profile. Valid values: `AWS.AppConfig.FeatureFlags` and `AWS.Freeform`.  Default: `AWS.Freeform`.\n",
          "willReplaceOnChanges": true
        },
        "validators": {
          "type": "array",
          "items": {
            "$ref": "#/types/aws:appconfig/ConfigurationProfileValidator:ConfigurationProfileValidator"
          },
          "description": "A set of methods for validating the configuration. Maximum of 2. See Validator below for more details.\n"
        }
      },
      "requiredInputs": [
        "applicationId",
        "locationUri"
      ],
      "stateInputs": {
        "description": "Input properties used for looking up and filtering ConfigurationProfile resources.\n",
        "properties": {
          "applicationId": {
            "type": "string",
            "description": "The application ID. Must be between 4 and 7 characters in length.\n",
            "willReplaceOnChanges": true
          },
          "arn": {
            "type": "string",
            "description": "The Amazon Resource Name (ARN) of the AppConfig Configuration Profile.\n"
          },
          "configurationProfileId": {
            "type": "string",
            "description": "The configuration profile ID.\n"
          },
          "description": {
            "type": "string",
            "description": "The description of the configuration profile. Can be at most 1024 characters.\n"
          },
          "locationUri": {
            "type": "string",
            "description": "A URI to locate the configuration. You can specify the AWS AppConfig hosted configuration store, Systems Manager (SSM) document, an SSM Parameter Store parameter, or an Amazon S3 object. For the hosted configuration store, specify `hosted`. For an SSM document, specify either the document name in the format `ssm-document://<Document_name>` or the Amazon Resource Name (ARN). For a parameter, specify either the parameter name in the format `ssm-parameter://<Parameter_name>` or the ARN. For an Amazon S3 object, specify the URI in the following format: `s3://<bucket>/<objectKey>`.\n",
            "willReplaceOnChanges": true
          },
          "name": {
            "type": "string",
            "description": "The name for the configuration profile. Must be between 1 and 64 characters in length.\n"
          },
          "retrievalRoleArn": {
            "type": "string",
            "description": "The ARN of an IAM role with permission to access the configuration at the specified `location_uri`. A retrieval role ARN is not required for configurations stored in the AWS AppConfig `hosted` configuration store. It is required for all other sources that store your configuration.\n"
          },
          "tags": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.\n"
          },
          "tagsAll": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.\n"
          },
          "type": {
            "type": "string",
            "description": "The type of configurations contained in the profile. Valid values: `AWS.AppConfig.FeatureFlags` and `AWS.Freeform`.  Default: `AWS.Freeform`.\n",
            "willReplaceOnChanges": true
          },
          "validators": {
            "type": "array",
            "items": {
              "$ref": "#/types/aws:appconfig/ConfigurationProfileValidator:ConfigurationProfileValidator"
            },
            "description": "A set of methods for validating the configuration. Maximum of 2. See Validator below for more details.\n"
          }
        },
        "type": "object"
      }
    },
    "aws:appconfig/environment:Environment": {
      "description": "Provides an AppConfig Environment resource for an `aws.appconfig.Application` resource. One or more environments can be defined for an application.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as aws from \"@pulumi/aws\";\n\nconst exampleApplication = new aws.appconfig.Application(\"exampleApplication\", {\n    description: \"Example AppConfig Application\",\n    tags: {\n        Type: \"AppConfig Application\",\n    },\n});\nconst exampleEnvironment = new aws.appconfig.Environment(\"exampleEnvironment\", {\n    description: \"Example AppConfig Environment\",\n    applicationId: exampleApplication.id,\n    monitors: [{\n        alarmArn: aws_cloudwatch_metric_alarm.example.arn,\n        alarmRoleArn: aws_iam_role.example.arn,\n    }],\n    tags: {\n        Type: \"AppConfig Environment\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_aws as aws\n\nexample_application = aws.appconfig.Application(\"exampleApplication\",\n    description=\"Example AppConfig Application\",\n    tags={\n        \"Type\": \"AppConfig Application\",\n    })\nexample_environment = aws.appconfig.Environment(\"exampleEnvironment\",\n    description=\"Example AppConfig Environment\",\n    application_id=example_application.id,\n    monitors=[aws.appconfig.EnvironmentMonitorArgs(\n        alarm_arn=aws_cloudwatch_metric_alarm[\"example\"][\"arn\"],\n        alarm_role_arn=aws_iam_role[\"example\"][\"arn\"],\n    )],\n    tags={\n        \"Type\": \"AppConfig Environment\",\n    })\n```\n```csharp\nusing Pulumi;\nusing Aws = Pulumi.Aws;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var exampleApplication = new Aws.AppConfig.Application(\"exampleApplication\", new Aws.AppConfig.ApplicationArgs\n        {\n            Description = \"Example AppConfig Application\",\n            Tags = \n            {\n                { \"Type\", \"AppConfig Application\" },\n            },\n        });\n        var exampleEnvironment = new Aws.AppConfig.Environment(\"exampleEnvironment\", new Aws.AppConfig.EnvironmentArgs\n        {\n            Description = \"Example AppConfig Environment\",\n            ApplicationId = exampleApplication.Id,\n            Monitors = \n            {\n                new Aws.AppConfig.Inputs.EnvironmentMonitorArgs\n                {\n                    AlarmArn = aws_cloudwatch_metric_alarm.Example.Arn,\n                    AlarmRoleArn = aws_iam_role.Example.Arn,\n                },\n            },\n            Tags = \n            {\n                { \"Type\", \"AppConfig Environment\" },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/appconfig\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleApplication, err := appconfig.NewApplication(ctx, \"exampleApplication\", &appconfig.ApplicationArgs{\n\t\t\tDescription: pulumi.String(\"Example AppConfig Application\"),\n\t\t\tTags: pulumi.StringMap{\n\t\t\t\t\"Type\": pulumi.String(\"AppConfig Application\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = appconfig.NewEnvironment(ctx, \"exampleEnvironment\", &appconfig.EnvironmentArgs{\n\t\t\tDescription:   pulumi.String(\"Example AppConfig Environment\"),\n\t\t\tApplicationId: exampleApplication.ID(),\n\t\t\tMonitors: appconfig.EnvironmentMonitorArray{\n\t\t\t\t&appconfig.EnvironmentMonitorArgs{\n\t\t\t\t\tAlarmArn:     pulumi.Any(aws_cloudwatch_metric_alarm.Example.Arn),\n\t\t\t\t\tAlarmRoleArn: pulumi.Any(aws_iam_role.Example.Arn),\n\t\t\t\t},\n\t\t\t},\n\t\t\tTags: pulumi.StringMap{\n\t\t\t\t\"Type\": pulumi.String(\"AppConfig Environment\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.aws.appconfig.Application;\nimport com.pulumi.aws.appconfig.ApplicationArgs;\nimport com.pulumi.aws.appconfig.Environment;\nimport com.pulumi.aws.appconfig.EnvironmentArgs;\nimport com.pulumi.aws.appconfig.inputs.EnvironmentMonitorArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleApplication = new Application(\"exampleApplication\", ApplicationArgs.builder()        \n            .description(\"Example AppConfig Application\")\n            .tags(Map.of(\"Type\", \"AppConfig Application\"))\n            .build());\n\n        var exampleEnvironment = new Environment(\"exampleEnvironment\", EnvironmentArgs.builder()        \n            .description(\"Example AppConfig Environment\")\n            .applicationId(exampleApplication.id())\n            .monitors(EnvironmentMonitorArgs.builder()\n                .alarmArn(aws_cloudwatch_metric_alarm.example().arn())\n                .alarmRoleArn(aws_iam_role.example().arn())\n                .build())\n            .tags(Map.of(\"Type\", \"AppConfig Environment\"))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleEnvironment:\n    type: aws:appconfig:Environment\n    properties:\n      description: Example AppConfig Environment\n      applicationId: ${exampleApplication.id}\n      monitors:\n        - alarmArn: ${aws_cloudwatch_metric_alarm.example.arn}\n          alarmRoleArn: ${aws_iam_role.example.arn}\n      tags:\n        Type: AppConfig Environment\n  exampleApplication:\n    type: aws:appconfig:Application\n    properties:\n      description: Example AppConfig Application\n      tags:\n        Type: AppConfig Application\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nAppConfig Environments can be imported by using the environment ID and application ID separated by a colon (`:`), e.g.,\n\n```sh\n $ pulumi import aws:appconfig/environment:Environment example 71abcde:11xxxxx\n```\n\n ",
      "properties": {
        "applicationId": {
          "type": "string",
          "description": "The AppConfig application ID. Must be between 4 and 7 characters in length.\n"
        },
        "arn": {
          "type": "string",
          "description": "The Amazon Resource Name (ARN) of the AppConfig Environment.\n"
        },
        "description": {
          "type": "string",
          "description": "The description of the environment. Can be at most 1024 characters.\n"
        },
        "environmentId": {
          "type": "string",
          "description": "The AppConfig environment ID.\n"
        },
        "monitors": {
          "type": "array",
          "items": {
            "$ref": "#/types/aws:appconfig/EnvironmentMonitor:EnvironmentMonitor"
          },
          "description": "Set of Amazon CloudWatch alarms to monitor during the deployment process. Maximum of 5. See Monitor below for more details.\n"
        },
        "name": {
          "type": "string",
          "description": "The name for the environment. Must be between 1 and 64 characters in length.\n"
        },
        "state": {
          "type": "string"
        },
        "tags": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.\n"
        },
        "tagsAll": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.\n"
        }
      },
      "required": [
        "applicationId",
        "arn",
        "environmentId",
        "name",
        "state",
        "tagsAll"
      ],
      "inputProperties": {
        "applicationId": {
          "type": "string",
          "description": "The AppConfig application ID. Must be between 4 and 7 characters in length.\n",
          "willReplaceOnChanges": true
        },
        "description": {
          "type": "string",
          "description": "The description of the environment. Can be at most 1024 characters.\n"
        },
        "monitors": {
          "type": "array",
          "items": {
            "$ref": "#/types/aws:appconfig/EnvironmentMonitor:EnvironmentMonitor"
          },
          "description": "Set of Amazon CloudWatch alarms to monitor during the deployment process. Maximum of 5. See Monitor below for more details.\n"
        },
        "name": {
          "type": "string",
          "description": "The name for the environment. Must be between 1 and 64 characters in length.\n"
        },
        "tags": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.\n"
        }
      },
      "requiredInputs": [
        "applicationId"
      ],
      "stateInputs": {
        "description": "Input properties used for looking up and filtering Environment resources.\n",
        "properties": {
          "applicationId": {
            "type": "string",
            "description": "The AppConfig application ID. Must be between 4 and 7 characters in length.\n",
            "willReplaceOnChanges": true
          },
          "arn": {
            "type": "string",
            "description": "The Amazon Resource Name (ARN) of the AppConfig Environment.\n"
          },
          "description": {
            "type": "string",
            "description": "The description of the environment. Can be at most 1024 characters.\n"
          },
          "environmentId": {
            "type": "string",
            "description": "The AppConfig environment ID.\n"
          },
          "monitors": {
            "type": "array",
            "items": {
              "$ref": "#/types/aws:appconfig/EnvironmentMonitor:EnvironmentMonitor"
            },
            "description": "Set of Amazon CloudWatch alarms to monitor during the deployment process. Maximum of 5. See Monitor below for more details.\n"
          },
          "name": {
            "type": "string",
            "description": "The name for the environment. Must be between 1 and 64 characters in length.\n"
          },
          "state": {
            "type": "string"
          },
          "tags": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.\n"
          },
          "tagsAll": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.\n"
          }
        },
        "type": "object"
      }
    },
    "aws:appmesh/mesh:Mesh": {
      "description": "Provides an AWS App Mesh service mesh resource.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n### Basic\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as aws from \"@pulumi/aws\";\n\nconst simple = new aws.appmesh.Mesh(\"simple\", {});\n```\n```python\nimport pulumi\nimport pulumi_aws as aws\n\nsimple = aws.appmesh.Mesh(\"simple\")\n```\n```csharp\nusing Pulumi;\nusing Aws = Pulumi.Aws;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var simple = new Aws.AppMesh.Mesh(\"simple\", new Aws.AppMesh.MeshArgs\n        {\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/appmesh\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := appmesh.NewMesh(ctx, \"simple\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.aws.appmesh.Mesh;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var simple = new Mesh(\"simple\");\n\n    }\n}\n```\n```yaml\nresources:\n  simple:\n    type: aws:appmesh:Mesh\n```\n{{% /example %}}\n{{% example %}}\n### Egress Filter\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as aws from \"@pulumi/aws\";\n\nconst simple = new aws.appmesh.Mesh(\"simple\", {\n    spec: {\n        egressFilter: {\n            type: \"ALLOW_ALL\",\n        },\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_aws as aws\n\nsimple = aws.appmesh.Mesh(\"simple\", spec=aws.appmesh.MeshSpecArgs(\n    egress_filter=aws.appmesh.MeshSpecEgressFilterArgs(\n        type=\"ALLOW_ALL\",\n    ),\n))\n```\n```csharp\nusing Pulumi;\nusing Aws = Pulumi.Aws;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var simple = new Aws.AppMesh.Mesh(\"simple\", new Aws.AppMesh.MeshArgs\n        {\n            Spec = new Aws.AppMesh.Inputs.MeshSpecArgs\n            {\n                EgressFilter = new Aws.AppMesh.Inputs.MeshSpecEgressFilterArgs\n                {\n                    Type = \"ALLOW_ALL\",\n                },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/appmesh\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := appmesh.NewMesh(ctx, \"simple\", &appmesh.MeshArgs{\n\t\t\tSpec: &appmesh.MeshSpecArgs{\n\t\t\t\tEgressFilter: &appmesh.MeshSpecEgressFilterArgs{\n\t\t\t\t\tType: pulumi.String(\"ALLOW_ALL\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.aws.appmesh.Mesh;\nimport com.pulumi.aws.appmesh.MeshArgs;\nimport com.pulumi.aws.appmesh.inputs.MeshSpecArgs;\nimport com.pulumi.aws.appmesh.inputs.MeshSpecEgressFilterArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var simple = new Mesh(\"simple\", MeshArgs.builder()        \n            .spec(MeshSpecArgs.builder()\n                .egressFilter(MeshSpecEgressFilterArgs.builder()\n                    .type(\"ALLOW_ALL\")\n                    .build())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  simple:\n    type: aws:appmesh:Mesh\n    properties:\n      spec:\n        egressFilter:\n          type: ALLOW_ALL\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nApp Mesh service meshes can be imported using the `name`, e.g.,\n\n```sh\n $ pulumi import aws:appmesh/mesh:Mesh simple simpleapp\n```\n\n ",
      "properties": {
        "arn": {
          "type": "string",
          "description": "The ARN of the service mesh.\n"
        },
        "createdDate": {
          "type": "string",
          "description": "The creation date of the service mesh.\n"
        },
        "lastUpdatedDate": {
          "type": "string",
          "description": "The last update date of the service mesh.\n"
        },
        "meshOwner": {
          "type": "string",
          "description": "The AWS account ID of the service mesh's owner.\n"
        },
        "name": {
          "type": "string",
          "description": "The name to use for the service mesh. Must be between 1 and 255 characters in length.\n"
        },
        "resourceOwner": {
          "type": "string",
          "description": "The resource owner's AWS account ID.\n"
        },
        "spec": {
          "$ref": "#/types/aws:appmesh/MeshSpec:MeshSpec",
          "description": "The service mesh specification to apply.\n"
        },
        "tags": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "A map of tags to assign to the resource. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.\n"
        },
        "tagsAll": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "A map of tags assigned to the resource, including those inherited from the provider .\n"
        }
      },
      "required": [
        "arn",
        "createdDate",
        "lastUpdatedDate",
        "meshOwner",
        "name",
        "resourceOwner",
        "tagsAll"
      ],
      "inputProperties": {
        "name": {
          "type": "string",
          "description": "The name to use for the service mesh. Must be between 1 and 255 characters in length.\n",
          "willReplaceOnChanges": true
        },
        "spec": {
          "$ref": "#/types/aws:appmesh/MeshSpec:MeshSpec",
          "description": "The service mesh specification to apply.\n"
        },
        "tags": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "A map of tags to assign to the resource. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.\n"
        }
      },
      "stateInputs": {
        "description": "Input properties used for looking up and filtering Mesh resources.\n",
        "properties": {
          "arn": {
            "type": "string",
            "description": "The ARN of the service mesh.\n"
          },
          "createdDate": {
            "type": "string",
            "description": "The creation date of the service mesh.\n"
          },
          "lastUpdatedDate": {
            "type": "string",
            "description": "The last update date of the service mesh.\n"
          },
          "meshOwner": {
            "type": "string",
            "description": "The AWS account ID of the service mesh's owner.\n"
          },
          "name": {
            "type": "string",
            "description": "The name to use for the service mesh. Must be between 1 and 255 characters in length.\n",
            "willReplaceOnChanges": true
          },
          "resourceOwner": {
            "type": "string",
            "description": "The resource owner's AWS account ID.\n"
          },
          "spec": {
            "$ref": "#/types/aws:appmesh/MeshSpec:MeshSpec",
            "description": "The service mesh specification to apply.\n"
          },
          "tags": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "A map of tags to assign to the resource. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.\n"
          },
          "tagsAll": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "A map of tags assigned to the resource, including those inherited from the provider .\n"
          }
        },
        "type": "object"
      }
    },
    "aws:appmesh/virtualRouter:VirtualRouter": {
      "description": "Provides an AWS App Mesh virtual router resource.\n\n## Breaking Changes\n\nBecause of backward incompatible API changes (read [here](https://github.com/awslabs/aws-app-mesh-examples/issues/92) and [here](https://github.com/awslabs/aws-app-mesh-examples/issues/94)), `aws.appmesh.VirtualRouter` resource definitions created with provider versions earlier than v2.3.0 will need to be modified:\n\n* Remove service `service_names` from the `spec` argument.\nAWS has created a `aws.appmesh.VirtualService` resource for each of service names.\nThese resource can be imported using `import`.\n\n* Add a `listener` configuration block to the `spec` argument.\n\nThe state associated with existing resources will automatically be migrated.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as aws from \"@pulumi/aws\";\n\nconst serviceb = new aws.appmesh.VirtualRouter(\"serviceb\", {\n    meshName: aws_appmesh_mesh.simple.id,\n    spec: {\n        listener: {\n            portMapping: {\n                port: 8080,\n                protocol: \"http\",\n            },\n        },\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_aws as aws\n\nserviceb = aws.appmesh.VirtualRouter(\"serviceb\",\n    mesh_name=aws_appmesh_mesh[\"simple\"][\"id\"],\n    spec=aws.appmesh.VirtualRouterSpecArgs(\n        listener=aws.appmesh.VirtualRouterSpecListenerArgs(\n            port_mapping=aws.appmesh.VirtualRouterSpecListenerPortMappingArgs(\n                port=8080,\n                protocol=\"http\",\n            ),\n        ),\n    ))\n```\n```csharp\nusing Pulumi;\nusing Aws = Pulumi.Aws;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var serviceb = new Aws.AppMesh.VirtualRouter(\"serviceb\", new Aws.AppMesh.VirtualRouterArgs\n        {\n            MeshName = aws_appmesh_mesh.Simple.Id,\n            Spec = new Aws.AppMesh.Inputs.VirtualRouterSpecArgs\n            {\n                Listener = new Aws.AppMesh.Inputs.VirtualRouterSpecListenerArgs\n                {\n                    PortMapping = new Aws.AppMesh.Inputs.VirtualRouterSpecListenerPortMappingArgs\n                    {\n                        Port = 8080,\n                        Protocol = \"http\",\n                    },\n                },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/appmesh\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := appmesh.NewVirtualRouter(ctx, \"serviceb\", &appmesh.VirtualRouterArgs{\n\t\t\tMeshName: pulumi.Any(aws_appmesh_mesh.Simple.Id),\n\t\t\tSpec: &appmesh.VirtualRouterSpecArgs{\n\t\t\t\tListener: &appmesh.VirtualRouterSpecListenerArgs{\n\t\t\t\t\tPortMapping: &appmesh.VirtualRouterSpecListenerPortMappingArgs{\n\t\t\t\t\t\tPort:     pulumi.Int(8080),\n\t\t\t\t\t\tProtocol: pulumi.String(\"http\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.aws.appmesh.VirtualRouter;\nimport com.pulumi.aws.appmesh.VirtualRouterArgs;\nimport com.pulumi.aws.appmesh.inputs.VirtualRouterSpecArgs;\nimport com.pulumi.aws.appmesh.inputs.VirtualRouterSpecListenerArgs;\nimport com.pulumi.aws.appmesh.inputs.VirtualRouterSpecListenerPortMappingArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var serviceb = new VirtualRouter(\"serviceb\", VirtualRouterArgs.builder()        \n            .meshName(aws_appmesh_mesh.simple().id())\n            .spec(VirtualRouterSpecArgs.builder()\n                .listener(VirtualRouterSpecListenerArgs.builder()\n                    .portMapping(VirtualRouterSpecListenerPortMappingArgs.builder()\n                        .port(8080)\n                        .protocol(\"http\")\n                        .build())\n                    .build())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  serviceb:\n    type: aws:appmesh:VirtualRouter\n    properties:\n      meshName: ${aws_appmesh_mesh.simple.id}\n      spec:\n        listener:\n          portMapping:\n            port: 8080\n            protocol: http\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nApp Mesh virtual routers can be imported using `mesh_name` together with the virtual router's `name`, e.g.,\n\n```sh\n $ pulumi import aws:appmesh/virtualRouter:VirtualRouter serviceb simpleapp/serviceB\n```\n\n [1]/docs/providers/aws/index.html ",
      "properties": {
        "arn": {
          "type": "string",
          "description": "The ARN of the virtual router.\n"
        },
        "createdDate": {
          "type": "string",
          "description": "The creation date of the virtual router.\n"
        },
        "lastUpdatedDate": {
          "type": "string",
          "description": "The last update date of the virtual router.\n"
        },
        "meshName": {
          "type": "string",
          "description": "The name of the service mesh in which to create the virtual router. Must be between 1 and 255 characters in length.\n"
        },
        "meshOwner": {
          "type": "string",
          "description": "The AWS account ID of the service mesh's owner. Defaults to the account ID the [AWS provider](https://www.terraform.io/docs/providers/aws/index.html) is currently connected to.\n"
        },
        "name": {
          "type": "string",
          "description": "The name to use for the virtual router. Must be between 1 and 255 characters in length.\n"
        },
        "resourceOwner": {
          "type": "string",
          "description": "The resource owner's AWS account ID.\n"
        },
        "spec": {
          "$ref": "#/types/aws:appmesh/VirtualRouterSpec:VirtualRouterSpec",
          "description": "The virtual router specification to apply.\n"
        },
        "tags": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "A map of tags to assign to the resource. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.\n"
        },
        "tagsAll": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "A map of tags assigned to the resource, including those inherited from the provider .\n"
        }
      },
      "required": [
        "arn",
        "createdDate",
        "lastUpdatedDate",
        "meshName",
        "meshOwner",
        "name",
        "resourceOwner",
        "spec",
        "tagsAll"
      ],
      "inputProperties": {
        "meshName": {
          "type": "string",
          "description": "The name of the service mesh in which to create the virtual router. Must be between 1 and 255 characters in length.\n",
          "willReplaceOnChanges": true
        },
        "meshOwner": {
          "type": "string",
          "description": "The AWS account ID of the service mesh's owner. Defaults to the account ID the [AWS provider](https://www.terraform.io/docs/providers/aws/index.html) is currently connected to.\n",
          "willReplaceOnChanges": true
        },
        "name": {
          "type": "string",
          "description": "The name to use for the virtual router. Must be between 1 and 255 characters in length.\n",
          "willReplaceOnChanges": true
        },
        "spec": {
          "$ref": "#/types/aws:appmesh/VirtualRouterSpec:VirtualRouterSpec",
          "description": "The virtual router specification to apply.\n"
        },
        "tags": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "A map of tags to assign to the resource. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.\n"
        }
      },
      "requiredInputs": [
        "meshName",
        "spec"
      ],
      "stateInputs": {
        "description": "Input properties used for looking up and filtering VirtualRouter resources.\n",
        "properties": {
          "arn": {
            "type": "string",
            "description": "The ARN of the virtual router.\n"
          },
          "createdDate": {
            "type": "string",
            "description": "The creation date of the virtual router.\n"
          },
          "lastUpdatedDate": {
            "type": "string",
            "description": "The last update date of the virtual router.\n"
          },
          "meshName": {
            "type": "string",
            "description": "The name of the service mesh in which to create the virtual router. Must be between 1 and 255 characters in length.\n",
            "willReplaceOnChanges": true
          },
          "meshOwner": {
            "type": "string",
            "description": "The AWS account ID of the service mesh's owner. Defaults to the account ID the [AWS provider](https://www.terraform.io/docs/providers/aws/index.html) is currently connected to.\n",
            "willReplaceOnChanges": true
          },
          "name": {
            "type": "string",
            "description": "The name to use for the virtual router. Must be between 1 and 255 characters in length.\n",
            "willReplaceOnChanges": true
          },
          "resourceOwner": {
            "type": "string",
            "description": "The resource owner's AWS account ID.\n"
          },
          "spec": {
            "$ref": "#/types/aws:appmesh/VirtualRouterSpec:VirtualRouterSpec",
            "description": "The virtual router specification to apply.\n"
          },
          "tags": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "A map of tags to assign to the resource. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.\n"
          },
          "tagsAll": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "A map of tags assigned to the resource, including those inherited from the provider .\n"
          }
        },
        "type": "object"
      }
    },
    "aws:appmesh/virtualService:VirtualService": {
      "description": "Provides an AWS App Mesh virtual service resource.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n### Virtual Node Provider\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as aws from \"@pulumi/aws\";\n\nconst servicea = new aws.appmesh.VirtualService(\"servicea\", {\n    meshName: aws_appmesh_mesh.simple.id,\n    spec: {\n        provider: {\n            virtualNode: {\n                virtualNodeName: aws_appmesh_virtual_node.serviceb1.name,\n            },\n        },\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_aws as aws\n\nservicea = aws.appmesh.VirtualService(\"servicea\",\n    mesh_name=aws_appmesh_mesh[\"simple\"][\"id\"],\n    spec=aws.appmesh.VirtualServiceSpecArgs(\n        provider=aws.appmesh.VirtualServiceSpecProviderArgs(\n            virtual_node=aws.appmesh.VirtualServiceSpecProviderVirtualNodeArgs(\n                virtual_node_name=aws_appmesh_virtual_node[\"serviceb1\"][\"name\"],\n            ),\n        ),\n    ))\n```\n```csharp\nusing Pulumi;\nusing Aws = Pulumi.Aws;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var servicea = new Aws.AppMesh.VirtualService(\"servicea\", new Aws.AppMesh.VirtualServiceArgs\n        {\n            MeshName = aws_appmesh_mesh.Simple.Id,\n            Spec = new Aws.AppMesh.Inputs.VirtualServiceSpecArgs\n            {\n                Provider = new Aws.AppMesh.Inputs.VirtualServiceSpecProviderArgs\n                {\n                    VirtualNode = new Aws.AppMesh.Inputs.VirtualServiceSpecProviderVirtualNodeArgs\n                    {\n                        VirtualNodeName = aws_appmesh_virtual_node.Serviceb1.Name,\n                    },\n                },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/appmesh\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := appmesh.NewVirtualService(ctx, \"servicea\", &appmesh.VirtualServiceArgs{\n\t\t\tMeshName: pulumi.Any(aws_appmesh_mesh.Simple.Id),\n\t\t\tSpec: &appmesh.VirtualServiceSpecArgs{\n\t\t\t\tProvider: &appmesh.VirtualServiceSpecProviderArgs{\n\t\t\t\t\tVirtualNode: &appmesh.VirtualServiceSpecProviderVirtualNodeArgs{\n\t\t\t\t\t\tVirtualNodeName: pulumi.Any(aws_appmesh_virtual_node.Serviceb1.Name),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.aws.appmesh.VirtualService;\nimport com.pulumi.aws.appmesh.VirtualServiceArgs;\nimport com.pulumi.aws.appmesh.inputs.VirtualServiceSpecArgs;\nimport com.pulumi.aws.appmesh.inputs.VirtualServiceSpecProviderArgs;\nimport com.pulumi.aws.appmesh.inputs.VirtualServiceSpecProviderVirtualNodeArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var servicea = new VirtualService(\"servicea\", VirtualServiceArgs.builder()        \n            .meshName(aws_appmesh_mesh.simple().id())\n            .spec(VirtualServiceSpecArgs.builder()\n                .provider(VirtualServiceSpecProviderArgs.builder()\n                    .virtualNode(VirtualServiceSpecProviderVirtualNodeArgs.builder()\n                        .virtualNodeName(aws_appmesh_virtual_node.serviceb1().name())\n                        .build())\n                    .build())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  servicea:\n    type: aws:appmesh:VirtualService\n    properties:\n      meshName: ${aws_appmesh_mesh.simple.id}\n      spec:\n        provider:\n          virtualNode:\n            virtualNodeName: ${aws_appmesh_virtual_node.serviceb1.name}\n```\n{{% /example %}}\n{{% example %}}\n### Virtual Router Provider\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as aws from \"@pulumi/aws\";\n\nconst servicea = new aws.appmesh.VirtualService(\"servicea\", {\n    meshName: aws_appmesh_mesh.simple.id,\n    spec: {\n        provider: {\n            virtualRouter: {\n                virtualRouterName: aws_appmesh_virtual_router.serviceb.name,\n            },\n        },\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_aws as aws\n\nservicea = aws.appmesh.VirtualService(\"servicea\",\n    mesh_name=aws_appmesh_mesh[\"simple\"][\"id\"],\n    spec=aws.appmesh.VirtualServiceSpecArgs(\n        provider=aws.appmesh.VirtualServiceSpecProviderArgs(\n            virtual_router=aws.appmesh.VirtualServiceSpecProviderVirtualRouterArgs(\n                virtual_router_name=aws_appmesh_virtual_router[\"serviceb\"][\"name\"],\n            ),\n        ),\n    ))\n```\n```csharp\nusing Pulumi;\nusing Aws = Pulumi.Aws;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var servicea = new Aws.AppMesh.VirtualService(\"servicea\", new Aws.AppMesh.VirtualServiceArgs\n        {\n            MeshName = aws_appmesh_mesh.Simple.Id,\n            Spec = new Aws.AppMesh.Inputs.VirtualServiceSpecArgs\n            {\n                Provider = new Aws.AppMesh.Inputs.VirtualServiceSpecProviderArgs\n                {\n                    VirtualRouter = new Aws.AppMesh.Inputs.VirtualServiceSpecProviderVirtualRouterArgs\n                    {\n                        VirtualRouterName = aws_appmesh_virtual_router.Serviceb.Name,\n                    },\n                },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/appmesh\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := appmesh.NewVirtualService(ctx, \"servicea\", &appmesh.VirtualServiceArgs{\n\t\t\tMeshName: pulumi.Any(aws_appmesh_mesh.Simple.Id),\n\t\t\tSpec: &appmesh.VirtualServiceSpecArgs{\n\t\t\t\tProvider: &appmesh.VirtualServiceSpecProviderArgs{\n\t\t\t\t\tVirtualRouter: &appmesh.VirtualServiceSpecProviderVirtualRouterArgs{\n\t\t\t\t\t\tVirtualRouterName: pulumi.Any(aws_appmesh_virtual_router.Serviceb.Name),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.aws.appmesh.VirtualService;\nimport com.pulumi.aws.appmesh.VirtualServiceArgs;\nimport com.pulumi.aws.appmesh.inputs.VirtualServiceSpecArgs;\nimport com.pulumi.aws.appmesh.inputs.VirtualServiceSpecProviderArgs;\nimport com.pulumi.aws.appmesh.inputs.VirtualServiceSpecProviderVirtualRouterArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var servicea = new VirtualService(\"servicea\", VirtualServiceArgs.builder()        \n            .meshName(aws_appmesh_mesh.simple().id())\n            .spec(VirtualServiceSpecArgs.builder()\n                .provider(VirtualServiceSpecProviderArgs.builder()\n                    .virtualRouter(VirtualServiceSpecProviderVirtualRouterArgs.builder()\n                        .virtualRouterName(aws_appmesh_virtual_router.serviceb().name())\n                        .build())\n                    .build())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  servicea:\n    type: aws:appmesh:VirtualService\n    properties:\n      meshName: ${aws_appmesh_mesh.simple.id}\n      spec:\n        provider:\n          virtualRouter:\n            virtualRouterName: ${aws_appmesh_virtual_router.serviceb.name}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nApp Mesh virtual services can be imported using `mesh_name` together with the virtual service's `name`, e.g.,\n\n```sh\n $ pulumi import aws:appmesh/virtualService:VirtualService servicea simpleapp/servicea.simpleapp.local\n```\n\n [1]/docs/providers/aws/index.html ",
      "properties": {
        "arn": {
          "type": "string",
          "description": "The ARN of the virtual service.\n"
        },
        "createdDate": {
          "type": "string",
          "description": "The creation date of the virtual service.\n"
        },
        "lastUpdatedDate": {
          "type": "string",
          "description": "The last update date of the virtual service.\n"
        },
        "meshName": {
          "type": "string",
          "description": "The name of the service mesh in which to create the virtual service. Must be between 1 and 255 characters in length.\n"
        },
        "meshOwner": {
          "type": "string",
          "description": "The AWS account ID of the service mesh's owner. Defaults to the account ID the [AWS provider](https://www.terraform.io/docs/providers/aws/index.html) is currently connected to.\n"
        },
        "name": {
          "type": "string",
          "description": "The name to use for the virtual service. Must be between 1 and 255 characters in length.\n"
        },
        "resourceOwner": {
          "type": "string",
          "description": "The resource owner's AWS account ID.\n"
        },
        "spec": {
          "$ref": "#/types/aws:appmesh/VirtualServiceSpec:VirtualServiceSpec",
          "description": "The virtual service specification to apply.\n"
        },
        "tags": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "A map of tags to assign to the resource. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.\n"
        },
        "tagsAll": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "A map of tags assigned to the resource, including those inherited from the provider .\n"
        }
      },
      "required": [
        "arn",
        "createdDate",
        "lastUpdatedDate",
        "meshName",
        "meshOwner",
        "name",
        "resourceOwner",
        "spec",
        "tagsAll"
      ],
      "inputProperties": {
        "meshName": {
          "type": "string",
          "description": "The name of the service mesh in which to create the virtual service. Must be between 1 and 255 characters in length.\n",
          "willReplaceOnChanges": true
        },
        "meshOwner": {
          "type": "string",
          "description": "The AWS account ID of the service mesh's owner. Defaults to the account ID the [AWS provider](https://www.terraform.io/docs/providers/aws/index.html) is currently connected to.\n",
          "willReplaceOnChanges": true
        },
        "name": {
          "type": "string",
          "description": "The name to use for the virtual service. Must be between 1 and 255 characters in length.\n",
          "willReplaceOnChanges": true
        },
        "spec": {
          "$ref": "#/types/aws:appmesh/VirtualServiceSpec:VirtualServiceSpec",
          "description": "The virtual service specification to apply.\n"
        },
        "tags": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "A map of tags to assign to the resource. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.\n"
        }
      },
      "requiredInputs": [
        "meshName",
        "spec"
      ],
      "stateInputs": {
        "description": "Input properties used for looking up and filtering VirtualService resources.\n",
        "properties": {
          "arn": {
            "type": "string",
            "description": "The ARN of the virtual service.\n"
          },
          "createdDate": {
            "type": "string",
            "description": "The creation date of the virtual service.\n"
          },
          "lastUpdatedDate": {
            "type": "string",
            "description": "The last update date of the virtual service.\n"
          },
          "meshName": {
            "type": "string",
            "description": "The name of the service mesh in which to create the virtual service. Must be between 1 and 255 characters in length.\n",
            "willReplaceOnChanges": true
          },
          "meshOwner": {
            "type": "string",
            "description": "The AWS account ID of the service mesh's owner. Defaults to the account ID the [AWS provider](https://www.terraform.io/docs/providers/aws/index.html) is currently connected to.\n",
            "willReplaceOnChanges": true
          },
          "name": {
            "type": "string",
            "description": "The name to use for the virtual service. Must be between 1 and 255 characters in length.\n",
            "willReplaceOnChanges": true
          },
          "resourceOwner": {
            "type": "string",
            "description": "The resource owner's AWS account ID.\n"
          },
          "spec": {
            "$ref": "#/types/aws:appmesh/VirtualServiceSpec:VirtualServiceSpec",
            "description": "The virtual service specification to apply.\n"
          },
          "tags": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "A map of tags to assign to the resource. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.\n"
          },
          "tagsAll": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "A map of tags assigned to the resource, including those inherited from the provider .\n"
          }
        },
        "type": "object"
      }
    },
    "aws:appstream/imageBuilder:ImageBuilder": {
      "description": "Provides an AppStream image builder.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as aws from \"@pulumi/aws\";\n\nconst testFleet = new aws.appstream.ImageBuilder(\"testFleet\", {\n    description: \"Description of a ImageBuilder\",\n    displayName: \"Display name of a ImageBuilder\",\n    enableDefaultInternetAccess: false,\n    imageName: \"AppStream-WinServer2012R2-07-19-2021\",\n    instanceType: \"stream.standard.large\",\n    vpcConfig: {\n        subnetIds: [aws_subnet.example.id],\n    },\n    tags: {\n        Name: \"Example Image Builder\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_aws as aws\n\ntest_fleet = aws.appstream.ImageBuilder(\"testFleet\",\n    description=\"Description of a ImageBuilder\",\n    display_name=\"Display name of a ImageBuilder\",\n    enable_default_internet_access=False,\n    image_name=\"AppStream-WinServer2012R2-07-19-2021\",\n    instance_type=\"stream.standard.large\",\n    vpc_config=aws.appstream.ImageBuilderVpcConfigArgs(\n        subnet_ids=[aws_subnet[\"example\"][\"id\"]],\n    ),\n    tags={\n        \"Name\": \"Example Image Builder\",\n    })\n```\n```csharp\nusing Pulumi;\nusing Aws = Pulumi.Aws;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var testFleet = new Aws.AppStream.ImageBuilder(\"testFleet\", new Aws.AppStream.ImageBuilderArgs\n        {\n            Description = \"Description of a ImageBuilder\",\n            DisplayName = \"Display name of a ImageBuilder\",\n            EnableDefaultInternetAccess = false,\n            ImageName = \"AppStream-WinServer2012R2-07-19-2021\",\n            InstanceType = \"stream.standard.large\",\n            VpcConfig = new Aws.AppStream.Inputs.ImageBuilderVpcConfigArgs\n            {\n                SubnetIds = \n                {\n                    aws_subnet.Example.Id,\n                },\n            },\n            Tags = \n            {\n                { \"Name\", \"Example Image Builder\" },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/appstream\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := appstream.NewImageBuilder(ctx, \"testFleet\", &appstream.ImageBuilderArgs{\n\t\t\tDescription:                 pulumi.String(\"Description of a ImageBuilder\"),\n\t\t\tDisplayName:                 pulumi.String(\"Display name of a ImageBuilder\"),\n\t\t\tEnableDefaultInternetAccess: pulumi.Bool(false),\n\t\t\tImageName:                   pulumi.String(\"AppStream-WinServer2012R2-07-19-2021\"),\n\t\t\tInstanceType:                pulumi.String(\"stream.standard.large\"),\n\t\t\tVpcConfig: &appstream.ImageBuilderVpcConfigArgs{\n\t\t\t\tSubnetIds: pulumi.StringArray{\n\t\t\t\t\tpulumi.Any(aws_subnet.Example.Id),\n\t\t\t\t},\n\t\t\t},\n\t\t\tTags: pulumi.StringMap{\n\t\t\t\t\"Name\": pulumi.String(\"Example Image Builder\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.aws.appstream.ImageBuilder;\nimport com.pulumi.aws.appstream.ImageBuilderArgs;\nimport com.pulumi.aws.appstream.inputs.ImageBuilderVpcConfigArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var testFleet = new ImageBuilder(\"testFleet\", ImageBuilderArgs.builder()        \n            .description(\"Description of a ImageBuilder\")\n            .displayName(\"Display name of a ImageBuilder\")\n            .enableDefaultInternetAccess(false)\n            .imageName(\"AppStream-WinServer2012R2-07-19-2021\")\n            .instanceType(\"stream.standard.large\")\n            .vpcConfig(ImageBuilderVpcConfigArgs.builder()\n                .subnetIds(aws_subnet.example().id())\n                .build())\n            .tags(Map.of(\"Name\", \"Example Image Builder\"))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  testFleet:\n    type: aws:appstream:ImageBuilder\n    properties:\n      description: Description of a ImageBuilder\n      displayName: Display name of a ImageBuilder\n      enableDefaultInternetAccess: false\n      imageName: AppStream-WinServer2012R2-07-19-2021\n      instanceType: stream.standard.large\n      vpcConfig:\n        subnetIds:\n          - ${aws_subnet.example.id}\n      tags:\n        Name: Example Image Builder\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n`aws_appstream_image_builder` can be imported using the `name`, e.g.,\n\n```sh\n $ pulumi import aws:appstream/imageBuilder:ImageBuilder example imageBuilderExample\n```\n\n ",
      "properties": {
        "accessEndpoints": {
          "type": "array",
          "items": {
            "$ref": "#/types/aws:appstream/ImageBuilderAccessEndpoint:ImageBuilderAccessEndpoint"
          },
          "description": "Set of interface VPC endpoint (interface endpoint) objects. Maximum of 4. See below.\n"
        },
        "appstreamAgentVersion": {
          "type": "string",
          "description": "The version of the AppStream 2.0 agent to use for this image builder.\n"
        },
        "arn": {
          "type": "string",
          "description": "ARN of the appstream image builder.\n"
        },
        "createdTime": {
          "type": "string",
          "description": "Date and time, in UTC and extended RFC 3339 format, when the image builder was created.\n"
        },
        "description": {
          "type": "string",
          "description": "Description to display.\n"
        },
        "displayName": {
          "type": "string",
          "description": "Human-readable friendly name for the AppStream image builder.\n"
        },
        "domainJoinInfo": {
          "$ref": "#/types/aws:appstream/ImageBuilderDomainJoinInfo:ImageBuilderDomainJoinInfo",
          "description": "Configuration block for the name of the directory and organizational unit (OU) to use to join the image builder to a Microsoft Active Directory domain. See below.\n"
        },
        "enableDefaultInternetAccess": {
          "type": "boolean",
          "description": "Enables or disables default internet access for the image builder.\n"
        },
        "iamRoleArn": {
          "type": "string",
          "description": "ARN of the IAM role to apply to the image builder.\n"
        },
        "imageArn": {
          "type": "string",
          "description": "ARN of the public, private, or shared image to use.\n"
        },
        "imageName": {
          "type": "string",
          "description": "Name of the image used to create the image builder.\n"
        },
        "instanceType": {
          "type": "string",
          "description": "The instance type to use when launching the image builder.\n"
        },
        "name": {
          "type": "string",
          "description": "Unique name for the image builder.\n"
        },
        "state": {
          "type": "string",
          "description": "State of the image builder. Can be: `PENDING`, `UPDATING_AGENT`, `RUNNING`, `STOPPING`, `STOPPED`, `REBOOTING`, `SNAPSHOTTING`, `DELETING`, `FAILED`, `UPDATING`, `PENDING_QUALIFICATION`\n"
        },
        "tags": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "A map of tags to assign to the instance. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.\n"
        },
        "tagsAll": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.\n"
        },
        "vpcConfig": {
          "$ref": "#/types/aws:appstream/ImageBuilderVpcConfig:ImageBuilderVpcConfig",
          "description": "Configuration block for the VPC configuration for the image builder. See below.\n"
        }
      },
      "required": [
        "appstreamAgentVersion",
        "arn",
        "createdTime",
        "description",
        "displayName",
        "domainJoinInfo",
        "enableDefaultInternetAccess",
        "iamRoleArn",
        "imageArn",
        "imageName",
        "instanceType",
        "name",
        "state",
        "tagsAll",
        "vpcConfig"
      ],
      "inputProperties": {
        "accessEndpoints": {
          "type": "array",
          "items": {
            "$ref": "#/types/aws:appstream/ImageBuilderAccessEndpoint:ImageBuilderAccessEndpoint"
          },
          "willReplaceOnChanges": true,
          "description": "Set of interface VPC endpoint (interface endpoint) objects. Maximum of 4. See below.\n"
        },
        "appstreamAgentVersion": {
          "type": "string",
          "description": "The version of the AppStream 2.0 agent to use for this image builder.\n",
          "willReplaceOnChanges": true
        },
        "description": {
          "type": "string",
          "description": "Description to display.\n",
          "willReplaceOnChanges": true
        },
        "displayName": {
          "type": "string",
          "description": "Human-readable friendly name for the AppStream image builder.\n",
          "willReplaceOnChanges": true
        },
        "domainJoinInfo": {
          "$ref": "#/types/aws:appstream/ImageBuilderDomainJoinInfo:ImageBuilderDomainJoinInfo",
          "willReplaceOnChanges": true,
          "description": "Configuration block for the name of the directory and organizational unit (OU) to use to join the image builder to a Microsoft Active Directory domain. See below.\n"
        },
        "enableDefaultInternetAccess": {
          "type": "boolean",
          "description": "Enables or disables default internet access for the image builder.\n",
          "willReplaceOnChanges": true
        },
        "iamRoleArn": {
          "type": "string",
          "description": "ARN of the IAM role to apply to the image builder.\n",
          "willReplaceOnChanges": true
        },
        "imageArn": {
          "type": "string",
          "description": "ARN of the public, private, or shared image to use.\n",
          "willReplaceOnChanges": true
        },
        "imageName": {
          "type": "string",
          "description": "Name of the image used to create the image builder.\n",
          "willReplaceOnChanges": true
        },
        "instanceType": {
          "type": "string",
          "description": "The instance type to use when launching the image builder.\n",
          "willReplaceOnChanges": true
        },
        "name": {
          "type": "string",
          "description": "Unique name for the image builder.\n",
          "willReplaceOnChanges": true
        },
        "tags": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "A map of tags to assign to the instance. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.\n"
        },
        "vpcConfig": {
          "$ref": "#/types/aws:appstream/ImageBuilderVpcConfig:ImageBuilderVpcConfig",
          "willReplaceOnChanges": true,
          "description": "Configuration block for the VPC configuration for the image builder. See below.\n"
        }
      },
      "requiredInputs": [
        "instanceType"
      ],
      "stateInputs": {
        "description": "Input properties used for looking up and filtering ImageBuilder resources.\n",
        "properties": {
          "accessEndpoints": {
            "type": "array",
            "items": {
              "$ref": "#/types/aws:appstream/ImageBuilderAccessEndpoint:ImageBuilderAccessEndpoint"
            },
            "description": "Set of interface VPC endpoint (interface endpoint) objects. Maximum of 4. See below.\n",
            "willReplaceOnChanges": true
          },
          "appstreamAgentVersion": {
            "type": "string",
            "description": "The version of the AppStream 2.0 agent to use for this image builder.\n",
            "willReplaceOnChanges": true
          },
          "arn": {
            "type": "string",
            "description": "ARN of the appstream image builder.\n"
          },
          "createdTime": {
            "type": "string",
            "description": "Date and time, in UTC and extended RFC 3339 format, when the image builder was created.\n"
          },
          "description": {
            "type": "string",
            "description": "Description to display.\n",
            "willReplaceOnChanges": true
          },
          "displayName": {
            "type": "string",
            "description": "Human-readable friendly name for the AppStream image builder.\n",
            "willReplaceOnChanges": true
          },
          "domainJoinInfo": {
            "$ref": "#/types/aws:appstream/ImageBuilderDomainJoinInfo:ImageBuilderDomainJoinInfo",
            "description": "Configuration block for the name of the directory and organizational unit (OU) to use to join the image builder to a Microsoft Active Directory domain. See below.\n",
            "willReplaceOnChanges": true
          },
          "enableDefaultInternetAccess": {
            "type": "boolean",
            "description": "Enables or disables default internet access for the image builder.\n",
            "willReplaceOnChanges": true
          },
          "iamRoleArn": {
            "type": "string",
            "description": "ARN of the IAM role to apply to the image builder.\n",
            "willReplaceOnChanges": true
          },
          "imageArn": {
            "type": "string",
            "description": "ARN of the public, private, or shared image to use.\n",
            "willReplaceOnChanges": true
          },
          "imageName": {
            "type": "string",
            "description": "Name of the image used to create the image builder.\n",
            "willReplaceOnChanges": true
          },
          "instanceType": {
            "type": "string",
            "description": "The instance type to use when launching the image builder.\n",
            "willReplaceOnChanges": true
          },
          "name": {
            "type": "string",
            "description": "Unique name for the image builder.\n",
            "willReplaceOnChanges": true
          },
          "state": {
            "type": "string",
            "description": "State of the image builder. Can be: `PENDING`, `UPDATING_AGENT`, `RUNNING`, `STOPPING`, `STOPPED`, `REBOOTING`, `SNAPSHOTTING`, `DELETING`, `FAILED`, `UPDATING`, `PENDING_QUALIFICATION`\n"
          },
          "tags": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "A map of tags to assign to the instance. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.\n"
          },
          "tagsAll": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.\n"
          },
          "vpcConfig": {
            "$ref": "#/types/aws:appstream/ImageBuilderVpcConfig:ImageBuilderVpcConfig",
            "description": "Configuration block for the VPC configuration for the image builder. See below.\n",
            "willReplaceOnChanges": true
          }
        },
        "type": "object"
      }
    },
    "aws:appstream/stack:Stack": {
      "description": "Provides an AppStream stack.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as aws from \"@pulumi/aws\";\n\nconst example = new aws.appstream.Stack(\"example\", {\n    applicationSettings: {\n        enabled: true,\n        settingsGroup: \"SettingsGroup\",\n    },\n    description: \"stack description\",\n    displayName: \"stack display name\",\n    feedbackUrl: \"http://your-domain/feedback\",\n    redirectUrl: \"http://your-domain/redirect\",\n    storageConnectors: [{\n        connectorType: \"HOMEFOLDERS\",\n    }],\n    tags: {\n        TagName: \"TagValue\",\n    },\n    userSettings: [\n        {\n            action: \"CLIPBOARD_COPY_FROM_LOCAL_DEVICE\",\n            permission: \"ENABLED\",\n        },\n        {\n            action: \"CLIPBOARD_COPY_TO_LOCAL_DEVICE\",\n            permission: \"ENABLED\",\n        },\n        {\n            action: \"FILE_UPLOAD\",\n            permission: \"ENABLED\",\n        },\n        {\n            action: \"FILE_DOWNLOAD\",\n            permission: \"ENABLED\",\n        },\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_aws as aws\n\nexample = aws.appstream.Stack(\"example\",\n    application_settings=aws.appstream.StackApplicationSettingsArgs(\n        enabled=True,\n        settings_group=\"SettingsGroup\",\n    ),\n    description=\"stack description\",\n    display_name=\"stack display name\",\n    feedback_url=\"http://your-domain/feedback\",\n    redirect_url=\"http://your-domain/redirect\",\n    storage_connectors=[aws.appstream.StackStorageConnectorArgs(\n        connector_type=\"HOMEFOLDERS\",\n    )],\n    tags={\n        \"TagName\": \"TagValue\",\n    },\n    user_settings=[\n        aws.appstream.StackUserSettingArgs(\n            action=\"CLIPBOARD_COPY_FROM_LOCAL_DEVICE\",\n            permission=\"ENABLED\",\n        ),\n        aws.appstream.StackUserSettingArgs(\n            action=\"CLIPBOARD_COPY_TO_LOCAL_DEVICE\",\n            permission=\"ENABLED\",\n        ),\n        aws.appstream.StackUserSettingArgs(\n            action=\"FILE_UPLOAD\",\n            permission=\"ENABLED\",\n        ),\n        aws.appstream.StackUserSettingArgs(\n            action=\"FILE_DOWNLOAD\",\n            permission=\"ENABLED\",\n        ),\n    ])\n```\n```csharp\nusing Pulumi;\nusing Aws = Pulumi.Aws;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var example = new Aws.AppStream.Stack(\"example\", new Aws.AppStream.StackArgs\n        {\n            ApplicationSettings = new Aws.AppStream.Inputs.StackApplicationSettingsArgs\n            {\n                Enabled = true,\n                SettingsGroup = \"SettingsGroup\",\n            },\n            Description = \"stack description\",\n            DisplayName = \"stack display name\",\n            FeedbackUrl = \"http://your-domain/feedback\",\n            RedirectUrl = \"http://your-domain/redirect\",\n            StorageConnectors = \n            {\n                new Aws.AppStream.Inputs.StackStorageConnectorArgs\n                {\n                    ConnectorType = \"HOMEFOLDERS\",\n                },\n            },\n            Tags = \n            {\n                { \"TagName\", \"TagValue\" },\n            },\n            UserSettings = \n            {\n                new Aws.AppStream.Inputs.StackUserSettingArgs\n                {\n                    Action = \"CLIPBOARD_COPY_FROM_LOCAL_DEVICE\",\n                    Permission = \"ENABLED\",\n                },\n                new Aws.AppStream.Inputs.StackUserSettingArgs\n                {\n                    Action = \"CLIPBOARD_COPY_TO_LOCAL_DEVICE\",\n                    Permission = \"ENABLED\",\n                },\n                new Aws.AppStream.Inputs.StackUserSettingArgs\n                {\n                    Action = \"FILE_UPLOAD\",\n                    Permission = \"ENABLED\",\n                },\n                new Aws.AppStream.Inputs.StackUserSettingArgs\n                {\n                    Action = \"FILE_DOWNLOAD\",\n                    Permission = \"ENABLED\",\n                },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/appstream\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := appstream.NewStack(ctx, \"example\", &appstream.StackArgs{\n\t\t\tApplicationSettings: &appstream.StackApplicationSettingsArgs{\n\t\t\t\tEnabled:       pulumi.Bool(true),\n\t\t\t\tSettingsGroup: pulumi.String(\"SettingsGroup\"),\n\t\t\t},\n\t\t\tDescription: pulumi.String(\"stack description\"),\n\t\t\tDisplayName: pulumi.String(\"stack display name\"),\n\t\t\tFeedbackUrl: pulumi.String(\"http://your-domain/feedback\"),\n\t\t\tRedirectUrl: pulumi.String(\"http://your-domain/redirect\"),\n\t\t\tStorageConnectors: appstream.StackStorageConnectorArray{\n\t\t\t\t&appstream.StackStorageConnectorArgs{\n\t\t\t\t\tConnectorType: pulumi.String(\"HOMEFOLDERS\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tTags: pulumi.StringMap{\n\t\t\t\t\"TagName\": pulumi.String(\"TagValue\"),\n\t\t\t},\n\t\t\tUserSettings: appstream.StackUserSettingArray{\n\t\t\t\t&appstream.StackUserSettingArgs{\n\t\t\t\t\tAction:     pulumi.String(\"CLIPBOARD_COPY_FROM_LOCAL_DEVICE\"),\n\t\t\t\t\tPermission: pulumi.String(\"ENABLED\"),\n\t\t\t\t},\n\t\t\t\t&appstream.StackUserSettingArgs{\n\t\t\t\t\tAction:     pulumi.String(\"CLIPBOARD_COPY_TO_LOCAL_DEVICE\"),\n\t\t\t\t\tPermission: pulumi.String(\"ENABLED\"),\n\t\t\t\t},\n\t\t\t\t&appstream.StackUserSettingArgs{\n\t\t\t\t\tAction:     pulumi.String(\"FILE_UPLOAD\"),\n\t\t\t\t\tPermission: pulumi.String(\"ENABLED\"),\n\t\t\t\t},\n\t\t\t\t&appstream.StackUserSettingArgs{\n\t\t\t\t\tAction:     pulumi.String(\"FILE_DOWNLOAD\"),\n\t\t\t\t\tPermission: pulumi.String(\"ENABLED\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.aws.appstream.Stack;\nimport com.pulumi.aws.appstream.StackArgs;\nimport com.pulumi.aws.appstream.inputs.StackApplicationSettingsArgs;\nimport com.pulumi.aws.appstream.inputs.StackStorageConnectorArgs;\nimport com.pulumi.aws.appstream.inputs.StackUserSettingArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new Stack(\"example\", StackArgs.builder()        \n            .applicationSettings(StackApplicationSettingsArgs.builder()\n                .enabled(true)\n                .settingsGroup(\"SettingsGroup\")\n                .build())\n            .description(\"stack description\")\n            .displayName(\"stack display name\")\n            .feedbackUrl(\"http://your-domain/feedback\")\n            .redirectUrl(\"http://your-domain/redirect\")\n            .storageConnectors(StackStorageConnectorArgs.builder()\n                .connectorType(\"HOMEFOLDERS\")\n                .build())\n            .tags(Map.of(\"TagName\", \"TagValue\"))\n            .userSettings(            \n                StackUserSettingArgs.builder()\n                    .action(\"CLIPBOARD_COPY_FROM_LOCAL_DEVICE\")\n                    .permission(\"ENABLED\")\n                    .build(),\n                StackUserSettingArgs.builder()\n                    .action(\"CLIPBOARD_COPY_TO_LOCAL_DEVICE\")\n                    .permission(\"ENABLED\")\n                    .build(),\n                StackUserSettingArgs.builder()\n                    .action(\"FILE_UPLOAD\")\n                    .permission(\"ENABLED\")\n                    .build(),\n                StackUserSettingArgs.builder()\n                    .action(\"FILE_DOWNLOAD\")\n                    .permission(\"ENABLED\")\n                    .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: aws:appstream:Stack\n    properties:\n      applicationSettings:\n        enabled: true\n        settingsGroup: SettingsGroup\n      description: stack description\n      displayName: stack display name\n      feedbackUrl: http://your-domain/feedback\n      redirectUrl: http://your-domain/redirect\n      storageConnectors:\n        - connectorType: HOMEFOLDERS\n      tags:\n        TagName: TagValue\n      userSettings:\n        - action: CLIPBOARD_COPY_FROM_LOCAL_DEVICE\n          permission: ENABLED\n        - action: CLIPBOARD_COPY_TO_LOCAL_DEVICE\n          permission: ENABLED\n        - action: FILE_UPLOAD\n          permission: ENABLED\n        - action: FILE_DOWNLOAD\n          permission: ENABLED\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n`aws_appstream_stack` can be imported using the id, e.g.,\n\n```sh\n $ pulumi import aws:appstream/stack:Stack example stackID\n```\n\n ",
      "properties": {
        "accessEndpoints": {
          "type": "array",
          "items": {
            "$ref": "#/types/aws:appstream/StackAccessEndpoint:StackAccessEndpoint"
          }
        },
        "applicationSettings": {
          "$ref": "#/types/aws:appstream/StackApplicationSettings:StackApplicationSettings",
          "description": "Settings for application settings persistence.\n"
        },
        "arn": {
          "type": "string",
          "description": "ARN of the appstream stack.\n"
        },
        "createdTime": {
          "type": "string",
          "description": "Date and time, in UTC and extended RFC 3339 format, when the stack was created.\n"
        },
        "description": {
          "type": "string",
          "description": "Description for the AppStream stack.\n"
        },
        "displayName": {
          "type": "string",
          "description": "Stack name to display.\n"
        },
        "embedHostDomains": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Domains where AppStream 2.0 streaming sessions can be embedded in an iframe. You must approve the domains that you want to host embedded AppStream 2.0 streaming sessions.\n"
        },
        "feedbackUrl": {
          "type": "string",
          "description": "URL that users are redirected to after they click the Send Feedback link. If no URL is specified, no Send Feedback link is displayed. .\n"
        },
        "name": {
          "type": "string",
          "description": "Unique name for the AppStream stack.\n"
        },
        "redirectUrl": {
          "type": "string",
          "description": "URL that users are redirected to after their streaming session ends.\n"
        },
        "storageConnectors": {
          "type": "array",
          "items": {
            "$ref": "#/types/aws:appstream/StackStorageConnector:StackStorageConnector"
          },
          "description": "Configuration block for the storage connectors to enable. See below.\n"
        },
        "tags": {
          "additionalProperties": {
            "type": "string"
          }
        },
        "tagsAll": {
          "additionalProperties": {
            "type": "string"
          }
        },
        "userSettings": {
          "type": "array",
          "items": {
            "$ref": "#/types/aws:appstream/StackUserSetting:StackUserSetting"
          },
          "description": "Configuration block for the actions that are enabled or disabled for users during their streaming sessions. By default, these actions are enabled. See below.\n"
        }
      },
      "required": [
        "accessEndpoints",
        "applicationSettings",
        "arn",
        "createdTime",
        "description",
        "displayName",
        "embedHostDomains",
        "feedbackUrl",
        "name",
        "redirectUrl",
        "storageConnectors",
        "tagsAll",
        "userSettings"
      ],
      "inputProperties": {
        "accessEndpoints": {
          "type": "array",
          "items": {
            "$ref": "#/types/aws:appstream/StackAccessEndpoint:StackAccessEndpoint"
          }
        },
        "applicationSettings": {
          "$ref": "#/types/aws:appstream/StackApplicationSettings:StackApplicationSettings",
          "description": "Settings for application settings persistence.\n"
        },
        "description": {
          "type": "string",
          "description": "Description for the AppStream stack.\n",
          "willReplaceOnChanges": true
        },
        "displayName": {
          "type": "string",
          "description": "Stack name to display.\n",
          "willReplaceOnChanges": true
        },
        "embedHostDomains": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Domains where AppStream 2.0 streaming sessions can be embedded in an iframe. You must approve the domains that you want to host embedded AppStream 2.0 streaming sessions.\n"
        },
        "feedbackUrl": {
          "type": "string",
          "description": "URL that users are redirected to after they click the Send Feedback link. If no URL is specified, no Send Feedback link is displayed. .\n"
        },
        "name": {
          "type": "string",
          "description": "Unique name for the AppStream stack.\n",
          "willReplaceOnChanges": true
        },
        "redirectUrl": {
          "type": "string",
          "description": "URL that users are redirected to after their streaming session ends.\n"
        },
        "storageConnectors": {
          "type": "array",
          "items": {
            "$ref": "#/types/aws:appstream/StackStorageConnector:StackStorageConnector"
          },
          "description": "Configuration block for the storage connectors to enable. See below.\n"
        },
        "tags": {
          "willReplaceOnChanges": true,
          "additionalProperties": {
            "type": "string"
          }
        },
        "userSettings": {
          "type": "array",
          "items": {
            "$ref": "#/types/aws:appstream/StackUserSetting:StackUserSetting"
          },
          "description": "Configuration block for the actions that are enabled or disabled for users during their streaming sessions. By default, these actions are enabled. See below.\n"
        }
      },
      "stateInputs": {
        "description": "Input properties used for looking up and filtering Stack resources.\n",
        "properties": {
          "accessEndpoints": {
            "type": "array",
            "items": {
              "$ref": "#/types/aws:appstream/StackAccessEndpoint:StackAccessEndpoint"
            }
          },
          "applicationSettings": {
            "$ref": "#/types/aws:appstream/StackApplicationSettings:StackApplicationSettings",
            "description": "Settings for application settings persistence.\n"
          },
          "arn": {
            "type": "string",
            "description": "ARN of the appstream stack.\n"
          },
          "createdTime": {
            "type": "string",
            "description": "Date and time, in UTC and extended RFC 3339 format, when the stack was created.\n"
          },
          "description": {
            "type": "string",
            "description": "Description for the AppStream stack.\n",
            "willReplaceOnChanges": true
          },
          "displayName": {
            "type": "string",
            "description": "Stack name to display.\n",
            "willReplaceOnChanges": true
          },
          "embedHostDomains": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Domains where AppStream 2.0 streaming sessions can be embedded in an iframe. You must approve the domains that you want to host embedded AppStream 2.0 streaming sessions.\n"
          },
          "feedbackUrl": {
            "type": "string",
            "description": "URL that users are redirected to after they click the Send Feedback link. If no URL is specified, no Send Feedback link is displayed. .\n"
          },
          "name": {
            "type": "string",
            "description": "Unique name for the AppStream stack.\n",
            "willReplaceOnChanges": true
          },
          "redirectUrl": {
            "type": "string",
            "description": "URL that users are redirected to after their streaming session ends.\n"
          },
          "storageConnectors": {
            "type": "array",
            "items": {
              "$ref": "#/types/aws:appstream/StackStorageConnector:StackStorageConnector"
            },
            "description": "Configuration block for the storage connectors to enable. See below.\n"
          },
          "tags": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "willReplaceOnChanges": true
          },
          "tagsAll": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "userSettings": {
            "type": "array",
            "items": {
              "$ref": "#/types/aws:appstream/StackUserSetting:StackUserSetting"
            },
            "description": "Configuration block for the actions that are enabled or disabled for users during their streaming sessions. By default, these actions are enabled. See below.\n"
          }
        },
        "type": "object"
      }
    },
    "aws:appsync/function:Function": {
      "description": "Provides an AppSync Function.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as aws from \"@pulumi/aws\";\n\nconst exampleGraphQLApi = new aws.appsync.GraphQLApi(\"exampleGraphQLApi\", {\n    authenticationType: \"API_KEY\",\n    schema: `type Mutation {\n  putPost(id: ID!, title: String!): Post\n}\n\ntype Post {\n  id: ID!\n  title: String!\n}\n\ntype Query {\n  singlePost(id: ID!): Post\n}\n\nschema {\n  query: Query\n  mutation: Mutation\n}\n`,\n});\nconst exampleDataSource = new aws.appsync.DataSource(\"exampleDataSource\", {\n    apiId: exampleGraphQLApi.id,\n    name: \"example\",\n    type: \"HTTP\",\n    httpConfig: {\n        endpoint: \"http://example.com\",\n    },\n});\nconst exampleFunction = new aws.appsync.Function(\"exampleFunction\", {\n    apiId: exampleGraphQLApi.id,\n    dataSource: exampleDataSource.name,\n    name: \"example\",\n    requestMappingTemplate: `{\n    \"version\": \"2018-05-29\",\n    \"method\": \"GET\",\n    \"resourcePath\": \"/\",\n    \"params\":{\n        \"headers\": $utils.http.copyheaders($ctx.request.headers)\n    }\n}\n`,\n    responseMappingTemplate: `#if($ctx.result.statusCode == 200)\n    $ctx.result.body\n#else\n    $utils.appendError($ctx.result.body, $ctx.result.statusCode)\n#end\n`,\n});\n```\n```python\nimport pulumi\nimport pulumi_aws as aws\n\nexample_graph_ql_api = aws.appsync.GraphQLApi(\"exampleGraphQLApi\",\n    authentication_type=\"API_KEY\",\n    schema=\"\"\"type Mutation {\n  putPost(id: ID!, title: String!): Post\n}\n\ntype Post {\n  id: ID!\n  title: String!\n}\n\ntype Query {\n  singlePost(id: ID!): Post\n}\n\nschema {\n  query: Query\n  mutation: Mutation\n}\n\"\"\")\nexample_data_source = aws.appsync.DataSource(\"exampleDataSource\",\n    api_id=example_graph_ql_api.id,\n    name=\"example\",\n    type=\"HTTP\",\n    http_config=aws.appsync.DataSourceHttpConfigArgs(\n        endpoint=\"http://example.com\",\n    ))\nexample_function = aws.appsync.Function(\"exampleFunction\",\n    api_id=example_graph_ql_api.id,\n    data_source=example_data_source.name,\n    name=\"example\",\n    request_mapping_template=\"\"\"{\n    \"version\": \"2018-05-29\",\n    \"method\": \"GET\",\n    \"resourcePath\": \"/\",\n    \"params\":{\n        \"headers\": $utils.http.copyheaders($ctx.request.headers)\n    }\n}\n\"\"\",\n    response_mapping_template=\"\"\"#if($ctx.result.statusCode == 200)\n    $ctx.result.body\n#else\n    $utils.appendError($ctx.result.body, $ctx.result.statusCode)\n#end\n\"\"\")\n```\n```csharp\nusing Pulumi;\nusing Aws = Pulumi.Aws;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var exampleGraphQLApi = new Aws.AppSync.GraphQLApi(\"exampleGraphQLApi\", new Aws.AppSync.GraphQLApiArgs\n        {\n            AuthenticationType = \"API_KEY\",\n            Schema = @\"type Mutation {\n  putPost(id: ID!, title: String!): Post\n}\n\ntype Post {\n  id: ID!\n  title: String!\n}\n\ntype Query {\n  singlePost(id: ID!): Post\n}\n\nschema {\n  query: Query\n  mutation: Mutation\n}\n\",\n        });\n        var exampleDataSource = new Aws.AppSync.DataSource(\"exampleDataSource\", new Aws.AppSync.DataSourceArgs\n        {\n            ApiId = exampleGraphQLApi.Id,\n            Name = \"example\",\n            Type = \"HTTP\",\n            HttpConfig = new Aws.AppSync.Inputs.DataSourceHttpConfigArgs\n            {\n                Endpoint = \"http://example.com\",\n            },\n        });\n        var exampleFunction = new Aws.AppSync.Function(\"exampleFunction\", new Aws.AppSync.FunctionArgs\n        {\n            ApiId = exampleGraphQLApi.Id,\n            DataSource = exampleDataSource.Name,\n            Name = \"example\",\n            RequestMappingTemplate = @\"{\n    \"\"version\"\": \"\"2018-05-29\"\",\n    \"\"method\"\": \"\"GET\"\",\n    \"\"resourcePath\"\": \"\"/\"\",\n    \"\"params\"\":{\n        \"\"headers\"\": $utils.http.copyheaders($ctx.request.headers)\n    }\n}\n\",\n            ResponseMappingTemplate = @\"#if($ctx.result.statusCode == 200)\n    $ctx.result.body\n#else\n    $utils.appendError($ctx.result.body, $ctx.result.statusCode)\n#end\n\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/appsync\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleGraphQLApi, err := appsync.NewGraphQLApi(ctx, \"exampleGraphQLApi\", &appsync.GraphQLApiArgs{\n\t\t\tAuthenticationType: pulumi.String(\"API_KEY\"),\n\t\t\tSchema: pulumi.String(fmt.Sprintf(`type Mutation {\n  putPost(id: ID!, title: String!): Post\n}\n\ntype Post {\n  id: ID!\n  title: String!\n}\n\ntype Query {\n  singlePost(id: ID!): Post\n}\n\nschema {\n  query: Query\n  mutation: Mutation\n}\n`)),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleDataSource, err := appsync.NewDataSource(ctx, \"exampleDataSource\", &appsync.DataSourceArgs{\n\t\t\tApiId: exampleGraphQLApi.ID(),\n\t\t\tName:  pulumi.String(\"example\"),\n\t\t\tType:  pulumi.String(\"HTTP\"),\n\t\t\tHttpConfig: &appsync.DataSourceHttpConfigArgs{\n\t\t\t\tEndpoint: pulumi.String(\"http://example.com\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = appsync.NewFunction(ctx, \"exampleFunction\", &appsync.FunctionArgs{\n\t\t\tApiId:      exampleGraphQLApi.ID(),\n\t\t\tDataSource: exampleDataSource.Name,\n\t\t\tName:       pulumi.String(\"example\"),\n\t\t\tRequestMappingTemplate: pulumi.String(fmt.Sprintf(`{\n    \"version\": \"2018-05-29\",\n    \"method\": \"GET\",\n    \"resourcePath\": \"/\",\n    \"params\":{\n        \"headers\": $utils.http.copyheaders($ctx.request.headers)\n    }\n}\n`)),\n\t\t\tResponseMappingTemplate: pulumi.String(fmt.Sprintf(\"#if($ctx.result.statusCode == 200)\\n    $ctx.result.body\\n#else\\n    $utils.appendError($ctx.result.body, $ctx.result.statusCode)\\n#end\\n\")),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.aws.appsync.GraphQLApi;\nimport com.pulumi.aws.appsync.GraphQLApiArgs;\nimport com.pulumi.aws.appsync.DataSource;\nimport com.pulumi.aws.appsync.DataSourceArgs;\nimport com.pulumi.aws.appsync.inputs.DataSourceHttpConfigArgs;\nimport com.pulumi.aws.appsync.Function;\nimport com.pulumi.aws.appsync.FunctionArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleGraphQLApi = new GraphQLApi(\"exampleGraphQLApi\", GraphQLApiArgs.builder()        \n            .authenticationType(\"API_KEY\")\n            .schema(\"\"\"\ntype Mutation {\n  putPost(id: ID!, title: String!): Post\n}\n\ntype Post {\n  id: ID!\n  title: String!\n}\n\ntype Query {\n  singlePost(id: ID!): Post\n}\n\nschema {\n  query: Query\n  mutation: Mutation\n}\n            \"\"\")\n            .build());\n\n        var exampleDataSource = new DataSource(\"exampleDataSource\", DataSourceArgs.builder()        \n            .apiId(exampleGraphQLApi.id())\n            .name(\"example\")\n            .type(\"HTTP\")\n            .httpConfig(DataSourceHttpConfigArgs.builder()\n                .endpoint(\"http://example.com\")\n                .build())\n            .build());\n\n        var exampleFunction = new Function(\"exampleFunction\", FunctionArgs.builder()        \n            .apiId(exampleGraphQLApi.id())\n            .dataSource(exampleDataSource.name())\n            .name(\"example\")\n            .requestMappingTemplate(\"\"\"\n{\n    \"version\": \"2018-05-29\",\n    \"method\": \"GET\",\n    \"resourcePath\": \"/\",\n    \"params\":{\n        \"headers\": $utils.http.copyheaders($ctx.request.headers)\n    }\n}\n            \"\"\")\n            .responseMappingTemplate(\"\"\"\n#if($ctx.result.statusCode == 200)\n    $ctx.result.body\n#else\n    $utils.appendError($ctx.result.body, $ctx.result.statusCode)\n#end\n            \"\"\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleGraphQLApi:\n    type: aws:appsync:GraphQLApi\n    properties:\n      authenticationType: API_KEY\n      schema: |\n        type Mutation {\n          putPost(id: ID!, title: String!): Post\n        }\n\n        type Post {\n          id: ID!\n          title: String!\n        }\n\n        type Query {\n          singlePost(id: ID!): Post\n        }\n\n        schema {\n          query: Query\n          mutation: Mutation\n        }\n  exampleDataSource:\n    type: aws:appsync:DataSource\n    properties:\n      apiId: ${exampleGraphQLApi.id}\n      name: example\n      type: HTTP\n      httpConfig:\n        endpoint: http://example.com\n  exampleFunction:\n    type: aws:appsync:Function\n    properties:\n      apiId: ${exampleGraphQLApi.id}\n      dataSource: ${exampleDataSource.name}\n      name: example\n      requestMappingTemplate: |\n        {\n            \"version\": \"2018-05-29\",\n            \"method\": \"GET\",\n            \"resourcePath\": \"/\",\n            \"params\":{\n                \"headers\": $utils.http.copyheaders($ctx.request.headers)\n            }\n        }\n      responseMappingTemplate: |\n        #if($ctx.result.statusCode == 200)\n            $ctx.result.body\n        #else\n            $utils.appendError($ctx.result.body, $ctx.result.statusCode)\n        #end\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n`aws_appsync_function` can be imported using the AppSync API ID and Function ID separated by `-`, e.g.,\n\n```sh\n $ pulumi import aws:appsync/function:Function example xxxxx-yyyyy\n```\n\n ",
      "properties": {
        "apiId": {
          "type": "string",
          "description": "The ID of the associated AppSync API.\n"
        },
        "arn": {
          "type": "string",
          "description": "The ARN of the Function object.\n"
        },
        "dataSource": {
          "type": "string",
          "description": "The Function DataSource name.\n"
        },
        "description": {
          "type": "string",
          "description": "The Function description.\n"
        },
        "functionId": {
          "type": "string",
          "description": "A unique ID representing the Function object.\n"
        },
        "functionVersion": {
          "type": "string",
          "description": "The version of the request mapping template. Currently the supported value is `2018-05-29`.\n"
        },
        "maxBatchSize": {
          "type": "integer",
          "description": "The maximum batching size for a resolver. Valid values are between `0` and `2000`.\n"
        },
        "name": {
          "type": "string",
          "description": "The Function name. The function name does not have to be unique.\n"
        },
        "requestMappingTemplate": {
          "type": "string",
          "description": "The Function request mapping template. Functions support only the 2018-05-29 version of the request mapping template.\n"
        },
        "responseMappingTemplate": {
          "type": "string",
          "description": "The Function response mapping template.\n"
        },
        "syncConfig": {
          "$ref": "#/types/aws:appsync/FunctionSyncConfig:FunctionSyncConfig",
          "description": "Describes a Sync configuration for a resolver. See Sync Config.\n"
        }
      },
      "required": [
        "apiId",
        "arn",
        "dataSource",
        "functionId",
        "name",
        "requestMappingTemplate",
        "responseMappingTemplate"
      ],
      "inputProperties": {
        "apiId": {
          "type": "string",
          "description": "The ID of the associated AppSync API.\n",
          "willReplaceOnChanges": true
        },
        "dataSource": {
          "type": "string",
          "description": "The Function DataSource name.\n"
        },
        "description": {
          "type": "string",
          "description": "The Function description.\n"
        },
        "functionVersion": {
          "type": "string",
          "description": "The version of the request mapping template. Currently the supported value is `2018-05-29`.\n"
        },
        "maxBatchSize": {
          "type": "integer",
          "description": "The maximum batching size for a resolver. Valid values are between `0` and `2000`.\n"
        },
        "name": {
          "type": "string",
          "description": "The Function name. The function name does not have to be unique.\n"
        },
        "requestMappingTemplate": {
          "type": "string",
          "description": "The Function request mapping template. Functions support only the 2018-05-29 version of the request mapping template.\n"
        },
        "responseMappingTemplate": {
          "type": "string",
          "description": "The Function response mapping template.\n"
        },
        "syncConfig": {
          "$ref": "#/types/aws:appsync/FunctionSyncConfig:FunctionSyncConfig",
          "description": "Describes a Sync configuration for a resolver. See Sync Config.\n"
        }
      },
      "requiredInputs": [
        "apiId",
        "dataSource",
        "requestMappingTemplate",
        "responseMappingTemplate"
      ],
      "stateInputs": {
        "description": "Input properties used for looking up and filtering Function resources.\n",
        "properties": {
          "apiId": {
            "type": "string",
            "description": "The ID of the associated AppSync API.\n",
            "willReplaceOnChanges": true
          },
          "arn": {
            "type": "string",
            "description": "The ARN of the Function object.\n"
          },
          "dataSource": {
            "type": "string",
            "description": "The Function DataSource name.\n"
          },
          "description": {
            "type": "string",
            "description": "The Function description.\n"
          },
          "functionId": {
            "type": "string",
            "description": "A unique ID representing the Function object.\n"
          },
          "functionVersion": {
            "type": "string",
            "description": "The version of the request mapping template. Currently the supported value is `2018-05-29`.\n"
          },
          "maxBatchSize": {
            "type": "integer",
            "description": "The maximum batching size for a resolver. Valid values are between `0` and `2000`.\n"
          },
          "name": {
            "type": "string",
            "description": "The Function name. The function name does not have to be unique.\n"
          },
          "requestMappingTemplate": {
            "type": "string",
            "description": "The Function request mapping template. Functions support only the 2018-05-29 version of the request mapping template.\n"
          },
          "responseMappingTemplate": {
            "type": "string",
            "description": "The Function response mapping template.\n"
          },
          "syncConfig": {
            "$ref": "#/types/aws:appsync/FunctionSyncConfig:FunctionSyncConfig",
            "description": "Describes a Sync configuration for a resolver. See Sync Config.\n"
          }
        },
        "type": "object"
      }
    },
    "aws:appsync/resolver:Resolver": {
      "description": "Provides an AppSync Resolver.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as aws from \"@pulumi/aws\";\n\nconst testGraphQLApi = new aws.appsync.GraphQLApi(\"testGraphQLApi\", {\n    authenticationType: \"API_KEY\",\n    schema: `type Mutation {\n\tputPost(id: ID!, title: String!): Post\n}\n\ntype Post {\n\tid: ID!\n\ttitle: String!\n}\n\ntype Query {\n\tsinglePost(id: ID!): Post\n}\n\nschema {\n\tquery: Query\n\tmutation: Mutation\n}\n`,\n});\nconst testDataSource = new aws.appsync.DataSource(\"testDataSource\", {\n    apiId: testGraphQLApi.id,\n    name: \"tf_example\",\n    type: \"HTTP\",\n    httpConfig: {\n        endpoint: \"http://example.com\",\n    },\n});\n// UNIT type resolver (default)\nconst testResolver = new aws.appsync.Resolver(\"testResolver\", {\n    apiId: testGraphQLApi.id,\n    field: \"singlePost\",\n    type: \"Query\",\n    dataSource: testDataSource.name,\n    requestTemplate: `{\n    \"version\": \"2018-05-29\",\n    \"method\": \"GET\",\n    \"resourcePath\": \"/\",\n    \"params\":{\n        \"headers\": $utils.http.copyheaders($ctx.request.headers)\n    }\n}\n`,\n    responseTemplate: `#if($ctx.result.statusCode == 200)\n    $ctx.result.body\n#else\n    $utils.appendError($ctx.result.body, $ctx.result.statusCode)\n#end\n`,\n    cachingConfig: {\n        cachingKeys: [\n            `$context.identity.sub`,\n            `$context.arguments.id`,\n        ],\n        ttl: 60,\n    },\n});\n// PIPELINE type resolver\nconst mutationPipelineTest = new aws.appsync.Resolver(\"mutationPipelineTest\", {\n    type: \"Mutation\",\n    apiId: testGraphQLApi.id,\n    field: \"pipelineTest\",\n    requestTemplate: \"{}\",\n    responseTemplate: `$util.toJson($ctx.result)`,\n    kind: \"PIPELINE\",\n    pipelineConfig: {\n        functions: [\n            aws_appsync_function.test1.function_id,\n            aws_appsync_function.test2.function_id,\n            aws_appsync_function.test3.function_id,\n        ],\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_aws as aws\n\ntest_graph_ql_api = aws.appsync.GraphQLApi(\"testGraphQLApi\",\n    authentication_type=\"API_KEY\",\n    schema=\"\"\"type Mutation {\n\tputPost(id: ID!, title: String!): Post\n}\n\ntype Post {\n\tid: ID!\n\ttitle: String!\n}\n\ntype Query {\n\tsinglePost(id: ID!): Post\n}\n\nschema {\n\tquery: Query\n\tmutation: Mutation\n}\n\"\"\")\ntest_data_source = aws.appsync.DataSource(\"testDataSource\",\n    api_id=test_graph_ql_api.id,\n    name=\"tf_example\",\n    type=\"HTTP\",\n    http_config=aws.appsync.DataSourceHttpConfigArgs(\n        endpoint=\"http://example.com\",\n    ))\n# UNIT type resolver (default)\ntest_resolver = aws.appsync.Resolver(\"testResolver\",\n    api_id=test_graph_ql_api.id,\n    field=\"singlePost\",\n    type=\"Query\",\n    data_source=test_data_source.name,\n    request_template=\"\"\"{\n    \"version\": \"2018-05-29\",\n    \"method\": \"GET\",\n    \"resourcePath\": \"/\",\n    \"params\":{\n        \"headers\": $utils.http.copyheaders($ctx.request.headers)\n    }\n}\n\"\"\",\n    response_template=\"\"\"#if($ctx.result.statusCode == 200)\n    $ctx.result.body\n#else\n    $utils.appendError($ctx.result.body, $ctx.result.statusCode)\n#end\n\"\"\",\n    caching_config=aws.appsync.ResolverCachingConfigArgs(\n        caching_keys=[\n            \"$context.identity.sub\",\n            \"$context.arguments.id\",\n        ],\n        ttl=60,\n    ))\n# PIPELINE type resolver\nmutation_pipeline_test = aws.appsync.Resolver(\"mutationPipelineTest\",\n    type=\"Mutation\",\n    api_id=test_graph_ql_api.id,\n    field=\"pipelineTest\",\n    request_template=\"{}\",\n    response_template=\"$util.toJson($ctx.result)\",\n    kind=\"PIPELINE\",\n    pipeline_config=aws.appsync.ResolverPipelineConfigArgs(\n        functions=[\n            aws_appsync_function[\"test1\"][\"function_id\"],\n            aws_appsync_function[\"test2\"][\"function_id\"],\n            aws_appsync_function[\"test3\"][\"function_id\"],\n        ],\n    ))\n```\n```csharp\nusing Pulumi;\nusing Aws = Pulumi.Aws;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var testGraphQLApi = new Aws.AppSync.GraphQLApi(\"testGraphQLApi\", new Aws.AppSync.GraphQLApiArgs\n        {\n            AuthenticationType = \"API_KEY\",\n            Schema = @\"type Mutation {\n\tputPost(id: ID!, title: String!): Post\n}\n\ntype Post {\n\tid: ID!\n\ttitle: String!\n}\n\ntype Query {\n\tsinglePost(id: ID!): Post\n}\n\nschema {\n\tquery: Query\n\tmutation: Mutation\n}\n\",\n        });\n        var testDataSource = new Aws.AppSync.DataSource(\"testDataSource\", new Aws.AppSync.DataSourceArgs\n        {\n            ApiId = testGraphQLApi.Id,\n            Name = \"tf_example\",\n            Type = \"HTTP\",\n            HttpConfig = new Aws.AppSync.Inputs.DataSourceHttpConfigArgs\n            {\n                Endpoint = \"http://example.com\",\n            },\n        });\n        // UNIT type resolver (default)\n        var testResolver = new Aws.AppSync.Resolver(\"testResolver\", new Aws.AppSync.ResolverArgs\n        {\n            ApiId = testGraphQLApi.Id,\n            Field = \"singlePost\",\n            Type = \"Query\",\n            DataSource = testDataSource.Name,\n            RequestTemplate = @\"{\n    \"\"version\"\": \"\"2018-05-29\"\",\n    \"\"method\"\": \"\"GET\"\",\n    \"\"resourcePath\"\": \"\"/\"\",\n    \"\"params\"\":{\n        \"\"headers\"\": $utils.http.copyheaders($ctx.request.headers)\n    }\n}\n\",\n            ResponseTemplate = @\"#if($ctx.result.statusCode == 200)\n    $ctx.result.body\n#else\n    $utils.appendError($ctx.result.body, $ctx.result.statusCode)\n#end\n\",\n            CachingConfig = new Aws.AppSync.Inputs.ResolverCachingConfigArgs\n            {\n                CachingKeys = \n                {\n                    \"$context.identity.sub\",\n                    \"$context.arguments.id\",\n                },\n                Ttl = 60,\n            },\n        });\n        // PIPELINE type resolver\n        var mutationPipelineTest = new Aws.AppSync.Resolver(\"mutationPipelineTest\", new Aws.AppSync.ResolverArgs\n        {\n            Type = \"Mutation\",\n            ApiId = testGraphQLApi.Id,\n            Field = \"pipelineTest\",\n            RequestTemplate = \"{}\",\n            ResponseTemplate = \"$util.toJson($ctx.result)\",\n            Kind = \"PIPELINE\",\n            PipelineConfig = new Aws.AppSync.Inputs.ResolverPipelineConfigArgs\n            {\n                Functions = \n                {\n                    aws_appsync_function.Test1.Function_id,\n                    aws_appsync_function.Test2.Function_id,\n                    aws_appsync_function.Test3.Function_id,\n                },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/appsync\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttestGraphQLApi, err := appsync.NewGraphQLApi(ctx, \"testGraphQLApi\", &appsync.GraphQLApiArgs{\n\t\t\tAuthenticationType: pulumi.String(\"API_KEY\"),\n\t\t\tSchema: pulumi.String(fmt.Sprintf(`type Mutation {\n\tputPost(id: ID!, title: String!): Post\n}\n\ntype Post {\n\tid: ID!\n\ttitle: String!\n}\n\ntype Query {\n\tsinglePost(id: ID!): Post\n}\n\nschema {\n\tquery: Query\n\tmutation: Mutation\n}\n`)),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\ttestDataSource, err := appsync.NewDataSource(ctx, \"testDataSource\", &appsync.DataSourceArgs{\n\t\t\tApiId: testGraphQLApi.ID(),\n\t\t\tName:  pulumi.String(\"tf_example\"),\n\t\t\tType:  pulumi.String(\"HTTP\"),\n\t\t\tHttpConfig: &appsync.DataSourceHttpConfigArgs{\n\t\t\t\tEndpoint: pulumi.String(\"http://example.com\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = appsync.NewResolver(ctx, \"testResolver\", &appsync.ResolverArgs{\n\t\t\tApiId:      testGraphQLApi.ID(),\n\t\t\tField:      pulumi.String(\"singlePost\"),\n\t\t\tType:       pulumi.String(\"Query\"),\n\t\t\tDataSource: testDataSource.Name,\n\t\t\tRequestTemplate: pulumi.String(fmt.Sprintf(`{\n    \"version\": \"2018-05-29\",\n    \"method\": \"GET\",\n    \"resourcePath\": \"/\",\n    \"params\":{\n        \"headers\": $utils.http.copyheaders($ctx.request.headers)\n    }\n}\n`)),\n\t\t\tResponseTemplate: pulumi.String(fmt.Sprintf(\"#if($ctx.result.statusCode == 200)\\n    $ctx.result.body\\n#else\\n    $utils.appendError($ctx.result.body, $ctx.result.statusCode)\\n#end\\n\")),\n\t\t\tCachingConfig: &appsync.ResolverCachingConfigArgs{\n\t\t\t\tCachingKeys: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(fmt.Sprintf(\"$context.identity.sub\")),\n\t\t\t\t\tpulumi.String(fmt.Sprintf(\"$context.arguments.id\")),\n\t\t\t\t},\n\t\t\t\tTtl: pulumi.Int(60),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = appsync.NewResolver(ctx, \"mutationPipelineTest\", &appsync.ResolverArgs{\n\t\t\tType:             pulumi.String(\"Mutation\"),\n\t\t\tApiId:            testGraphQLApi.ID(),\n\t\t\tField:            pulumi.String(\"pipelineTest\"),\n\t\t\tRequestTemplate:  pulumi.String(\"{}\"),\n\t\t\tResponseTemplate: pulumi.String(fmt.Sprintf(\"$util.toJson($ctx.result)\")),\n\t\t\tKind:             pulumi.String(\"PIPELINE\"),\n\t\t\tPipelineConfig: &appsync.ResolverPipelineConfigArgs{\n\t\t\t\tFunctions: pulumi.StringArray{\n\t\t\t\t\tpulumi.Any(aws_appsync_function.Test1.Function_id),\n\t\t\t\t\tpulumi.Any(aws_appsync_function.Test2.Function_id),\n\t\t\t\t\tpulumi.Any(aws_appsync_function.Test3.Function_id),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.aws.appsync.GraphQLApi;\nimport com.pulumi.aws.appsync.GraphQLApiArgs;\nimport com.pulumi.aws.appsync.DataSource;\nimport com.pulumi.aws.appsync.DataSourceArgs;\nimport com.pulumi.aws.appsync.inputs.DataSourceHttpConfigArgs;\nimport com.pulumi.aws.appsync.Resolver;\nimport com.pulumi.aws.appsync.ResolverArgs;\nimport com.pulumi.aws.appsync.inputs.ResolverCachingConfigArgs;\nimport com.pulumi.aws.appsync.inputs.ResolverPipelineConfigArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var testGraphQLApi = new GraphQLApi(\"testGraphQLApi\", GraphQLApiArgs.builder()        \n            .authenticationType(\"API_KEY\")\n            .schema(\"\"\"\ntype Mutation {\n\tputPost(id: ID!, title: String!): Post\n}\n\ntype Post {\n\tid: ID!\n\ttitle: String!\n}\n\ntype Query {\n\tsinglePost(id: ID!): Post\n}\n\nschema {\n\tquery: Query\n\tmutation: Mutation\n}\n            \"\"\")\n            .build());\n\n        var testDataSource = new DataSource(\"testDataSource\", DataSourceArgs.builder()        \n            .apiId(testGraphQLApi.id())\n            .name(\"tf_example\")\n            .type(\"HTTP\")\n            .httpConfig(DataSourceHttpConfigArgs.builder()\n                .endpoint(\"http://example.com\")\n                .build())\n            .build());\n\n        var testResolver = new Resolver(\"testResolver\", ResolverArgs.builder()        \n            .apiId(testGraphQLApi.id())\n            .field(\"singlePost\")\n            .type(\"Query\")\n            .dataSource(testDataSource.name())\n            .requestTemplate(\"\"\"\n{\n    \"version\": \"2018-05-29\",\n    \"method\": \"GET\",\n    \"resourcePath\": \"/\",\n    \"params\":{\n        \"headers\": $utils.http.copyheaders($ctx.request.headers)\n    }\n}\n            \"\"\")\n            .responseTemplate(\"\"\"\n#if($ctx.result.statusCode == 200)\n    $ctx.result.body\n#else\n    $utils.appendError($ctx.result.body, $ctx.result.statusCode)\n#end\n            \"\"\")\n            .cachingConfig(ResolverCachingConfigArgs.builder()\n                .cachingKeys(                \n                    \"$context.identity.sub\",\n                    \"$context.arguments.id\")\n                .ttl(60)\n                .build())\n            .build());\n\n        var mutationPipelineTest = new Resolver(\"mutationPipelineTest\", ResolverArgs.builder()        \n            .type(\"Mutation\")\n            .apiId(testGraphQLApi.id())\n            .field(\"pipelineTest\")\n            .requestTemplate(\"{}\")\n            .responseTemplate(\"$util.toJson($ctx.result)\")\n            .kind(\"PIPELINE\")\n            .pipelineConfig(ResolverPipelineConfigArgs.builder()\n                .functions(                \n                    aws_appsync_function.test1().function_id(),\n                    aws_appsync_function.test2().function_id(),\n                    aws_appsync_function.test3().function_id())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  testGraphQLApi:\n    type: aws:appsync:GraphQLApi\n    properties:\n      authenticationType: API_KEY\n      schema: |\n        type Mutation {\n        \tputPost(id: ID!, title: String!): Post\n        }\n\n        type Post {\n        \tid: ID!\n        \ttitle: String!\n        }\n\n        type Query {\n        \tsinglePost(id: ID!): Post\n        }\n\n        schema {\n        \tquery: Query\n        \tmutation: Mutation\n        }\n  testDataSource:\n    type: aws:appsync:DataSource\n    properties:\n      apiId: ${testGraphQLApi.id}\n      name: tf_example\n      type: HTTP\n      httpConfig:\n        endpoint: http://example.com\n  # UNIT type resolver (default)\n  testResolver:\n    type: aws:appsync:Resolver\n    properties:\n      apiId: ${testGraphQLApi.id}\n      field: singlePost\n      type: Query\n      dataSource: ${testDataSource.name}\n      requestTemplate: |\n        {\n            \"version\": \"2018-05-29\",\n            \"method\": \"GET\",\n            \"resourcePath\": \"/\",\n            \"params\":{\n                \"headers\": $utils.http.copyheaders($ctx.request.headers)\n            }\n        }\n      responseTemplate: |\n        #if($ctx.result.statusCode == 200)\n            $ctx.result.body\n        #else\n            $utils.appendError($ctx.result.body, $ctx.result.statusCode)\n        #end\n      cachingConfig:\n        cachingKeys:\n          - $context.identity.sub\n          - $context.arguments.id\n        ttl: 60\n  # PIPELINE type resolver\n  mutationPipelineTest:\n    type: aws:appsync:Resolver\n    properties:\n      type: Mutation\n      apiId: ${testGraphQLApi.id}\n      field: pipelineTest\n      requestTemplate: '{}'\n      responseTemplate: $util.toJson($ctx.result)\n      kind: PIPELINE\n      pipelineConfig:\n        functions:\n          - ${aws_appsync_function.test1.function_id}\n          - ${aws_appsync_function.test2.function_id}\n          - ${aws_appsync_function.test3.function_id}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n`aws_appsync_resolver` can be imported with their `api_id`, a hyphen, `type`, a hypen and `field` e.g.,\n\n```sh\n $ pulumi import aws:appsync/resolver:Resolver example abcdef123456-exampleType-exampleField\n```\n\n ",
      "properties": {
        "apiId": {
          "type": "string",
          "description": "The API ID for the GraphQL API.\n"
        },
        "arn": {
          "type": "string",
          "description": "The ARN\n"
        },
        "cachingConfig": {
          "$ref": "#/types/aws:appsync/ResolverCachingConfig:ResolverCachingConfig",
          "description": "The CachingConfig.\n"
        },
        "dataSource": {
          "type": "string",
          "description": "The DataSource name.\n"
        },
        "field": {
          "type": "string",
          "description": "The field name from the schema defined in the GraphQL API.\n"
        },
        "kind": {
          "type": "string",
          "description": "The resolver type. Valid values are `UNIT` and `PIPELINE`.\n"
        },
        "maxBatchSize": {
          "type": "integer",
          "description": "The maximum batching size for a resolver. Valid values are between `0` and `2000`.\n"
        },
        "pipelineConfig": {
          "$ref": "#/types/aws:appsync/ResolverPipelineConfig:ResolverPipelineConfig",
          "description": "The PipelineConfig.\n"
        },
        "requestTemplate": {
          "type": "string",
          "description": "The request mapping template for UNIT resolver or 'before mapping template' for PIPELINE resolver. Required for non-Lambda resolvers.\n"
        },
        "responseTemplate": {
          "type": "string",
          "description": "The response mapping template for UNIT resolver or 'after mapping template' for PIPELINE resolver. Required for non-Lambda resolvers.\n"
        },
        "syncConfig": {
          "$ref": "#/types/aws:appsync/ResolverSyncConfig:ResolverSyncConfig",
          "description": "Describes a Sync configuration for a resolver. See Sync Config.\n"
        },
        "type": {
          "type": "string",
          "description": "The type name from the schema defined in the GraphQL API.\n"
        }
      },
      "required": [
        "apiId",
        "arn",
        "field",
        "type"
      ],
      "inputProperties": {
        "apiId": {
          "type": "string",
          "description": "The API ID for the GraphQL API.\n",
          "willReplaceOnChanges": true
        },
        "cachingConfig": {
          "$ref": "#/types/aws:appsync/ResolverCachingConfig:ResolverCachingConfig",
          "description": "The CachingConfig.\n"
        },
        "dataSource": {
          "type": "string",
          "description": "The DataSource name.\n"
        },
        "field": {
          "type": "string",
          "description": "The field name from the schema defined in the GraphQL API.\n",
          "willReplaceOnChanges": true
        },
        "kind": {
          "type": "string",
          "description": "The resolver type. Valid values are `UNIT` and `PIPELINE`.\n"
        },
        "maxBatchSize": {
          "type": "integer",
          "description": "The maximum batching size for a resolver. Valid values are between `0` and `2000`.\n"
        },
        "pipelineConfig": {
          "$ref": "#/types/aws:appsync/ResolverPipelineConfig:ResolverPipelineConfig",
          "description": "The PipelineConfig.\n"
        },
        "requestTemplate": {
          "type": "string",
          "description": "The request mapping template for UNIT resolver or 'before mapping template' for PIPELINE resolver. Required for non-Lambda resolvers.\n"
        },
        "responseTemplate": {
          "type": "string",
          "description": "The response mapping template for UNIT resolver or 'after mapping template' for PIPELINE resolver. Required for non-Lambda resolvers.\n"
        },
        "syncConfig": {
          "$ref": "#/types/aws:appsync/ResolverSyncConfig:ResolverSyncConfig",
          "description": "Describes a Sync configuration for a resolver. See Sync Config.\n"
        },
        "type": {
          "type": "string",
          "description": "The type name from the schema defined in the GraphQL API.\n",
          "willReplaceOnChanges": true
        }
      },
      "requiredInputs": [
        "apiId",
        "field",
        "type"
      ],
      "stateInputs": {
        "description": "Input properties used for looking up and filtering Resolver resources.\n",
        "properties": {
          "apiId": {
            "type": "string",
            "description": "The API ID for the GraphQL API.\n",
            "willReplaceOnChanges": true
          },
          "arn": {
            "type": "string",
            "description": "The ARN\n"
          },
          "cachingConfig": {
            "$ref": "#/types/aws:appsync/ResolverCachingConfig:ResolverCachingConfig",
            "description": "The CachingConfig.\n"
          },
          "dataSource": {
            "type": "string",
            "description": "The DataSource name.\n"
          },
          "field": {
            "type": "string",
            "description": "The field name from the schema defined in the GraphQL API.\n",
            "willReplaceOnChanges": true
          },
          "kind": {
            "type": "string",
            "description": "The resolver type. Valid values are `UNIT` and `PIPELINE`.\n"
          },
          "maxBatchSize": {
            "type": "integer",
            "description": "The maximum batching size for a resolver. Valid values are between `0` and `2000`.\n"
          },
          "pipelineConfig": {
            "$ref": "#/types/aws:appsync/ResolverPipelineConfig:ResolverPipelineConfig",
            "description": "The PipelineConfig.\n"
          },
          "requestTemplate": {
            "type": "string",
            "description": "The request mapping template for UNIT resolver or 'before mapping template' for PIPELINE resolver. Required for non-Lambda resolvers.\n"
          },
          "responseTemplate": {
            "type": "string",
            "description": "The response mapping template for UNIT resolver or 'after mapping template' for PIPELINE resolver. Required for non-Lambda resolvers.\n"
          },
          "syncConfig": {
            "$ref": "#/types/aws:appsync/ResolverSyncConfig:ResolverSyncConfig",
            "description": "Describes a Sync configuration for a resolver. See Sync Config.\n"
          },
          "type": {
            "type": "string",
            "description": "The type name from the schema defined in the GraphQL API.\n",
            "willReplaceOnChanges": true
          }
        },
        "type": "object"
      }
    },
    "aws:athena/workgroup:Workgroup": {
      "description": "Provides an Athena Workgroup.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as aws from \"@pulumi/aws\";\n\nconst example = new aws.athena.Workgroup(\"example\", {configuration: {\n    enforceWorkgroupConfiguration: true,\n    publishCloudwatchMetricsEnabled: true,\n    resultConfiguration: {\n        outputLocation: `s3://${aws_s3_bucket.example.bucket}/output/`,\n        encryptionConfiguration: {\n            encryptionOption: \"SSE_KMS\",\n            kmsKeyArn: aws_kms_key.example.arn,\n        },\n    },\n}});\n```\n```python\nimport pulumi\nimport pulumi_aws as aws\n\nexample = aws.athena.Workgroup(\"example\", configuration=aws.athena.WorkgroupConfigurationArgs(\n    enforce_workgroup_configuration=True,\n    publish_cloudwatch_metrics_enabled=True,\n    result_configuration=aws.athena.WorkgroupConfigurationResultConfigurationArgs(\n        output_location=f\"s3://{aws_s3_bucket['example']['bucket']}/output/\",\n        encryption_configuration=aws.athena.WorkgroupConfigurationResultConfigurationEncryptionConfigurationArgs(\n            encryption_option=\"SSE_KMS\",\n            kms_key_arn=aws_kms_key[\"example\"][\"arn\"],\n        ),\n    ),\n))\n```\n```csharp\nusing Pulumi;\nusing Aws = Pulumi.Aws;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var example = new Aws.Athena.Workgroup(\"example\", new Aws.Athena.WorkgroupArgs\n        {\n            Configuration = new Aws.Athena.Inputs.WorkgroupConfigurationArgs\n            {\n                EnforceWorkgroupConfiguration = true,\n                PublishCloudwatchMetricsEnabled = true,\n                ResultConfiguration = new Aws.Athena.Inputs.WorkgroupConfigurationResultConfigurationArgs\n                {\n                    OutputLocation = $\"s3://{aws_s3_bucket.Example.Bucket}/output/\",\n                    EncryptionConfiguration = new Aws.Athena.Inputs.WorkgroupConfigurationResultConfigurationEncryptionConfigurationArgs\n                    {\n                        EncryptionOption = \"SSE_KMS\",\n                        KmsKeyArn = aws_kms_key.Example.Arn,\n                    },\n                },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/athena\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := athena.NewWorkgroup(ctx, \"example\", &athena.WorkgroupArgs{\n\t\t\tConfiguration: &athena.WorkgroupConfigurationArgs{\n\t\t\t\tEnforceWorkgroupConfiguration:   pulumi.Bool(true),\n\t\t\t\tPublishCloudwatchMetricsEnabled: pulumi.Bool(true),\n\t\t\t\tResultConfiguration: &athena.WorkgroupConfigurationResultConfigurationArgs{\n\t\t\t\t\tOutputLocation: pulumi.String(fmt.Sprintf(\"s3://%v/output/\", aws_s3_bucket.Example.Bucket)),\n\t\t\t\t\tEncryptionConfiguration: &athena.WorkgroupConfigurationResultConfigurationEncryptionConfigurationArgs{\n\t\t\t\t\t\tEncryptionOption: pulumi.String(\"SSE_KMS\"),\n\t\t\t\t\t\tKmsKeyArn:        pulumi.Any(aws_kms_key.Example.Arn),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.aws.athena.Workgroup;\nimport com.pulumi.aws.athena.WorkgroupArgs;\nimport com.pulumi.aws.athena.inputs.WorkgroupConfigurationArgs;\nimport com.pulumi.aws.athena.inputs.WorkgroupConfigurationResultConfigurationArgs;\nimport com.pulumi.aws.athena.inputs.WorkgroupConfigurationResultConfigurationEncryptionConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new Workgroup(\"example\", WorkgroupArgs.builder()        \n            .configuration(WorkgroupConfigurationArgs.builder()\n                .enforceWorkgroupConfiguration(true)\n                .publishCloudwatchMetricsEnabled(true)\n                .resultConfiguration(WorkgroupConfigurationResultConfigurationArgs.builder()\n                    .outputLocation(String.format(\"s3://%s/output/\", aws_s3_bucket.example().bucket()))\n                    .encryptionConfiguration(WorkgroupConfigurationResultConfigurationEncryptionConfigurationArgs.builder()\n                        .encryptionOption(\"SSE_KMS\")\n                        .kmsKeyArn(aws_kms_key.example().arn())\n                        .build())\n                    .build())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: aws:athena:Workgroup\n    properties:\n      configuration:\n        enforceWorkgroupConfiguration: true\n        publishCloudwatchMetricsEnabled: true\n        resultConfiguration:\n          outputLocation: s3://${aws_s3_bucket.example.bucket}/output/\n          encryptionConfiguration:\n            encryptionOption: SSE_KMS\n            kmsKeyArn: ${aws_kms_key.example.arn}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nAthena Workgroups can be imported using their name, e.g.,\n\n```sh\n $ pulumi import aws:athena/workgroup:Workgroup example example\n```\n\n ",
      "properties": {
        "arn": {
          "type": "string",
          "description": "Amazon Resource Name (ARN) of the workgroup\n"
        },
        "configuration": {
          "$ref": "#/types/aws:athena/WorkgroupConfiguration:WorkgroupConfiguration",
          "description": "Configuration block with various settings for the workgroup. Documented below.\n"
        },
        "description": {
          "type": "string",
          "description": "Description of the workgroup.\n"
        },
        "forceDestroy": {
          "type": "boolean",
          "description": "The option to delete the workgroup and its contents even if the workgroup contains any named queries.\n"
        },
        "name": {
          "type": "string",
          "description": "Name of the workgroup.\n"
        },
        "state": {
          "type": "string",
          "description": "State of the workgroup. Valid values are `DISABLED` or `ENABLED`. Defaults to `ENABLED`.\n"
        },
        "tags": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Key-value map of resource tags for the workgroup. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.\n"
        },
        "tagsAll": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "A map of tags assigned to the resource, including those inherited from the provider .\n"
        }
      },
      "required": [
        "arn",
        "name",
        "tagsAll"
      ],
      "inputProperties": {
        "configuration": {
          "$ref": "#/types/aws:athena/WorkgroupConfiguration:WorkgroupConfiguration",
          "description": "Configuration block with various settings for the workgroup. Documented below.\n"
        },
        "description": {
          "type": "string",
          "description": "Description of the workgroup.\n"
        },
        "forceDestroy": {
          "type": "boolean",
          "description": "The option to delete the workgroup and its contents even if the workgroup contains any named queries.\n"
        },
        "name": {
          "type": "string",
          "description": "Name of the workgroup.\n",
          "willReplaceOnChanges": true
        },
        "state": {
          "type": "string",
          "description": "State of the workgroup. Valid values are `DISABLED` or `ENABLED`. Defaults to `ENABLED`.\n"
        },
        "tags": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Key-value map of resource tags for the workgroup. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.\n"
        }
      },
      "stateInputs": {
        "description": "Input properties used for looking up and filtering Workgroup resources.\n",
        "properties": {
          "arn": {
            "type": "string",
            "description": "Amazon Resource Name (ARN) of the workgroup\n"
          },
          "configuration": {
            "$ref": "#/types/aws:athena/WorkgroupConfiguration:WorkgroupConfiguration",
            "description": "Configuration block with various settings for the workgroup. Documented below.\n"
          },
          "description": {
            "type": "string",
            "description": "Description of the workgroup.\n"
          },
          "forceDestroy": {
            "type": "boolean",
            "description": "The option to delete the workgroup and its contents even if the workgroup contains any named queries.\n"
          },
          "name": {
            "type": "string",
            "description": "Name of the workgroup.\n",
            "willReplaceOnChanges": true
          },
          "state": {
            "type": "string",
            "description": "State of the workgroup. Valid values are `DISABLED` or `ENABLED`. Defaults to `ENABLED`.\n"
          },
          "tags": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Key-value map of resource tags for the workgroup. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.\n"
          },
          "tagsAll": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "A map of tags assigned to the resource, including those inherited from the provider .\n"
          }
        },
        "type": "object"
      }
    },
    "aws:backup/framework:Framework": {
      "description": "Provides an AWS Backup Framework resource.\n\n> **Note:** For the Deployment Status of the Framework to be successful, please turn on resource tracking to enable AWS Config recording to track configuration changes of your backup resources. This can be done from the AWS Console.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as aws from \"@pulumi/aws\";\n\nconst example = new aws.backup.Framework(\"Example\", {\n    controls: [\n        {\n            inputParameters: [{\n                name: \"requiredRetentionDays\",\n                value: \"35\",\n            }],\n            name: \"BACKUP_RECOVERY_POINT_MINIMUM_RETENTION_CHECK\",\n        },\n        {\n            inputParameters: [\n                {\n                    name: \"requiredFrequencyUnit\",\n                    value: \"hours\",\n                },\n                {\n                    name: \"requiredRetentionDays\",\n                    value: \"35\",\n                },\n                {\n                    name: \"requiredFrequencyValue\",\n                    value: \"1\",\n                },\n            ],\n            name: \"BACKUP_PLAN_MIN_FREQUENCY_AND_MIN_RETENTION_CHECK\",\n        },\n        {\n            name: \"BACKUP_RECOVERY_POINT_ENCRYPTED\",\n        },\n        {\n            name: \"BACKUP_RESOURCES_PROTECTED_BY_BACKUP_PLAN\",\n            scope: {\n                complianceResourceTypes: [\"EBS\"],\n            },\n        },\n        {\n            name: \"BACKUP_RECOVERY_POINT_MANUAL_DELETION_DISABLED\",\n        },\n    ],\n    description: \"this is an example framework\",\n    tags: {\n        Name: \"Example Framework\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_aws as aws\n\nexample = aws.backup.Framework(\"example\",\n    controls=[\n        aws.backup.FrameworkControlArgs(\n            input_parameters=[aws.backup.FrameworkControlInputParameterArgs(\n                name=\"requiredRetentionDays\",\n                value=\"35\",\n            )],\n            name=\"BACKUP_RECOVERY_POINT_MINIMUM_RETENTION_CHECK\",\n        ),\n        aws.backup.FrameworkControlArgs(\n            input_parameters=[\n                aws.backup.FrameworkControlInputParameterArgs(\n                    name=\"requiredFrequencyUnit\",\n                    value=\"hours\",\n                ),\n                aws.backup.FrameworkControlInputParameterArgs(\n                    name=\"requiredRetentionDays\",\n                    value=\"35\",\n                ),\n                aws.backup.FrameworkControlInputParameterArgs(\n                    name=\"requiredFrequencyValue\",\n                    value=\"1\",\n                ),\n            ],\n            name=\"BACKUP_PLAN_MIN_FREQUENCY_AND_MIN_RETENTION_CHECK\",\n        ),\n        aws.backup.FrameworkControlArgs(\n            name=\"BACKUP_RECOVERY_POINT_ENCRYPTED\",\n        ),\n        aws.backup.FrameworkControlArgs(\n            name=\"BACKUP_RESOURCES_PROTECTED_BY_BACKUP_PLAN\",\n            scope=aws.backup.FrameworkControlScopeArgs(\n                compliance_resource_types=[\"EBS\"],\n            ),\n        ),\n        aws.backup.FrameworkControlArgs(\n            name=\"BACKUP_RECOVERY_POINT_MANUAL_DELETION_DISABLED\",\n        ),\n    ],\n    description=\"this is an example framework\",\n    tags={\n        \"Name\": \"Example Framework\",\n    })\n```\n```csharp\nusing Pulumi;\nusing Aws = Pulumi.Aws;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var example = new Aws.Backup.Framework(\"example\", new Aws.Backup.FrameworkArgs\n        {\n            Controls = \n            {\n                new Aws.Backup.Inputs.FrameworkControlArgs\n                {\n                    InputParameters = \n                    {\n                        new Aws.Backup.Inputs.FrameworkControlInputParameterArgs\n                        {\n                            Name = \"requiredRetentionDays\",\n                            Value = \"35\",\n                        },\n                    },\n                    Name = \"BACKUP_RECOVERY_POINT_MINIMUM_RETENTION_CHECK\",\n                },\n                new Aws.Backup.Inputs.FrameworkControlArgs\n                {\n                    InputParameters = \n                    {\n                        new Aws.Backup.Inputs.FrameworkControlInputParameterArgs\n                        {\n                            Name = \"requiredFrequencyUnit\",\n                            Value = \"hours\",\n                        },\n                        new Aws.Backup.Inputs.FrameworkControlInputParameterArgs\n                        {\n                            Name = \"requiredRetentionDays\",\n                            Value = \"35\",\n                        },\n                        new Aws.Backup.Inputs.FrameworkControlInputParameterArgs\n                        {\n                            Name = \"requiredFrequencyValue\",\n                            Value = \"1\",\n                        },\n                    },\n                    Name = \"BACKUP_PLAN_MIN_FREQUENCY_AND_MIN_RETENTION_CHECK\",\n                },\n                new Aws.Backup.Inputs.FrameworkControlArgs\n                {\n                    Name = \"BACKUP_RECOVERY_POINT_ENCRYPTED\",\n                },\n                new Aws.Backup.Inputs.FrameworkControlArgs\n                {\n                    Name = \"BACKUP_RESOURCES_PROTECTED_BY_BACKUP_PLAN\",\n                    Scope = new Aws.Backup.Inputs.FrameworkControlScopeArgs\n                    {\n                        ComplianceResourceTypes = \n                        {\n                            \"EBS\",\n                        },\n                    },\n                },\n                new Aws.Backup.Inputs.FrameworkControlArgs\n                {\n                    Name = \"BACKUP_RECOVERY_POINT_MANUAL_DELETION_DISABLED\",\n                },\n            },\n            Description = \"this is an example framework\",\n            Tags = \n            {\n                { \"Name\", \"Example Framework\" },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/backup\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := backup.NewFramework(ctx, \"example\", &backup.FrameworkArgs{\n\t\t\tControls: backup.FrameworkControlArray{\n\t\t\t\t&backup.FrameworkControlArgs{\n\t\t\t\t\tInputParameters: backup.FrameworkControlInputParameterArray{\n\t\t\t\t\t\t&backup.FrameworkControlInputParameterArgs{\n\t\t\t\t\t\t\tName:  pulumi.String(\"requiredRetentionDays\"),\n\t\t\t\t\t\t\tValue: pulumi.String(\"35\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tName: pulumi.String(\"BACKUP_RECOVERY_POINT_MINIMUM_RETENTION_CHECK\"),\n\t\t\t\t},\n\t\t\t\t&backup.FrameworkControlArgs{\n\t\t\t\t\tInputParameters: backup.FrameworkControlInputParameterArray{\n\t\t\t\t\t\t&backup.FrameworkControlInputParameterArgs{\n\t\t\t\t\t\t\tName:  pulumi.String(\"requiredFrequencyUnit\"),\n\t\t\t\t\t\t\tValue: pulumi.String(\"hours\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t&backup.FrameworkControlInputParameterArgs{\n\t\t\t\t\t\t\tName:  pulumi.String(\"requiredRetentionDays\"),\n\t\t\t\t\t\t\tValue: pulumi.String(\"35\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t&backup.FrameworkControlInputParameterArgs{\n\t\t\t\t\t\t\tName:  pulumi.String(\"requiredFrequencyValue\"),\n\t\t\t\t\t\t\tValue: pulumi.String(\"1\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tName: pulumi.String(\"BACKUP_PLAN_MIN_FREQUENCY_AND_MIN_RETENTION_CHECK\"),\n\t\t\t\t},\n\t\t\t\t&backup.FrameworkControlArgs{\n\t\t\t\t\tName: pulumi.String(\"BACKUP_RECOVERY_POINT_ENCRYPTED\"),\n\t\t\t\t},\n\t\t\t\t&backup.FrameworkControlArgs{\n\t\t\t\t\tName: pulumi.String(\"BACKUP_RESOURCES_PROTECTED_BY_BACKUP_PLAN\"),\n\t\t\t\t\tScope: &backup.FrameworkControlScopeArgs{\n\t\t\t\t\t\tComplianceResourceTypes: pulumi.StringArray{\n\t\t\t\t\t\t\tpulumi.String(\"EBS\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t&backup.FrameworkControlArgs{\n\t\t\t\t\tName: pulumi.String(\"BACKUP_RECOVERY_POINT_MANUAL_DELETION_DISABLED\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tDescription: pulumi.String(\"this is an example framework\"),\n\t\t\tTags: pulumi.StringMap{\n\t\t\t\t\"Name\": pulumi.String(\"Example Framework\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.aws.backup.Framework;\nimport com.pulumi.aws.backup.FrameworkArgs;\nimport com.pulumi.aws.backup.inputs.FrameworkControlArgs;\nimport com.pulumi.aws.backup.inputs.FrameworkControlScopeArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new Framework(\"example\", FrameworkArgs.builder()        \n            .controls(            \n                FrameworkControlArgs.builder()\n                    .inputParameters(FrameworkControlInputParameterArgs.builder()\n                        .name(\"requiredRetentionDays\")\n                        .value(\"35\")\n                        .build())\n                    .name(\"BACKUP_RECOVERY_POINT_MINIMUM_RETENTION_CHECK\")\n                    .build(),\n                FrameworkControlArgs.builder()\n                    .inputParameters(                    \n                        FrameworkControlInputParameterArgs.builder()\n                            .name(\"requiredFrequencyUnit\")\n                            .value(\"hours\")\n                            .build(),\n                        FrameworkControlInputParameterArgs.builder()\n                            .name(\"requiredRetentionDays\")\n                            .value(\"35\")\n                            .build(),\n                        FrameworkControlInputParameterArgs.builder()\n                            .name(\"requiredFrequencyValue\")\n                            .value(\"1\")\n                            .build())\n                    .name(\"BACKUP_PLAN_MIN_FREQUENCY_AND_MIN_RETENTION_CHECK\")\n                    .build(),\n                FrameworkControlArgs.builder()\n                    .name(\"BACKUP_RECOVERY_POINT_ENCRYPTED\")\n                    .build(),\n                FrameworkControlArgs.builder()\n                    .name(\"BACKUP_RESOURCES_PROTECTED_BY_BACKUP_PLAN\")\n                    .scope(FrameworkControlScopeArgs.builder()\n                        .complianceResourceTypes(\"EBS\")\n                        .build())\n                    .build(),\n                FrameworkControlArgs.builder()\n                    .name(\"BACKUP_RECOVERY_POINT_MANUAL_DELETION_DISABLED\")\n                    .build())\n            .description(\"this is an example framework\")\n            .tags(Map.of(\"Name\", \"Example Framework\"))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: aws:backup:Framework\n    properties:\n      controls:\n        - inputParameters:\n            - name: requiredRetentionDays\n              value: 35\n          name: BACKUP_RECOVERY_POINT_MINIMUM_RETENTION_CHECK\n        - inputParameters:\n            - name: requiredFrequencyUnit\n              value: hours\n            - name: requiredRetentionDays\n              value: 35\n            - name: requiredFrequencyValue\n              value: 1\n          name: BACKUP_PLAN_MIN_FREQUENCY_AND_MIN_RETENTION_CHECK\n        - name: BACKUP_RECOVERY_POINT_ENCRYPTED\n        - name: BACKUP_RESOURCES_PROTECTED_BY_BACKUP_PLAN\n          scope:\n            complianceResourceTypes:\n              - EBS\n        - name: BACKUP_RECOVERY_POINT_MANUAL_DELETION_DISABLED\n      description: this is an example framework\n      tags:\n        Name: Example Framework\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nBackup Framework can be imported using the `id` which corresponds to the name of the Backup Framework, e.g.,\n\n```sh\n $ pulumi import aws:backup/framework:Framework test <id>\n```\n\n ",
      "properties": {
        "arn": {
          "type": "string",
          "description": "The ARN of the backup framework.\n"
        },
        "controls": {
          "type": "array",
          "items": {
            "$ref": "#/types/aws:backup/FrameworkControl:FrameworkControl"
          },
          "description": "One or more control blocks that make up the framework. Each control in the list has a name, input parameters, and scope. Detailed below.\n"
        },
        "creationTime": {
          "type": "string",
          "description": "The date and time that a framework is created, in Unix format and Coordinated Universal Time (UTC).\n"
        },
        "deploymentStatus": {
          "type": "string",
          "description": "The deployment status of a framework. The statuses are: `CREATE_IN_PROGRESS` | `UPDATE_IN_PROGRESS` | `DELETE_IN_PROGRESS` | `COMPLETED` | `FAILED`.\n"
        },
        "description": {
          "type": "string",
          "description": "The description of the framework with a maximum of 1,024 characters\n"
        },
        "name": {
          "type": "string",
          "description": "The name of a parameter, for example, BackupPlanFrequency.\n"
        },
        "status": {
          "type": "string",
          "description": "A framework consists of one or more controls. Each control governs a resource, such as backup plans, backup selections, backup vaults, or recovery points. You can also turn AWS Config recording on or off for each resource. For more information refer to the [AWS documentation for Framework Status](https://docs.aws.amazon.com/aws-backup/latest/devguide/API_DescribeFramework.html#Backup-DescribeFramework-response-FrameworkStatus)\n"
        },
        "tags": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "The tag key-value pair applied to those AWS resources that you want to trigger an evaluation for a rule. A maximum of one key-value pair can be provided.\n"
        },
        "tagsAll": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "A map of tags assigned to the resource, including those inherited from the provider [`default_tags` configuration block](https://www.terraform.io/docs/providers/aws/index.html#default_tags-configuration-block).\n"
        }
      },
      "required": [
        "arn",
        "controls",
        "creationTime",
        "deploymentStatus",
        "name",
        "status",
        "tagsAll"
      ],
      "inputProperties": {
        "controls": {
          "type": "array",
          "items": {
            "$ref": "#/types/aws:backup/FrameworkControl:FrameworkControl"
          },
          "description": "One or more control blocks that make up the framework. Each control in the list has a name, input parameters, and scope. Detailed below.\n"
        },
        "description": {
          "type": "string",
          "description": "The description of the framework with a maximum of 1,024 characters\n"
        },
        "name": {
          "type": "string",
          "description": "The name of a parameter, for example, BackupPlanFrequency.\n",
          "willReplaceOnChanges": true
        },
        "tags": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "The tag key-value pair applied to those AWS resources that you want to trigger an evaluation for a rule. A maximum of one key-value pair can be provided.\n"
        }
      },
      "requiredInputs": [
        "controls"
      ],
      "stateInputs": {
        "description": "Input properties used for looking up and filtering Framework resources.\n",
        "properties": {
          "arn": {
            "type": "string",
            "description": "The ARN of the backup framework.\n"
          },
          "controls": {
            "type": "array",
            "items": {
              "$ref": "#/types/aws:backup/FrameworkControl:FrameworkControl"
            },
            "description": "One or more control blocks that make up the framework. Each control in the list has a name, input parameters, and scope. Detailed below.\n"
          },
          "creationTime": {
            "type": "string",
            "description": "The date and time that a framework is created, in Unix format and Coordinated Universal Time (UTC).\n"
          },
          "deploymentStatus": {
            "type": "string",
            "description": "The deployment status of a framework. The statuses are: `CREATE_IN_PROGRESS` | `UPDATE_IN_PROGRESS` | `DELETE_IN_PROGRESS` | `COMPLETED` | `FAILED`.\n"
          },
          "description": {
            "type": "string",
            "description": "The description of the framework with a maximum of 1,024 characters\n"
          },
          "name": {
            "type": "string",
            "description": "The name of a parameter, for example, BackupPlanFrequency.\n",
            "willReplaceOnChanges": true
          },
          "status": {
            "type": "string",
            "description": "A framework consists of one or more controls. Each control governs a resource, such as backup plans, backup selections, backup vaults, or recovery points. You can also turn AWS Config recording on or off for each resource. For more information refer to the [AWS documentation for Framework Status](https://docs.aws.amazon.com/aws-backup/latest/devguide/API_DescribeFramework.html#Backup-DescribeFramework-response-FrameworkStatus)\n"
          },
          "tags": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "The tag key-value pair applied to those AWS resources that you want to trigger an evaluation for a rule. A maximum of one key-value pair can be provided.\n"
          },
          "tagsAll": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "A map of tags assigned to the resource, including those inherited from the provider [`default_tags` configuration block](https://www.terraform.io/docs/providers/aws/index.html#default_tags-configuration-block).\n"
          }
        },
        "type": "object"
      }
    }
  },
  "functions": {
    "aws:acmpca/getCertificateAuthority:getCertificateAuthority": {
      "inputs": {
        "properties": {
          "arn": {
            "type": "string",
            "description": "Amazon Resource Name (ARN) of the certificate authority.\n"
          },
          "revocationConfigurations": {
            "type": "array",
            "items": {
              "$ref": "#/types/aws:acmpca/getCertificateAuthorityRevocationConfiguration:getCertificateAuthorityRevocationConfiguration"
            },
            "description": "Nested attribute containing revocation configuration.\n* `revocation_configuration.0.crl_configuration` - Nested attribute containing configuration of the certificate revocation list (CRL), if any, maintained by the certificate authority.\n* `revocation_configuration.0.crl_configuration.0.custom_cname` - Name inserted into the certificate CRL Distribution Points extension that enables the use of an alias for the CRL distribution point.\n* `revocation_configuration.0.crl_configuration.0.enabled` - Boolean value that specifies whether certificate revocation lists (CRLs) are enabled.\n* `revocation_configuration.0.crl_configuration.0.expiration_in_days` - Number of days until a certificate expires.\n* `revocation_configuration.0.crl_configuration.0.s3_bucket_name` - Name of the S3 bucket that contains the CRL.\n* `revocation_configuration.0.crl_configuration.0.s3_object_acl` - Whether the CRL is publicly readable or privately held in the CRL Amazon S3 bucket.\n* `revocation_configuration.0.ocsp_configuration.0.enabled` - Boolean value that specifies whether a custom OCSP responder is enabled.\n* `revocation_configuration.0.ocsp_configuration.0.ocsp_custom_cname` - A CNAME specifying a customized OCSP domain.\n"
          },
          "tags": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "Specifies a key-value map of user-defined tags that are attached to the certificate authority.\n"
          }
        },
        "required": [
          "arn"
        ],
        "description": "A collection of arguments for invoking getCertificateAuthority.\n"
      },
      "outputs": {
        "properties": {
          "arn": {
            "type": "string"
          },
          "certificate": {
            "type": "string",
            "description": "Base64-encoded certificate authority (CA) certificate. Only available after the certificate authority certificate has been imported.\n"
          },
          "certificateChain": {
            "type": "string",
            "description": "Base64-encoded certificate chain that includes any intermediate certificates and chains up to root on-premises certificate that you used to sign your private CA certificate. The chain does not include your private CA certificate. Only available after the certificate authority certificate has been imported.\n"
          },
          "certificateSigningRequest": {
            "type": "string",
            "description": "The base64 PEM-encoded certificate signing request (CSR) for your private CA certificate.\n"
          },
          "id": {
            "type": "string",
            "description": "The provider-assigned unique ID for this managed resource.\n"
          },
          "notAfter": {
            "type": "string",
            "description": "Date and time after which the certificate authority is not valid. Only available after the certificate authority certificate has been imported.\n"
          },
          "notBefore": {
            "type": "string",
            "description": "Date and time before which the certificate authority is not valid. Only available after the certificate authority certificate has been imported.\n"
          },
          "revocationConfigurations": {
            "type": "array",
            "items": {
              "$ref": "#/types/aws:acmpca/getCertificateAuthorityRevocationConfiguration:getCertificateAuthorityRevocationConfiguration"
            },
            "description": "Nested attribute containing revocation configuration.\n* `revocation_configuration.0.crl_configuration` - Nested attribute containing configuration of the certificate revocation list (CRL), if any, maintained by the certificate authority.\n* `revocation_configuration.0.crl_configuration.0.custom_cname` - Name inserted into the certificate CRL Distribution Points extension that enables the use of an alias for the CRL distribution point.\n* `revocation_configuration.0.crl_configuration.0.enabled` - Boolean value that specifies whether certificate revocation lists (CRLs) are enabled.\n* `revocation_configuration.0.crl_configuration.0.expiration_in_days` - Number of days until a certificate expires.\n* `revocation_configuration.0.crl_configuration.0.s3_bucket_name` - Name of the S3 bucket that contains the CRL.\n* `revocation_configuration.0.crl_configuration.0.s3_object_acl` - Whether the CRL is publicly readable or privately held in the CRL Amazon S3 bucket.\n* `revocation_configuration.0.ocsp_configuration.0.enabled` - Boolean value that specifies whether a custom OCSP responder is enabled.\n* `revocation_configuration.0.ocsp_configuration.0.ocsp_custom_cname` - A CNAME specifying a customized OCSP domain.\n"
          },
          "serial": {
            "type": "string",
            "description": "Serial number of the certificate authority. Only available after the certificate authority certificate has been imported.\n"
          },
          "status": {
            "type": "string",
            "description": "Status of the certificate authority.\n"
          },
          "tags": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "Specifies a key-value map of user-defined tags that are attached to the certificate authority.\n"
          },
          "type": {
            "type": "string",
            "description": "The type of the certificate authority.\n"
          }
        },
        "required": [
          "arn",
          "certificate",
          "certificateChain",
          "certificateSigningRequest",
          "notAfter",
          "notBefore",
          "revocationConfigurations",
          "serial",
          "status",
          "tags",
          "type",
          "id"
        ],
        "description": "A collection of values returned by getCertificateAuthority.\n"
      },
      "description": "Get information on a AWS Certificate Manager Private Certificate Authority (ACM PCA Certificate Authority).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as aws from \"@pulumi/aws\";\n\nconst example = pulumi.output(aws.acmpca.getCertificateAuthority({\n    arn: \"arn:aws:acm-pca:us-east-1:123456789012:certificate-authority/12345678-1234-1234-1234-123456789012\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_aws as aws\n\nexample = aws.acmpca.get_certificate_authority(arn=\"arn:aws:acm-pca:us-east-1:123456789012:certificate-authority/12345678-1234-1234-1234-123456789012\")\n```\n```csharp\nusing Pulumi;\nusing Aws = Pulumi.Aws;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var example = Output.Create(Aws.Acmpca.GetCertificateAuthority.InvokeAsync(new Aws.Acmpca.GetCertificateAuthorityArgs\n        {\n            Arn = \"arn:aws:acm-pca:us-east-1:123456789012:certificate-authority/12345678-1234-1234-1234-123456789012\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/acmpca\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := acmpca.LookupCertificateAuthority(ctx, &acmpca.LookupCertificateAuthorityArgs{\n\t\t\tArn: \"arn:aws:acm-pca:us-east-1:123456789012:certificate-authority/12345678-1234-1234-1234-123456789012\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.aws.acmpca.AcmpcaFunctions;\nimport com.pulumi.aws.acmpca.inputs.GetCertificateAuthorityArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = AcmpcaFunctions.getCertificateAuthority(GetCertificateAuthorityArgs.builder()\n            .arn(\"arn:aws:acm-pca:us-east-1:123456789012:certificate-authority/12345678-1234-1234-1234-123456789012\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    Fn::Invoke:\n      Function: aws:acmpca:getCertificateAuthority\n      Arguments:\n        arn: arn:aws:acm-pca:us-east-1:123456789012:certificate-authority/12345678-1234-1234-1234-123456789012\n```\n{{% /example %}}\n{{% /examples %}}"
    },
    "aws:autoscaling/getAmiIds:getAmiIds": {
      "inputs": {
        "properties": {
          "filters": {
            "type": "array",
            "items": {
              "$ref": "#/types/aws:autoscaling/getAmiIdsFilter:getAmiIdsFilter"
            },
            "description": "A filter used to scope the list e.g., by tags. See [related docs](http://docs.aws.amazon.com/AutoScaling/latest/APIReference/API_Filter.html).\n"
          },
          "names": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "A list of autoscaling group names\n"
          }
        },
        "description": "A collection of arguments for invoking getAmiIds.\n"
      },
      "outputs": {
        "properties": {
          "arns": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "A list of the Autoscaling Groups Arns in the current region.\n"
          },
          "filters": {
            "type": "array",
            "items": {
              "$ref": "#/types/aws:autoscaling/getAmiIdsFilter:getAmiIdsFilter"
            }
          },
          "id": {
            "type": "string",
            "description": "The provider-assigned unique ID for this managed resource.\n"
          },
          "names": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "A list of the Autoscaling Groups in the current region.\n"
          }
        },
        "required": [
          "arns",
          "names",
          "id"
        ],
        "description": "A collection of values returned by getAmiIds.\n"
      },
      "description": "The Autoscaling Groups data source allows access to the list of AWS\nASGs within a specific region. This will allow you to pass a list of AutoScaling Groups to other resources.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as aws from \"@pulumi/aws\";\n\nconst groups = aws.autoscaling.getAmiIds({\n    filters: [\n        {\n            name: \"tag:Team\",\n            values: [\"Pets\"],\n        },\n        {\n            name: \"tag-key\",\n            values: [\"Environment\"],\n        },\n    ],\n});\nconst slackNotifications = new aws.autoscaling.Notification(\"slackNotifications\", {\n    groupNames: groups.then(groups => groups.names),\n    notifications: [\n        \"autoscaling:EC2_INSTANCE_LAUNCH\",\n        \"autoscaling:EC2_INSTANCE_TERMINATE\",\n        \"autoscaling:EC2_INSTANCE_LAUNCH_ERROR\",\n        \"autoscaling:EC2_INSTANCE_TERMINATE_ERROR\",\n    ],\n    topicArn: \"TOPIC ARN\",\n});\n```\n```python\nimport pulumi\nimport pulumi_aws as aws\n\ngroups = aws.autoscaling.get_ami_ids(filters=[\n    aws.autoscaling.GetAmiIdsFilterArgs(\n        name=\"tag:Team\",\n        values=[\"Pets\"],\n    ),\n    aws.autoscaling.GetAmiIdsFilterArgs(\n        name=\"tag-key\",\n        values=[\"Environment\"],\n    ),\n])\nslack_notifications = aws.autoscaling.Notification(\"slackNotifications\",\n    group_names=groups.names,\n    notifications=[\n        \"autoscaling:EC2_INSTANCE_LAUNCH\",\n        \"autoscaling:EC2_INSTANCE_TERMINATE\",\n        \"autoscaling:EC2_INSTANCE_LAUNCH_ERROR\",\n        \"autoscaling:EC2_INSTANCE_TERMINATE_ERROR\",\n    ],\n    topic_arn=\"TOPIC ARN\")\n```\n```csharp\nusing Pulumi;\nusing Aws = Pulumi.Aws;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var groups = Output.Create(Aws.AutoScaling.GetAmiIds.InvokeAsync(new Aws.AutoScaling.GetAmiIdsArgs\n        {\n            Filters = \n            {\n                new Aws.AutoScaling.Inputs.GetAmiIdsFilterArgs\n                {\n                    Name = \"tag:Team\",\n                    Values = \n                    {\n                        \"Pets\",\n                    },\n                },\n                new Aws.AutoScaling.Inputs.GetAmiIdsFilterArgs\n                {\n                    Name = \"tag-key\",\n                    Values = \n                    {\n                        \"Environment\",\n                    },\n                },\n            },\n        }));\n        var slackNotifications = new Aws.AutoScaling.Notification(\"slackNotifications\", new Aws.AutoScaling.NotificationArgs\n        {\n            GroupNames = groups.Apply(groups => groups.Names),\n            Notifications = \n            {\n                \"autoscaling:EC2_INSTANCE_LAUNCH\",\n                \"autoscaling:EC2_INSTANCE_TERMINATE\",\n                \"autoscaling:EC2_INSTANCE_LAUNCH_ERROR\",\n                \"autoscaling:EC2_INSTANCE_TERMINATE_ERROR\",\n            },\n            TopicArn = \"TOPIC ARN\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/autoscaling\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tgroups, err := autoscaling.GetAmiIds(ctx, &autoscaling.GetAmiIdsArgs{\n\t\t\tFilters: []autoscaling.GetAmiIdsFilter{\n\t\t\t\tautoscaling.GetAmiIdsFilter{\n\t\t\t\t\tName: \"tag:Team\",\n\t\t\t\t\tValues: []string{\n\t\t\t\t\t\t\"Pets\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tautoscaling.GetAmiIdsFilter{\n\t\t\t\t\tName: \"tag-key\",\n\t\t\t\t\tValues: []string{\n\t\t\t\t\t\t\"Environment\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = autoscaling.NewNotification(ctx, \"slackNotifications\", &autoscaling.NotificationArgs{\n\t\t\tGroupNames: interface{}(groups.Names),\n\t\t\tNotifications: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"autoscaling:EC2_INSTANCE_LAUNCH\"),\n\t\t\t\tpulumi.String(\"autoscaling:EC2_INSTANCE_TERMINATE\"),\n\t\t\t\tpulumi.String(\"autoscaling:EC2_INSTANCE_LAUNCH_ERROR\"),\n\t\t\t\tpulumi.String(\"autoscaling:EC2_INSTANCE_TERMINATE_ERROR\"),\n\t\t\t},\n\t\t\tTopicArn: pulumi.String(\"TOPIC ARN\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.aws.autoscaling.AutoscalingFunctions;\nimport com.pulumi.aws.autoscaling.inputs.GetAmiIdsArgs;\nimport com.pulumi.aws.autoscaling.Notification;\nimport com.pulumi.aws.autoscaling.NotificationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var groups = AutoscalingFunctions.getAmiIds(GetAmiIdsArgs.builder()\n            .filters(            \n                GetAmiIdsFilterArgs.builder()\n                    .name(\"tag:Team\")\n                    .values(\"Pets\")\n                    .build(),\n                GetAmiIdsFilterArgs.builder()\n                    .name(\"tag-key\")\n                    .values(\"Environment\")\n                    .build())\n            .build());\n\n        var slackNotifications = new Notification(\"slackNotifications\", NotificationArgs.builder()        \n            .groupNames(groups.applyValue(getAmiIdsResult -> getAmiIdsResult.names()))\n            .notifications(            \n                \"autoscaling:EC2_INSTANCE_LAUNCH\",\n                \"autoscaling:EC2_INSTANCE_TERMINATE\",\n                \"autoscaling:EC2_INSTANCE_LAUNCH_ERROR\",\n                \"autoscaling:EC2_INSTANCE_TERMINATE_ERROR\")\n            .topicArn(\"TOPIC ARN\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  slackNotifications:\n    type: aws:autoscaling:Notification\n    properties:\n      groupNames: ${groups.names}\n      notifications:\n        - autoscaling:EC2_INSTANCE_LAUNCH\n        - autoscaling:EC2_INSTANCE_TERMINATE\n        - autoscaling:EC2_INSTANCE_LAUNCH_ERROR\n        - autoscaling:EC2_INSTANCE_TERMINATE_ERROR\n      topicArn: TOPIC ARN\nvariables:\n  groups:\n    Fn::Invoke:\n      Function: aws:autoscaling:getAmiIds\n      Arguments:\n        filters:\n          - name: tag:Team\n            values:\n              - Pets\n          - name: tag-key\n            values:\n              - Environment\n```\n{{% /example %}}\n{{% /examples %}}"
    },
    "aws:datapipeline/getPipelineDefinition:getPipelineDefinition": {
      "inputs": {
        "properties": {
          "parameterValues": {
            "type": "array",
            "items": {
              "$ref": "#/types/aws:datapipeline/getPipelineDefinitionParameterValue:getPipelineDefinitionParameterValue"
            },
            "willReplaceOnChanges": true,
            "description": "Parameter values used in the pipeline definition. See below\n"
          },
          "pipelineId": {
            "type": "string",
            "description": "ID of the pipeline.\n"
          }
        },
        "required": [
          "pipelineId"
        ],
        "description": "A collection of arguments for invoking getPipelineDefinition.\n"
      },
      "outputs": {
        "properties": {
          "id": {
            "type": "string",
            "description": "The provider-assigned unique ID for this managed resource.\n"
          },
          "parameterObjects": {
            "type": "array",
            "items": {
              "$ref": "#/types/aws:datapipeline/getPipelineDefinitionParameterObject:getPipelineDefinitionParameterObject"
            },
            "description": "Parameter objects used in the pipeline definition. See below\n"
          },
          "parameterValues": {
            "type": "array",
            "items": {
              "$ref": "#/types/aws:datapipeline/getPipelineDefinitionParameterValue:getPipelineDefinitionParameterValue"
            },
            "description": "Parameter values used in the pipeline definition. See below\n"
          },
          "pipelineId": {
            "type": "string"
          },
          "pipelineObjects": {
            "type": "array",
            "items": {
              "$ref": "#/types/aws:datapipeline/getPipelineDefinitionPipelineObject:getPipelineDefinitionPipelineObject"
            },
            "description": "Objects defined in the pipeline. See below\n"
          }
        },
        "required": [
          "parameterObjects",
          "pipelineId",
          "pipelineObjects",
          "id"
        ],
        "description": "A collection of values returned by getPipelineDefinition.\n"
      },
      "description": "Provides details about a specific DataPipeline Pipeline Definition.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as aws from \"@pulumi/aws\";\n\nconst example = pulumi.output(aws.datapipeline.getPipelineDefinition({\n    pipelineId: \"pipelineID\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_aws as aws\n\nexample = aws.datapipeline.get_pipeline_definition(pipeline_id=\"pipelineID\")\n```\n```csharp\nusing Pulumi;\nusing Aws = Pulumi.Aws;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var example = Output.Create(Aws.DataPipeline.GetPipelineDefinition.InvokeAsync(new Aws.DataPipeline.GetPipelineDefinitionArgs\n        {\n            PipelineId = \"pipelineID\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/datapipeline\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := datapipeline.LookupPipelineDefinition(ctx, &datapipeline.LookupPipelineDefinitionArgs{\n\t\t\tPipelineId: \"pipelineID\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.aws.datapipeline.DatapipelineFunctions;\nimport com.pulumi.aws.datapipeline.inputs.GetPipelineDefinitionArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = DatapipelineFunctions.getPipelineDefinition(GetPipelineDefinitionArgs.builder()\n            .pipelineId(\"pipelineID\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    Fn::Invoke:\n      Function: aws:datapipeline:getPipelineDefinition\n      Arguments:\n        pipelineId: pipelineID\n```\n{{% /example %}}\n{{% /examples %}}"
    },
    "aws:ebs/getEbsVolumes:getEbsVolumes": {
      "inputs": {
        "properties": {
          "filters": {
            "type": "array",
            "items": {
              "$ref": "#/types/aws:ebs/getEbsVolumesFilter:getEbsVolumesFilter"
            },
            "description": "Custom filter block as described below.\n"
          },
          "tags": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "A map of tags, each pair of which must exactly match\na pair on the desired volumes.\n"
          }
        },
        "description": "A collection of arguments for invoking getEbsVolumes.\n"
      },
      "outputs": {
        "properties": {
          "filters": {
            "type": "array",
            "items": {
              "$ref": "#/types/aws:ebs/getEbsVolumesFilter:getEbsVolumesFilter"
            }
          },
          "id": {
            "type": "string",
            "description": "The provider-assigned unique ID for this managed resource.\n"
          },
          "ids": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "A set of all the EBS Volume IDs found. This data source will fail if\nno volumes match the provided criteria.\n"
          },
          "tags": {
            "additionalProperties": {
              "type": "string"
            }
          }
        },
        "required": [
          "ids",
          "id"
        ],
        "description": "A collection of values returned by getEbsVolumes.\n"
      },
      "description": "`aws.ebs.getEbsVolumes` provides identifying information for EBS volumes matching given criteria.\n\nThis data source can be useful for getting a list of volume IDs with (for example) matching tags.\n"
    },
    "aws:ebs/getSnapshot:getSnapshot": {
      "inputs": {
        "properties": {
          "filters": {
            "type": "array",
            "items": {
              "$ref": "#/types/aws:ebs/getSnapshotFilter:getSnapshotFilter"
            },
            "description": "One or more name/value pairs to filter off of. There are\nseveral valid keys, for a full reference, check out\n[describe-snapshots in the AWS CLI reference][1].\n"
          },
          "mostRecent": {
            "type": "boolean",
            "description": "If more than one result is returned, use the most recent snapshot.\n"
          },
          "owners": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Returns the snapshots owned by the specified owner id. Multiple owners can be specified.\n"
          },
          "restorableByUserIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "One or more AWS accounts IDs that can create volumes from the snapshot.\n"
          },
          "snapshotIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Returns information on a specific snapshot_id.\n"
          },
          "tags": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "A map of tags for the resource.\n"
          }
        },
        "description": "A collection of arguments for invoking getSnapshot.\n"
      },
      "outputs": {
        "properties": {
          "arn": {
            "type": "string",
            "description": "Amazon Resource Name (ARN) of the EBS Snapshot.\n"
          },
          "dataEncryptionKeyId": {
            "type": "string",
            "description": "The data encryption key identifier for the snapshot.\n"
          },
          "description": {
            "type": "string",
            "description": "A description for the snapshot\n"
          },
          "encrypted": {
            "type": "boolean",
            "description": "Whether the snapshot is encrypted.\n"
          },
          "filters": {
            "type": "array",
            "items": {
              "$ref": "#/types/aws:ebs/getSnapshotFilter:getSnapshotFilter"
            }
          },
          "id": {
            "type": "string",
            "description": "The provider-assigned unique ID for this managed resource.\n"
          },
          "kmsKeyId": {
            "type": "string",
            "description": "The ARN for the KMS encryption key.\n"
          },
          "mostRecent": {
            "type": "boolean"
          },
          "outpostArn": {
            "type": "string",
            "description": "The ARN of the Outpost on which the snapshot is stored.\n"
          },
          "ownerAlias": {
            "type": "string",
            "description": "Value from an Amazon-maintained list (`amazon`, `aws-marketplace`, `microsoft`) of snapshot owners.\n"
          },
          "ownerId": {
            "type": "string",
            "description": "The AWS account ID of the EBS snapshot owner.\n"
          },
          "owners": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "restorableByUserIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "snapshotId": {
            "type": "string",
            "description": "The snapshot ID (e.g., snap-59fcb34e).\n"
          },
          "snapshotIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "state": {
            "type": "string",
            "description": "The snapshot state.\n"
          },
          "storageTier": {
            "type": "string",
            "description": "The storage tier in which the snapshot is stored.\n"
          },
          "tags": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "A map of tags for the resource.\n"
          },
          "volumeId": {
            "type": "string",
            "description": "The volume ID (e.g., vol-59fcb34e).\n"
          },
          "volumeSize": {
            "type": "integer",
            "description": "The size of the drive in GiBs.\n"
          }
        },
        "required": [
          "arn",
          "dataEncryptionKeyId",
          "description",
          "encrypted",
          "kmsKeyId",
          "outpostArn",
          "ownerAlias",
          "ownerId",
          "snapshotId",
          "state",
          "storageTier",
          "tags",
          "volumeId",
          "volumeSize",
          "id"
        ],
        "description": "A collection of values returned by getSnapshot.\n"
      },
      "description": "Use this data source to get information about an EBS Snapshot for use when provisioning EBS Volumes\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as aws from \"@pulumi/aws\";\n\nconst ebsVolume = pulumi.output(aws.ebs.getSnapshot({\n    filters: [\n        {\n            name: \"volume-size\",\n            values: [\"40\"],\n        },\n        {\n            name: \"tag:Name\",\n            values: [\"Example\"],\n        },\n    ],\n    mostRecent: true,\n    owners: [\"self\"],\n}));\n```\n```python\nimport pulumi\nimport pulumi_aws as aws\n\nebs_volume = aws.ebs.get_snapshot(filters=[\n        aws.ebs.GetSnapshotFilterArgs(\n            name=\"volume-size\",\n            values=[\"40\"],\n        ),\n        aws.ebs.GetSnapshotFilterArgs(\n            name=\"tag:Name\",\n            values=[\"Example\"],\n        ),\n    ],\n    most_recent=True,\n    owners=[\"self\"])\n```\n```csharp\nusing Pulumi;\nusing Aws = Pulumi.Aws;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var ebsVolume = Output.Create(Aws.Ebs.GetSnapshot.InvokeAsync(new Aws.Ebs.GetSnapshotArgs\n        {\n            Filters = \n            {\n                new Aws.Ebs.Inputs.GetSnapshotFilterArgs\n                {\n                    Name = \"volume-size\",\n                    Values = \n                    {\n                        \"40\",\n                    },\n                },\n                new Aws.Ebs.Inputs.GetSnapshotFilterArgs\n                {\n                    Name = \"tag:Name\",\n                    Values = \n                    {\n                        \"Example\",\n                    },\n                },\n            },\n            MostRecent = true,\n            Owners = \n            {\n                \"self\",\n            },\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/ebs\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := ebs.LookupSnapshot(ctx, &ebs.LookupSnapshotArgs{\n\t\t\tFilters: []ebs.GetSnapshotFilter{\n\t\t\t\tebs.GetSnapshotFilter{\n\t\t\t\t\tName: \"volume-size\",\n\t\t\t\t\tValues: []string{\n\t\t\t\t\t\t\"40\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tebs.GetSnapshotFilter{\n\t\t\t\t\tName: \"tag:Name\",\n\t\t\t\t\tValues: []string{\n\t\t\t\t\t\t\"Example\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tMostRecent: pulumi.BoolRef(true),\n\t\t\tOwners: []string{\n\t\t\t\t\"self\",\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.aws.ebs.EbsFunctions;\nimport com.pulumi.aws.ebs.inputs.GetSnapshotArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var ebsVolume = EbsFunctions.getSnapshot(GetSnapshotArgs.builder()\n            .filters(            \n                GetSnapshotFilterArgs.builder()\n                    .name(\"volume-size\")\n                    .values(\"40\")\n                    .build(),\n                GetSnapshotFilterArgs.builder()\n                    .name(\"tag:Name\")\n                    .values(\"Example\")\n                    .build())\n            .mostRecent(true)\n            .owners(\"self\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  ebsVolume:\n    Fn::Invoke:\n      Function: aws:ebs:getSnapshot\n      Arguments:\n        filters:\n          - name: volume-size\n            values:\n              - 40\n          - name: tag:Name\n            values:\n              - Example\n        mostRecent: true\n        owners:\n          - self\n```\n{{% /example %}}\n{{% /examples %}}"
    },
    "aws:ebs/getSnapshotIds:getSnapshotIds": {
      "inputs": {
        "properties": {
          "filters": {
            "type": "array",
            "items": {
              "$ref": "#/types/aws:ebs/getSnapshotIdsFilter:getSnapshotIdsFilter"
            },
            "description": "One or more name/value pairs to filter off of. There are\nseveral valid keys, for a full reference, check out\n[describe-volumes in the AWS CLI reference][1].\n"
          },
          "owners": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Returns the snapshots owned by the specified owner id. Multiple owners can be specified.\n"
          },
          "restorableByUserIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "One or more AWS accounts IDs that can create volumes from the snapshot.\n"
          }
        },
        "description": "A collection of arguments for invoking getSnapshotIds.\n"
      },
      "outputs": {
        "properties": {
          "filters": {
            "type": "array",
            "items": {
              "$ref": "#/types/aws:ebs/getSnapshotIdsFilter:getSnapshotIdsFilter"
            }
          },
          "id": {
            "type": "string",
            "description": "The provider-assigned unique ID for this managed resource.\n"
          },
          "ids": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Set of EBS snapshot IDs, sorted by creation time in descending order.\n"
          },
          "owners": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "restorableByUserIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "ids",
          "id"
        ],
        "description": "A collection of values returned by getSnapshotIds.\n"
      },
      "description": "Use this data source to get a list of EBS Snapshot IDs matching the specified\ncriteria.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as aws from \"@pulumi/aws\";\n\nconst ebsVolumes = pulumi.output(aws.ebs.getSnapshotIds({\n    filters: [\n        {\n            name: \"volume-size\",\n            values: [\"40\"],\n        },\n        {\n            name: \"tag:Name\",\n            values: [\"Example\"],\n        },\n    ],\n    owners: [\"self\"],\n}));\n```\n```python\nimport pulumi\nimport pulumi_aws as aws\n\nebs_volumes = aws.ebs.get_snapshot_ids(filters=[\n        aws.ebs.GetSnapshotIdsFilterArgs(\n            name=\"volume-size\",\n            values=[\"40\"],\n        ),\n        aws.ebs.GetSnapshotIdsFilterArgs(\n            name=\"tag:Name\",\n            values=[\"Example\"],\n        ),\n    ],\n    owners=[\"self\"])\n```\n```csharp\nusing Pulumi;\nusing Aws = Pulumi.Aws;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var ebsVolumes = Output.Create(Aws.Ebs.GetSnapshotIds.InvokeAsync(new Aws.Ebs.GetSnapshotIdsArgs\n        {\n            Filters = \n            {\n                new Aws.Ebs.Inputs.GetSnapshotIdsFilterArgs\n                {\n                    Name = \"volume-size\",\n                    Values = \n                    {\n                        \"40\",\n                    },\n                },\n                new Aws.Ebs.Inputs.GetSnapshotIdsFilterArgs\n                {\n                    Name = \"tag:Name\",\n                    Values = \n                    {\n                        \"Example\",\n                    },\n                },\n            },\n            Owners = \n            {\n                \"self\",\n            },\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/ebs\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := ebs.GetSnapshotIds(ctx, &ebs.GetSnapshotIdsArgs{\n\t\t\tFilters: []ebs.GetSnapshotIdsFilter{\n\t\t\t\tebs.GetSnapshotIdsFilter{\n\t\t\t\t\tName: \"volume-size\",\n\t\t\t\t\tValues: []string{\n\t\t\t\t\t\t\"40\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tebs.GetSnapshotIdsFilter{\n\t\t\t\t\tName: \"tag:Name\",\n\t\t\t\t\tValues: []string{\n\t\t\t\t\t\t\"Example\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tOwners: []string{\n\t\t\t\t\"self\",\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.aws.ebs.EbsFunctions;\nimport com.pulumi.aws.ebs.inputs.GetSnapshotIdsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var ebsVolumes = EbsFunctions.getSnapshotIds(GetSnapshotIdsArgs.builder()\n            .filters(            \n                GetSnapshotIdsFilterArgs.builder()\n                    .name(\"volume-size\")\n                    .values(\"40\")\n                    .build(),\n                GetSnapshotIdsFilterArgs.builder()\n                    .name(\"tag:Name\")\n                    .values(\"Example\")\n                    .build())\n            .owners(\"self\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  ebsVolumes:\n    Fn::Invoke:\n      Function: aws:ebs:getSnapshotIds\n      Arguments:\n        filters:\n          - name: volume-size\n            values:\n              - 40\n          - name: tag:Name\n            values:\n              - Example\n        owners:\n          - self\n```\n{{% /example %}}\n{{% /examples %}}"
    },
    "aws:ebs/getVolume:getVolume": {
      "inputs": {
        "properties": {
          "filters": {
            "type": "array",
            "items": {
              "$ref": "#/types/aws:ebs/getVolumeFilter:getVolumeFilter"
            },
            "description": "One or more name/value pairs to filter off of. There are\nseveral valid keys, for a full reference, check out\n[describe-volumes in the AWS CLI reference][1].\n"
          },
          "mostRecent": {
            "type": "boolean",
            "description": "If more than one result is returned, use the most\nrecent Volume.\n"
          },
          "tags": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "A map of tags for the resource.\n"
          }
        },
        "description": "A collection of arguments for invoking getVolume.\n"
      },
      "outputs": {
        "properties": {
          "arn": {
            "type": "string",
            "description": "The volume ARN (e.g., arn:aws:ec2:us-east-1:0123456789012:volume/vol-59fcb34e).\n"
          },
          "availabilityZone": {
            "type": "string",
            "description": "The AZ where the EBS volume exists.\n"
          },
          "encrypted": {
            "type": "boolean",
            "description": "Whether the disk is encrypted.\n"
          },
          "filters": {
            "type": "array",
            "items": {
              "$ref": "#/types/aws:ebs/getVolumeFilter:getVolumeFilter"
            }
          },
          "id": {
            "type": "string",
            "description": "The provider-assigned unique ID for this managed resource.\n"
          },
          "iops": {
            "type": "integer",
            "description": "The amount of IOPS for the disk.\n"
          },
          "kmsKeyId": {
            "type": "string",
            "description": "The ARN for the KMS encryption key.\n"
          },
          "mostRecent": {
            "type": "boolean"
          },
          "multiAttachEnabled": {
            "type": "boolean",
            "description": "(Optional) Specifies whether Amazon EBS Multi-Attach is enabled.\n"
          },
          "outpostArn": {
            "type": "string",
            "description": "The Amazon Resource Name (ARN) of the Outpost.\n"
          },
          "size": {
            "type": "integer",
            "description": "The size of the drive in GiBs.\n"
          },
          "snapshotId": {
            "type": "string",
            "description": "The snapshot_id the EBS volume is based off.\n"
          },
          "tags": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "A map of tags for the resource.\n"
          },
          "throughput": {
            "type": "integer",
            "description": "The throughput that the volume supports, in MiB/s.\n"
          },
          "volumeId": {
            "type": "string",
            "description": "The volume ID (e.g., vol-59fcb34e).\n"
          },
          "volumeType": {
            "type": "string",
            "description": "The type of EBS volume.\n"
          }
        },
        "required": [
          "arn",
          "availabilityZone",
          "encrypted",
          "iops",
          "kmsKeyId",
          "multiAttachEnabled",
          "outpostArn",
          "size",
          "snapshotId",
          "tags",
          "throughput",
          "volumeId",
          "volumeType",
          "id"
        ],
        "description": "A collection of values returned by getVolume.\n"
      },
      "description": "Use this data source to get information about an EBS volume for use in other\nresources.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as aws from \"@pulumi/aws\";\n\nconst ebsVolume = pulumi.output(aws.ebs.getVolume({\n    filters: [\n        {\n            name: \"volume-type\",\n            values: [\"gp2\"],\n        },\n        {\n            name: \"tag:Name\",\n            values: [\"Example\"],\n        },\n    ],\n    mostRecent: true,\n}));\n```\n```python\nimport pulumi\nimport pulumi_aws as aws\n\nebs_volume = aws.ebs.get_volume(filters=[\n        aws.ebs.GetVolumeFilterArgs(\n            name=\"volume-type\",\n            values=[\"gp2\"],\n        ),\n        aws.ebs.GetVolumeFilterArgs(\n            name=\"tag:Name\",\n            values=[\"Example\"],\n        ),\n    ],\n    most_recent=True)\n```\n```csharp\nusing Pulumi;\nusing Aws = Pulumi.Aws;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var ebsVolume = Output.Create(Aws.Ebs.GetVolume.InvokeAsync(new Aws.Ebs.GetVolumeArgs\n        {\n            Filters = \n            {\n                new Aws.Ebs.Inputs.GetVolumeFilterArgs\n                {\n                    Name = \"volume-type\",\n                    Values = \n                    {\n                        \"gp2\",\n                    },\n                },\n                new Aws.Ebs.Inputs.GetVolumeFilterArgs\n                {\n                    Name = \"tag:Name\",\n                    Values = \n                    {\n                        \"Example\",\n                    },\n                },\n            },\n            MostRecent = true,\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/ebs\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := ebs.LookupVolume(ctx, &ebs.LookupVolumeArgs{\n\t\t\tFilters: []ebs.GetVolumeFilter{\n\t\t\t\tebs.GetVolumeFilter{\n\t\t\t\t\tName: \"volume-type\",\n\t\t\t\t\tValues: []string{\n\t\t\t\t\t\t\"gp2\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tebs.GetVolumeFilter{\n\t\t\t\t\tName: \"tag:Name\",\n\t\t\t\t\tValues: []string{\n\t\t\t\t\t\t\"Example\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tMostRecent: pulumi.BoolRef(true),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.aws.ebs.EbsFunctions;\nimport com.pulumi.aws.ebs.inputs.GetVolumeArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var ebsVolume = EbsFunctions.getVolume(GetVolumeArgs.builder()\n            .filters(            \n                GetVolumeFilterArgs.builder()\n                    .name(\"volume-type\")\n                    .values(\"gp2\")\n                    .build(),\n                GetVolumeFilterArgs.builder()\n                    .name(\"tag:Name\")\n                    .values(\"Example\")\n                    .build())\n            .mostRecent(true)\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  ebsVolume:\n    Fn::Invoke:\n      Function: aws:ebs:getVolume\n      Arguments:\n        filters:\n          - name: volume-type\n            values:\n              - gp2\n          - name: tag:Name\n            values:\n              - Example\n        mostRecent: true\n```\n{{% /example %}}\n{{% /examples %}}"
    },
    "aws:ec2/getAmi:getAmi": {
      "inputs": {
        "properties": {
          "executableUsers": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Limit search to users with *explicit* launch permission on\nthe image. Valid items are the numeric account ID or `self`.\n"
          },
          "filters": {
            "type": "array",
            "items": {
              "$ref": "#/types/aws:ec2/getAmiFilter:getAmiFilter"
            },
            "description": "One or more name/value pairs to filter off of. There are\nseveral valid keys, for a full reference, check out\n[describe-images in the AWS CLI reference][1].\n"
          },
          "includeDeprecated": {
            "type": "boolean",
            "description": "If true, all deprecated AMIs are included in the response. If false, no deprecated AMIs are included in the response. If no value is specified, the default value is false.\n"
          },
          "mostRecent": {
            "type": "boolean",
            "description": "If more than one result is returned, use the most\nrecent AMI.\n"
          },
          "nameRegex": {
            "type": "string",
            "description": "A regex string to apply to the AMI list returned\nby AWS. This allows more advanced filtering not supported from the AWS API. This\nfiltering is done locally on what AWS returns, and could have a performance\nimpact if the result is large. Combine this with other\noptions to narrow down the list AWS returns.\n"
          },
          "owners": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of AMI owners to limit search. Valid values: an AWS account ID, `self` (the current account), or an AWS owner alias (e.g., `amazon`, `aws-marketplace`, `microsoft`).\n"
          },
          "tags": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "Any tags assigned to the image.\n* `tags.#.key` - The key name of the tag.\n* `tags.#.value` - The value of the tag.\n"
          }
        },
        "description": "A collection of arguments for invoking getAmi.\n"
      },
      "outputs": {
        "properties": {
          "architecture": {
            "type": "string",
            "description": "The OS architecture of the AMI (ie: `i386` or `x86_64`).\n"
          },
          "arn": {
            "type": "string",
            "description": "The ARN of the AMI.\n"
          },
          "blockDeviceMappings": {
            "type": "array",
            "items": {
              "$ref": "#/types/aws:ec2/getAmiBlockDeviceMapping:getAmiBlockDeviceMapping"
            },
            "description": "Set of objects with block device mappings of the AMI.\n"
          },
          "bootMode": {
            "type": "string",
            "description": "The boot mode of the image.\n"
          },
          "creationDate": {
            "type": "string",
            "description": "The date and time the image was created.\n"
          },
          "deprecationTime": {
            "type": "string",
            "description": "The date and time when the image will be deprecated.\n"
          },
          "description": {
            "type": "string",
            "description": "The description of the AMI that was provided during image\ncreation.\n"
          },
          "enaSupport": {
            "type": "boolean",
            "description": "Specifies whether enhanced networking with ENA is enabled.\n"
          },
          "executableUsers": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "filters": {
            "type": "array",
            "items": {
              "$ref": "#/types/aws:ec2/getAmiFilter:getAmiFilter"
            }
          },
          "hypervisor": {
            "type": "string",
            "description": "The hypervisor type of the image.\n"
          },
          "id": {
            "type": "string",
            "description": "The provider-assigned unique ID for this managed resource.\n"
          },
          "imageId": {
            "type": "string",
            "description": "The ID of the AMI. Should be the same as the resource `id`.\n"
          },
          "imageLocation": {
            "type": "string",
            "description": "The location of the AMI.\n"
          },
          "imageOwnerAlias": {
            "type": "string",
            "description": "The AWS account alias (for example, `amazon`, `self`) or\nthe AWS account ID of the AMI owner.\n"
          },
          "imageType": {
            "type": "string",
            "description": "The type of image.\n"
          },
          "includeDeprecated": {
            "type": "boolean"
          },
          "kernelId": {
            "type": "string",
            "description": "The kernel associated with the image, if any. Only applicable\nfor machine images.\n"
          },
          "mostRecent": {
            "type": "boolean"
          },
          "name": {
            "type": "string",
            "description": "The name of the AMI that was provided during image creation.\n"
          },
          "nameRegex": {
            "type": "string"
          },
          "ownerId": {
            "type": "string",
            "description": "The AWS account ID of the image owner.\n"
          },
          "owners": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "platform": {
            "type": "string",
            "description": "The value is Windows for `Windows` AMIs; otherwise blank.\n"
          },
          "platformDetails": {
            "type": "string",
            "description": "The platform details associated with the billing code of the AMI.\n"
          },
          "productCodes": {
            "type": "array",
            "items": {
              "$ref": "#/types/aws:ec2/getAmiProductCode:getAmiProductCode"
            },
            "description": "Any product codes associated with the AMI.\n* `product_codes.#.product_code_id` - The product code.\n* `product_codes.#.product_code_type` - The type of product code.\n"
          },
          "public": {
            "type": "boolean",
            "description": "`true` if the image has public launch permissions.\n"
          },
          "ramdiskId": {
            "type": "string",
            "description": "The RAM disk associated with the image, if any. Only applicable\nfor machine images.\n"
          },
          "rootDeviceName": {
            "type": "string",
            "description": "The device name of the root device.\n"
          },
          "rootDeviceType": {
            "type": "string",
            "description": "The type of root device (ie: `ebs` or `instance-store`).\n"
          },
          "rootSnapshotId": {
            "type": "string",
            "description": "The snapshot id associated with the root device, if any\n(only applies to `ebs` root devices).\n"
          },
          "sriovNetSupport": {
            "type": "string",
            "description": "Specifies whether enhanced networking is enabled.\n"
          },
          "state": {
            "type": "string",
            "description": "The current state of the AMI. If the state is `available`, the image\nis successfully registered and can be used to launch an instance.\n"
          },
          "stateReason": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "Describes a state change. Fields are `UNSET` if not available.\n* `state_reason.code` - The reason code for the state change.\n* `state_reason.message` - The message for the state change.\n"
          },
          "tags": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "Any tags assigned to the image.\n* `tags.#.key` - The key name of the tag.\n* `tags.#.value` - The value of the tag.\n"
          },
          "tpmSupport": {
            "type": "string",
            "description": "If the image is configured for NitroTPM support, the value is `v2.0`.\n"
          },
          "usageOperation": {
            "type": "string",
            "description": "The operation of the Amazon EC2 instance and the billing code that is associated with the AMI.\n"
          },
          "virtualizationType": {
            "type": "string",
            "description": "The type of virtualization of the AMI (ie: `hvm` or\n`paravirtual`).\n"
          }
        },
        "required": [
          "architecture",
          "arn",
          "blockDeviceMappings",
          "bootMode",
          "creationDate",
          "deprecationTime",
          "description",
          "enaSupport",
          "hypervisor",
          "imageId",
          "imageLocation",
          "imageOwnerAlias",
          "imageType",
          "kernelId",
          "name",
          "ownerId",
          "platform",
          "platformDetails",
          "productCodes",
          "public",
          "ramdiskId",
          "rootDeviceName",
          "rootDeviceType",
          "rootSnapshotId",
          "sriovNetSupport",
          "state",
          "stateReason",
          "tags",
          "tpmSupport",
          "usageOperation",
          "virtualizationType",
          "id"
        ],
        "description": "A collection of values returned by getAmi.\n"
      },
      "description": "Use this data source to get the ID of a registered AMI for use in other\nresources.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as aws from \"@pulumi/aws\";\n\nconst example = pulumi.output(aws.ec2.getAmi({\n    executableUsers: [\"self\"],\n    filters: [\n        {\n            name: \"name\",\n            values: [\"myami-*\"],\n        },\n        {\n            name: \"root-device-type\",\n            values: [\"ebs\"],\n        },\n        {\n            name: \"virtualization-type\",\n            values: [\"hvm\"],\n        },\n    ],\n    mostRecent: true,\n    nameRegex: \"^myami-\\\\d{3}\",\n    owners: [\"self\"],\n}));\n```\n```python\nimport pulumi\nimport pulumi_aws as aws\n\nexample = aws.ec2.get_ami(executable_users=[\"self\"],\n    filters=[\n        aws.ec2.GetAmiFilterArgs(\n            name=\"name\",\n            values=[\"myami-*\"],\n        ),\n        aws.ec2.GetAmiFilterArgs(\n            name=\"root-device-type\",\n            values=[\"ebs\"],\n        ),\n        aws.ec2.GetAmiFilterArgs(\n            name=\"virtualization-type\",\n            values=[\"hvm\"],\n        ),\n    ],\n    most_recent=True,\n    name_regex=\"^myami-\\\\d{3}\",\n    owners=[\"self\"])\n```\n```csharp\nusing Pulumi;\nusing Aws = Pulumi.Aws;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var example = Output.Create(Aws.Ec2.GetAmi.InvokeAsync(new Aws.Ec2.GetAmiArgs\n        {\n            ExecutableUsers = \n            {\n                \"self\",\n            },\n            Filters = \n            {\n                new Aws.Ec2.Inputs.GetAmiFilterArgs\n                {\n                    Name = \"name\",\n                    Values = \n                    {\n                        \"myami-*\",\n                    },\n                },\n                new Aws.Ec2.Inputs.GetAmiFilterArgs\n                {\n                    Name = \"root-device-type\",\n                    Values = \n                    {\n                        \"ebs\",\n                    },\n                },\n                new Aws.Ec2.Inputs.GetAmiFilterArgs\n                {\n                    Name = \"virtualization-type\",\n                    Values = \n                    {\n                        \"hvm\",\n                    },\n                },\n            },\n            MostRecent = true,\n            NameRegex = \"^myami-\\\\d{3}\",\n            Owners = \n            {\n                \"self\",\n            },\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/ec2\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := ec2.LookupAmi(ctx, &ec2.LookupAmiArgs{\n\t\t\tExecutableUsers: []string{\n\t\t\t\t\"self\",\n\t\t\t},\n\t\t\tFilters: []ec2.GetAmiFilter{\n\t\t\t\tec2.GetAmiFilter{\n\t\t\t\t\tName: \"name\",\n\t\t\t\t\tValues: []string{\n\t\t\t\t\t\t\"myami-*\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tec2.GetAmiFilter{\n\t\t\t\t\tName: \"root-device-type\",\n\t\t\t\t\tValues: []string{\n\t\t\t\t\t\t\"ebs\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tec2.GetAmiFilter{\n\t\t\t\t\tName: \"virtualization-type\",\n\t\t\t\t\tValues: []string{\n\t\t\t\t\t\t\"hvm\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tMostRecent: pulumi.BoolRef(true),\n\t\t\tNameRegex:  pulumi.StringRef(\"^myami-\\\\d{3}\"),\n\t\t\tOwners: []string{\n\t\t\t\t\"self\",\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.aws.ec2.Ec2Functions;\nimport com.pulumi.aws.ec2.inputs.GetAmiArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = Ec2Functions.getAmi(GetAmiArgs.builder()\n            .executableUsers(\"self\")\n            .filters(            \n                GetAmiFilterArgs.builder()\n                    .name(\"name\")\n                    .values(\"myami-*\")\n                    .build(),\n                GetAmiFilterArgs.builder()\n                    .name(\"root-device-type\")\n                    .values(\"ebs\")\n                    .build(),\n                GetAmiFilterArgs.builder()\n                    .name(\"virtualization-type\")\n                    .values(\"hvm\")\n                    .build())\n            .mostRecent(true)\n            .nameRegex(\"^myami-\\\\d{3}\")\n            .owners(\"self\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    Fn::Invoke:\n      Function: aws:ec2:getAmi\n      Arguments:\n        executableUsers:\n          - self\n        filters:\n          - name: name\n            values:\n              - myami-*\n          - name: root-device-type\n            values:\n              - ebs\n          - name: virtualization-type\n            values:\n              - hvm\n        mostRecent: true\n        nameRegex: ^myami-\\d{3}\n        owners:\n          - self\n```\n{{% /example %}}\n{{% /examples %}}"
    },
    "aws:ec2/getAmiIds:getAmiIds": {
      "inputs": {
        "properties": {
          "executableUsers": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Limit search to users with *explicit* launch\npermission on  the image. Valid items are the numeric account ID or `self`.\n"
          },
          "filters": {
            "type": "array",
            "items": {
              "$ref": "#/types/aws:ec2/getAmiIdsFilter:getAmiIdsFilter"
            },
            "description": "One or more name/value pairs to filter off of. There\nare several valid keys, for a full reference, check out\n[describe-images in the AWS CLI reference][1].\n"
          },
          "nameRegex": {
            "type": "string",
            "description": "A regex string to apply to the AMI list returned\nby AWS. This allows more advanced filtering not supported from the AWS API.\nThis filtering is done locally on what AWS returns, and could have a performance\nimpact if the result is large. Combine this with other\noptions to narrow down the list AWS returns.\n"
          },
          "owners": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of AMI owners to limit search. At least 1 value must be specified. Valid values: an AWS account ID, `self` (the current account), or an AWS owner alias (e.g., `amazon`, `aws-marketplace`, `microsoft`).\n"
          },
          "sortAscending": {
            "type": "boolean",
            "description": "Used to sort AMIs by creation time.\n"
          }
        },
        "required": [
          "owners"
        ],
        "description": "A collection of arguments for invoking getAmiIds.\n"
      },
      "outputs": {
        "properties": {
          "executableUsers": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "filters": {
            "type": "array",
            "items": {
              "$ref": "#/types/aws:ec2/getAmiIdsFilter:getAmiIdsFilter"
            }
          },
          "id": {
            "type": "string",
            "description": "The provider-assigned unique ID for this managed resource.\n"
          },
          "ids": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "nameRegex": {
            "type": "string"
          },
          "owners": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "sortAscending": {
            "type": "boolean"
          }
        },
        "required": [
          "ids",
          "owners",
          "id"
        ],
        "description": "A collection of values returned by getAmiIds.\n"
      },
      "description": "Use this data source to get a list of AMI IDs matching the specified criteria.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as aws from \"@pulumi/aws\";\n\nconst ubuntu = pulumi.output(aws.ec2.getAmiIds({\n    filters: [{\n        name: \"name\",\n        values: [\"ubuntu/images/ubuntu-*-*-amd64-server-*\"],\n    }],\n    owners: [\"099720109477\"],\n}));\n```\n```python\nimport pulumi\nimport pulumi_aws as aws\n\nubuntu = aws.ec2.get_ami_ids(filters=[aws.ec2.GetAmiIdsFilterArgs(\n        name=\"name\",\n        values=[\"ubuntu/images/ubuntu-*-*-amd64-server-*\"],\n    )],\n    owners=[\"099720109477\"])\n```\n```csharp\nusing Pulumi;\nusing Aws = Pulumi.Aws;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var ubuntu = Output.Create(Aws.Ec2.GetAmiIds.InvokeAsync(new Aws.Ec2.GetAmiIdsArgs\n        {\n            Filters = \n            {\n                new Aws.Ec2.Inputs.GetAmiIdsFilterArgs\n                {\n                    Name = \"name\",\n                    Values = \n                    {\n                        \"ubuntu/images/ubuntu-*-*-amd64-server-*\",\n                    },\n                },\n            },\n            Owners = \n            {\n                \"099720109477\",\n            },\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/ec2\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := ec2.GetAmiIds(ctx, &ec2.GetAmiIdsArgs{\n\t\t\tFilters: []ec2.GetAmiIdsFilter{\n\t\t\t\tec2.GetAmiIdsFilter{\n\t\t\t\t\tName: \"name\",\n\t\t\t\t\tValues: []string{\n\t\t\t\t\t\t\"ubuntu/images/ubuntu-*-*-amd64-server-*\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tOwners: []string{\n\t\t\t\t\"099720109477\",\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.aws.ec2.Ec2Functions;\nimport com.pulumi.aws.autoscaling.inputs.GetAmiIdsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var ubuntu = Ec2Functions.getAmiIds(GetAmiIdsArgs.builder()\n            .filters(GetAmiIdsFilterArgs.builder()\n                .name(\"name\")\n                .values(\"ubuntu/images/ubuntu-*-*-amd64-server-*\")\n                .build())\n            .owners(\"099720109477\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  ubuntu:\n    Fn::Invoke:\n      Function: aws:ec2:getAmiIds\n      Arguments:\n        filters:\n          - name: name\n            values:\n              - ubuntu/images/ubuntu-*-*-amd64-server-*\n        owners:\n          - 099720109477\n```\n{{% /example %}}\n{{% /examples %}}"
    },
    "aws:ec2/getCoipPool:getCoipPool": {
      "inputs": {
        "properties": {
          "filters": {
            "type": "array",
            "items": {
              "$ref": "#/types/aws:ec2/getCoipPoolFilter:getCoipPoolFilter"
            }
          },
          "localGatewayRouteTableId": {
            "type": "string",
            "description": "Local Gateway Route Table Id assigned to desired COIP Pool\n"
          },
          "poolId": {
            "type": "string",
            "description": "The id of the specific COIP Pool to retrieve.\n"
          },
          "tags": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "A mapping of tags, each pair of which must exactly match\na pair on the desired COIP Pool.\n"
          }
        },
        "description": "A collection of arguments for invoking getCoipPool.\n"
      },
      "outputs": {
        "properties": {
          "arn": {
            "type": "string",
            "description": "ARN of the COIP pool\n"
          },
          "filters": {
            "type": "array",
            "items": {
              "$ref": "#/types/aws:ec2/getCoipPoolFilter:getCoipPoolFilter"
            }
          },
          "id": {
            "type": "string",
            "description": "The provider-assigned unique ID for this managed resource.\n"
          },
          "localGatewayRouteTableId": {
            "type": "string"
          },
          "poolCidrs": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Set of CIDR blocks in pool\n"
          },
          "poolId": {
            "type": "string"
          },
          "tags": {
            "additionalProperties": {
              "type": "string"
            }
          }
        },
        "required": [
          "arn",
          "localGatewayRouteTableId",
          "poolCidrs",
          "poolId",
          "tags",
          "id"
        ],
        "description": "A collection of values returned by getCoipPool.\n"
      },
      "description": "Provides details about a specific EC2 Customer-Owned IP Pool.\n\nThis data source can prove useful when a module accepts a coip pool id as\nan input variable and needs to, for example, determine the CIDR block of that\nCOIP Pool.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\nThe following example returns a specific coip pool ID\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.aws.ec2.Ec2Functions;\nimport com.pulumi.aws.ec2.inputs.GetCoipPoolArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var config = ctx.config();\n        final var coipPoolId = config.get(\"coipPoolId\");\n        final var selected = Ec2Functions.getCoipPool(GetCoipPoolArgs.builder()\n            .id(coipPoolId)\n            .build());\n\n    }\n}\n```\n```yaml\nconfiguration:\n  coipPoolId:\n    type: dynamic\nvariables:\n  selected:\n    Fn::Invoke:\n      Function: aws:ec2:getCoipPool\n      Arguments:\n        id: ${coipPoolId}\n```\n{{% /example %}}\n{{% /examples %}}"
    },
    "aws:ec2/getCoipPools:getCoipPools": {
      "inputs": {
        "properties": {
          "filters": {
            "type": "array",
            "items": {
              "$ref": "#/types/aws:ec2/getCoipPoolsFilter:getCoipPoolsFilter"
            },
            "description": "Custom filter block as described below.\n"
          },
          "tags": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "A mapping of tags, each pair of which must exactly match\na pair on the desired aws_ec2_coip_pools.\n"
          }
        },
        "description": "A collection of arguments for invoking getCoipPools.\n"
      },
      "outputs": {
        "properties": {
          "filters": {
            "type": "array",
            "items": {
              "$ref": "#/types/aws:ec2/getCoipPoolsFilter:getCoipPoolsFilter"
            }
          },
          "id": {
            "type": "string",
            "description": "The provider-assigned unique ID for this managed resource.\n"
          },
          "poolIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Set of COIP Pool Identifiers\n"
          },
          "tags": {
            "additionalProperties": {
              "type": "string"
            }
          }
        },
        "required": [
          "poolIds",
          "tags",
          "id"
        ],
        "description": "A collection of values returned by getCoipPools.\n"
      },
      "description": "Provides information for multiple EC2 Customer-Owned IP Pools, such as their identifiers.\n"
    },
    "aws:ec2/getCustomerGateway:getCustomerGateway": {
      "inputs": {
        "properties": {
          "filters": {
            "type": "array",
            "items": {
              "$ref": "#/types/aws:ec2/getCustomerGatewayFilter:getCustomerGatewayFilter"
            },
            "description": "One or more [name-value pairs][dcg-filters] to filter by.\n"
          },
          "id": {
            "type": "string",
            "description": "The ID of the gateway.\n"
          },
          "tags": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "Map of key-value pairs assigned to the gateway.\n"
          }
        },
        "description": "A collection of arguments for invoking getCustomerGateway.\n"
      },
      "outputs": {
        "properties": {
          "arn": {
            "type": "string",
            "description": "The ARN of the customer gateway.\n"
          },
          "bgpAsn": {
            "type": "integer",
            "description": "The gateway's Border Gateway Protocol (BGP) Autonomous System Number (ASN).\n"
          },
          "certificateArn": {
            "type": "string",
            "description": "The Amazon Resource Name (ARN) for the customer gateway certificate.\n"
          },
          "deviceName": {
            "type": "string",
            "description": "A name for the customer gateway device.\n"
          },
          "filters": {
            "type": "array",
            "items": {
              "$ref": "#/types/aws:ec2/getCustomerGatewayFilter:getCustomerGatewayFilter"
            }
          },
          "id": {
            "type": "string"
          },
          "ipAddress": {
            "type": "string",
            "description": "The IP address of the gateway's Internet-routable external interface.\n"
          },
          "tags": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "Map of key-value pairs assigned to the gateway.\n"
          },
          "type": {
            "type": "string",
            "description": "The type of customer gateway. The only type AWS supports at this time is \"ipsec.1\".\n"
          }
        },
        "required": [
          "arn",
          "bgpAsn",
          "certificateArn",
          "deviceName",
          "id",
          "ipAddress",
          "tags",
          "type"
        ],
        "description": "A collection of values returned by getCustomerGateway.\n"
      },
      "description": "Get an existing AWS Customer Gateway.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as aws from \"@pulumi/aws\";\n\nconst foo = aws.ec2.getCustomerGateway({\n    filters: [{\n        name: \"tag:Name\",\n        values: [\"foo-prod\"],\n    }],\n});\nconst main = new aws.ec2.VpnGateway(\"main\", {\n    vpcId: aws_vpc.main.id,\n    amazonSideAsn: \"7224\",\n});\nconst transit = new aws.ec2.VpnConnection(\"transit\", {\n    vpnGatewayId: main.id,\n    customerGatewayId: foo.then(foo => foo.id),\n    type: foo.then(foo => foo.type),\n    staticRoutesOnly: false,\n});\n```\n```python\nimport pulumi\nimport pulumi_aws as aws\n\nfoo = aws.ec2.get_customer_gateway(filters=[aws.ec2.GetCustomerGatewayFilterArgs(\n    name=\"tag:Name\",\n    values=[\"foo-prod\"],\n)])\nmain = aws.ec2.VpnGateway(\"main\",\n    vpc_id=aws_vpc[\"main\"][\"id\"],\n    amazon_side_asn=\"7224\")\ntransit = aws.ec2.VpnConnection(\"transit\",\n    vpn_gateway_id=main.id,\n    customer_gateway_id=foo.id,\n    type=foo.type,\n    static_routes_only=False)\n```\n```csharp\nusing Pulumi;\nusing Aws = Pulumi.Aws;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var foo = Output.Create(Aws.Ec2.GetCustomerGateway.InvokeAsync(new Aws.Ec2.GetCustomerGatewayArgs\n        {\n            Filters = \n            {\n                new Aws.Ec2.Inputs.GetCustomerGatewayFilterArgs\n                {\n                    Name = \"tag:Name\",\n                    Values = \n                    {\n                        \"foo-prod\",\n                    },\n                },\n            },\n        }));\n        var main = new Aws.Ec2.VpnGateway(\"main\", new Aws.Ec2.VpnGatewayArgs\n        {\n            VpcId = aws_vpc.Main.Id,\n            AmazonSideAsn = \"7224\",\n        });\n        var transit = new Aws.Ec2.VpnConnection(\"transit\", new Aws.Ec2.VpnConnectionArgs\n        {\n            VpnGatewayId = main.Id,\n            CustomerGatewayId = foo.Apply(foo => foo.Id),\n            Type = foo.Apply(foo => foo.Type),\n            StaticRoutesOnly = false,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/ec2\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tfoo, err := ec2.LookupCustomerGateway(ctx, &ec2.LookupCustomerGatewayArgs{\n\t\t\tFilters: []ec2.GetCustomerGatewayFilter{\n\t\t\t\tec2.GetCustomerGatewayFilter{\n\t\t\t\t\tName: \"tag:Name\",\n\t\t\t\t\tValues: []string{\n\t\t\t\t\t\t\"foo-prod\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tmain, err := ec2.NewVpnGateway(ctx, \"main\", &ec2.VpnGatewayArgs{\n\t\t\tVpcId:         pulumi.Any(aws_vpc.Main.Id),\n\t\t\tAmazonSideAsn: pulumi.String(\"7224\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = ec2.NewVpnConnection(ctx, \"transit\", &ec2.VpnConnectionArgs{\n\t\t\tVpnGatewayId:      main.ID(),\n\t\t\tCustomerGatewayId: pulumi.String(foo.Id),\n\t\t\tType:              pulumi.String(foo.Type),\n\t\t\tStaticRoutesOnly:  pulumi.Bool(false),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.aws.ec2.Ec2Functions;\nimport com.pulumi.aws.ec2.inputs.GetCustomerGatewayArgs;\nimport com.pulumi.aws.ec2.VpnGateway;\nimport com.pulumi.aws.ec2.VpnGatewayArgs;\nimport com.pulumi.aws.ec2.VpnConnection;\nimport com.pulumi.aws.ec2.VpnConnectionArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var foo = Ec2Functions.getCustomerGateway(GetCustomerGatewayArgs.builder()\n            .filters(GetCustomerGatewayFilterArgs.builder()\n                .name(\"tag:Name\")\n                .values(\"foo-prod\")\n                .build())\n            .build());\n\n        var main = new VpnGateway(\"main\", VpnGatewayArgs.builder()        \n            .vpcId(aws_vpc.main().id())\n            .amazonSideAsn(7224)\n            .build());\n\n        var transit = new VpnConnection(\"transit\", VpnConnectionArgs.builder()        \n            .vpnGatewayId(main.id())\n            .customerGatewayId(foo.applyValue(getCustomerGatewayResult -> getCustomerGatewayResult.id()))\n            .type(foo.applyValue(getCustomerGatewayResult -> getCustomerGatewayResult.type()))\n            .staticRoutesOnly(false)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  main:\n    type: aws:ec2:VpnGateway\n    properties:\n      vpcId: ${aws_vpc.main.id}\n      amazonSideAsn: 7224\n  transit:\n    type: aws:ec2:VpnConnection\n    properties:\n      vpnGatewayId: ${main.id}\n      customerGatewayId: ${foo.id}\n      type: ${foo.type}\n      staticRoutesOnly: false\nvariables:\n  foo:\n    Fn::Invoke:\n      Function: aws:ec2:getCustomerGateway\n      Arguments:\n        filters:\n          - name: tag:Name\n            values:\n              - foo-prod\n```\n{{% /example %}}\n{{% /examples %}}"
    },
    "aws:ec2/getDedicatedHost:getDedicatedHost": {
      "inputs": {
        "properties": {
          "filters": {
            "type": "array",
            "items": {
              "$ref": "#/types/aws:ec2/getDedicatedHostFilter:getDedicatedHostFilter"
            },
            "description": "Configuration block. Detailed below.\n"
          },
          "hostId": {
            "type": "string",
            "description": "The ID of the Dedicated Host.\n"
          },
          "tags": {
            "additionalProperties": {
              "type": "string"
            }
          }
        },
        "description": "A collection of arguments for invoking getDedicatedHost.\n"
      },
      "outputs": {
        "properties": {
          "arn": {
            "type": "string",
            "description": "The ARN of the Dedicated Host.\n"
          },
          "autoPlacement": {
            "type": "string",
            "description": "Whether auto-placement is on or off.\n"
          },
          "availabilityZone": {
            "type": "string",
            "description": "The Availability Zone of the Dedicated Host.\n"
          },
          "cores": {
            "type": "integer",
            "description": "The number of cores on the Dedicated Host.\n"
          },
          "filters": {
            "type": "array",
            "items": {
              "$ref": "#/types/aws:ec2/getDedicatedHostFilter:getDedicatedHostFilter"
            }
          },
          "hostId": {
            "type": "string"
          },
          "hostRecovery": {
            "type": "string",
            "description": "Indicates whether host recovery is enabled or disabled for the Dedicated Host.\n"
          },
          "id": {
            "type": "string",
            "description": "The provider-assigned unique ID for this managed resource.\n"
          },
          "instanceFamily": {
            "type": "string",
            "description": "The instance family supported by the Dedicated Host. For example, \"m5\".\n"
          },
          "instanceType": {
            "type": "string",
            "description": "The instance type supported by the Dedicated Host. For example, \"m5.large\". If the host supports multiple instance types, no instanceType is returned.\n"
          },
          "outpostArn": {
            "type": "string",
            "description": "The Amazon Resource Name (ARN) of the AWS Outpost on which the Dedicated Host is allocated.\n"
          },
          "ownerId": {
            "type": "string",
            "description": "The ID of the AWS account that owns the Dedicated Host.\n"
          },
          "sockets": {
            "type": "integer",
            "description": "The number of sockets on the Dedicated Host.\n"
          },
          "tags": {
            "additionalProperties": {
              "type": "string"
            }
          },
          "totalVcpus": {
            "type": "integer",
            "description": "The total number of vCPUs on the Dedicated Host.\n"
          }
        },
        "required": [
          "arn",
          "autoPlacement",
          "availabilityZone",
          "cores",
          "hostId",
          "hostRecovery",
          "instanceFamily",
          "instanceType",
          "outpostArn",
          "ownerId",
          "sockets",
          "tags",
          "totalVcpus",
          "id"
        ],
        "description": "A collection of values returned by getDedicatedHost.\n"
      },
      "description": "Use this data source to get information about an EC2 Dedicated Host.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n### Filter Example\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as aws from \"@pulumi/aws\";\n\nconst test = pulumi.output(aws.ec2.getDedicatedHost({\n    filters: [{\n        name: \"instance-type\",\n        values: [\"c5.18xlarge\"],\n    }],\n}));\n```\n```python\nimport pulumi\nimport pulumi_aws as aws\n\ntest = aws.ec2.get_dedicated_host(filters=[aws.ec2.GetDedicatedHostFilterArgs(\n    name=\"instance-type\",\n    values=[\"c5.18xlarge\"],\n)])\n```\n```csharp\nusing Pulumi;\nusing Aws = Pulumi.Aws;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var test = Output.Create(Aws.Ec2.GetDedicatedHost.InvokeAsync(new Aws.Ec2.GetDedicatedHostArgs\n        {\n            Filters = \n            {\n                new Aws.Ec2.Inputs.GetDedicatedHostFilterArgs\n                {\n                    Name = \"instance-type\",\n                    Values = \n                    {\n                        \"c5.18xlarge\",\n                    },\n                },\n            },\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/ec2\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := ec2.LookupDedicatedHost(ctx, &ec2.LookupDedicatedHostArgs{\n\t\t\tFilters: []ec2.GetDedicatedHostFilter{\n\t\t\t\tec2.GetDedicatedHostFilter{\n\t\t\t\t\tName: \"instance-type\",\n\t\t\t\t\tValues: []string{\n\t\t\t\t\t\t\"c5.18xlarge\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.aws.ec2.Ec2Functions;\nimport com.pulumi.aws.ec2.inputs.GetDedicatedHostArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var test = Ec2Functions.getDedicatedHost(GetDedicatedHostArgs.builder()\n            .filters(GetDedicatedHostFilterArgs.builder()\n                .name(\"instance-type\")\n                .values(\"c5.18xlarge\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  test:\n    Fn::Invoke:\n      Function: aws:ec2:getDedicatedHost\n      Arguments:\n        filters:\n          - name: instance-type\n            values:\n              - c5.18xlarge\n```\n{{% /example %}}\n{{% /examples %}}"
    },
    "aws:ec2/getEips:getEips": {
      "inputs": {
        "properties": {
          "filters": {
            "type": "array",
            "items": {
              "$ref": "#/types/aws:ec2/getEipsFilter:getEipsFilter"
            },
            "description": "Custom filter block as described below.\n"
          },
          "tags": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "A map of tags, each pair of which must exactly match a pair on the desired Elastic IPs.\n"
          }
        },
        "description": "A collection of arguments for invoking getEips.\n"
      },
      "outputs": {
        "properties": {
          "allocationIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "A list of all the allocation IDs for address for use with EC2-VPC.\n"
          },
          "filters": {
            "type": "array",
            "items": {
              "$ref": "#/types/aws:ec2/getEipsFilter:getEipsFilter"
            }
          },
          "id": {
            "type": "string",
            "description": "The provider-assigned unique ID for this managed resource.\n"
          },
          "publicIps": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "A list of all the Elastic IP addresses.\n"
          },
          "tags": {
            "additionalProperties": {
              "type": "string"
            }
          }
        },
        "required": [
          "allocationIds",
          "publicIps",
          "tags",
          "id"
        ],
        "description": "A collection of values returned by getEips.\n"
      },
      "description": "Provides a list of Elastic IPs in a region.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\nThe following shows outputing all Elastic IPs with the a specific tag value.\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as aws from \"@pulumi/aws\";\n\nconst example = aws.ec2.getEips({\n    tags: {\n        Env: \"dev\",\n    },\n});\nexport const allocationIds = example.then(example => example.allocationIds);\nexport const publicIps = example.then(example => example.publicIps);\n```\n```python\nimport pulumi\nimport pulumi_aws as aws\n\nexample = aws.ec2.get_eips(tags={\n    \"Env\": \"dev\",\n})\npulumi.export(\"allocationIds\", example.allocation_ids)\npulumi.export(\"publicIps\", example.public_ips)\n```\n```csharp\nusing Pulumi;\nusing Aws = Pulumi.Aws;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var example = Output.Create(Aws.Ec2.GetEips.InvokeAsync(new Aws.Ec2.GetEipsArgs\n        {\n            Tags = \n            {\n                { \"Env\", \"dev\" },\n            },\n        }));\n        this.AllocationIds = example.Apply(example => example.AllocationIds);\n        this.PublicIps = example.Apply(example => example.PublicIps);\n    }\n\n    [Output(\"allocationIds\")]\n    public Output<string> AllocationIds { get; set; }\n    [Output(\"publicIps\")]\n    public Output<string> PublicIps { get; set; }\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/ec2\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample, err := ec2.GetEips(ctx, &ec2.GetEipsArgs{\n\t\t\tTags: map[string]interface{}{\n\t\t\t\t\"Env\": \"dev\",\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"allocationIds\", example.AllocationIds)\n\t\tctx.Export(\"publicIps\", example.PublicIps)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.aws.ec2.Ec2Functions;\nimport com.pulumi.aws.ec2.inputs.GetEipsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = Ec2Functions.getEips(GetEipsArgs.builder()\n            .tags(Map.of(\"Env\", \"dev\"))\n            .build());\n\n        ctx.export(\"allocationIds\", example.applyValue(getEipsResult -> getEipsResult.allocationIds()));\n        ctx.export(\"publicIps\", example.applyValue(getEipsResult -> getEipsResult.publicIps()));\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    Fn::Invoke:\n      Function: aws:ec2:getEips\n      Arguments:\n        tags:\n          Env: dev\noutputs:\n  # VPC EIPs.\n  allocationIds: ${example.allocationIds}\n  # EC2-Classic EIPs.\n  publicIps: ${example.publicIps}\n```\n{{% /example %}}\n{{% /examples %}}"
    },
    "aws:ec2/getElasticIp:getElasticIp": {
      "inputs": {
        "properties": {
          "filters": {
            "type": "array",
            "items": {
              "$ref": "#/types/aws:ec2/getElasticIpFilter:getElasticIpFilter"
            },
            "description": "One or more name/value pairs to use as filters. There are several valid keys, for a full reference, check out the [EC2 API Reference](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeAddresses.html).\n"
          },
          "id": {
            "type": "string",
            "description": "The allocation id of the specific VPC EIP to retrieve. If a classic EIP is required, do NOT set `id`, only set `public_ip`\n"
          },
          "publicIp": {
            "type": "string",
            "description": "The public IP of the specific EIP to retrieve.\n"
          },
          "tags": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "A map of tags, each pair of which must exactly match a pair on the desired Elastic IP\n"
          }
        },
        "description": "A collection of arguments for invoking getElasticIp.\n"
      },
      "outputs": {
        "properties": {
          "associationId": {
            "type": "string",
            "description": "The ID representing the association of the address with an instance in a VPC.\n"
          },
          "carrierIp": {
            "type": "string",
            "description": "The carrier IP address.\n"
          },
          "customerOwnedIp": {
            "type": "string",
            "description": "Customer Owned IP.\n"
          },
          "customerOwnedIpv4Pool": {
            "type": "string",
            "description": "The ID of a Customer Owned IP Pool. For more on customer owned IP addressed check out [Customer-owned IP addresses guide](https://docs.aws.amazon.com/outposts/latest/userguide/outposts-networking-components.html#ip-addressing)\n"
          },
          "domain": {
            "type": "string",
            "description": "Indicates whether the address is for use in EC2-Classic (standard) or in a VPC (vpc).\n"
          },
          "filters": {
            "type": "array",
            "items": {
              "$ref": "#/types/aws:ec2/getElasticIpFilter:getElasticIpFilter"
            }
          },
          "id": {
            "type": "string",
            "description": "If VPC Elastic IP, the allocation identifier. If EC2-Classic Elastic IP, the public IP address.\n"
          },
          "instanceId": {
            "type": "string",
            "description": "The ID of the instance that the address is associated with (if any).\n"
          },
          "networkInterfaceId": {
            "type": "string",
            "description": "The ID of the network interface.\n"
          },
          "networkInterfaceOwnerId": {
            "type": "string",
            "description": "The ID of the AWS account that owns the network interface.\n"
          },
          "privateDns": {
            "type": "string",
            "description": "The Private DNS associated with the Elastic IP address.\n"
          },
          "privateIp": {
            "type": "string",
            "description": "The private IP address associated with the Elastic IP address.\n"
          },
          "publicDns": {
            "type": "string",
            "description": "Public DNS associated with the Elastic IP address.\n"
          },
          "publicIp": {
            "type": "string",
            "description": "Public IP address of Elastic IP.\n"
          },
          "publicIpv4Pool": {
            "type": "string",
            "description": "The ID of an address pool.\n"
          },
          "tags": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "Key-value map of tags associated with Elastic IP.\n"
          }
        },
        "required": [
          "associationId",
          "carrierIp",
          "customerOwnedIp",
          "customerOwnedIpv4Pool",
          "domain",
          "id",
          "instanceId",
          "networkInterfaceId",
          "networkInterfaceOwnerId",
          "privateDns",
          "privateIp",
          "publicDns",
          "publicIp",
          "publicIpv4Pool",
          "tags"
        ],
        "description": "A collection of values returned by getElasticIp.\n"
      },
      "description": "`aws.ec2.Eip` provides details about a specific Elastic IP.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n### Search By Allocation ID (VPC only)\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as aws from \"@pulumi/aws\";\n\nconst byAllocationId = pulumi.output(aws.ec2.getElasticIp({\n    id: \"eipalloc-12345678\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_aws as aws\n\nby_allocation_id = aws.ec2.get_elastic_ip(id=\"eipalloc-12345678\")\n```\n```csharp\nusing Pulumi;\nusing Aws = Pulumi.Aws;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var byAllocationId = Output.Create(Aws.Ec2.GetElasticIp.InvokeAsync(new Aws.Ec2.GetElasticIpArgs\n        {\n            Id = \"eipalloc-12345678\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/ec2\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := ec2.GetElasticIp(ctx, &ec2.GetElasticIpArgs{\n\t\t\tId: pulumi.StringRef(\"eipalloc-12345678\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.aws.ec2.Ec2Functions;\nimport com.pulumi.aws.ec2.inputs.GetElasticIpArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var byAllocationId = Ec2Functions.getElasticIp(GetElasticIpArgs.builder()\n            .id(\"eipalloc-12345678\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  byAllocationId:\n    Fn::Invoke:\n      Function: aws:ec2:getElasticIp\n      Arguments:\n        id: eipalloc-12345678\n```\n{{% /example %}}\n{{% example %}}\n### Search By Filters (EC2-Classic or VPC)\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as aws from \"@pulumi/aws\";\n\nconst byFilter = pulumi.output(aws.ec2.getElasticIp({\n    filters: [{\n        name: \"tag:Name\",\n        values: [\"exampleNameTagValue\"],\n    }],\n}));\n```\n```python\nimport pulumi\nimport pulumi_aws as aws\n\nby_filter = aws.ec2.get_elastic_ip(filters=[aws.ec2.GetElasticIpFilterArgs(\n    name=\"tag:Name\",\n    values=[\"exampleNameTagValue\"],\n)])\n```\n```csharp\nusing Pulumi;\nusing Aws = Pulumi.Aws;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var byFilter = Output.Create(Aws.Ec2.GetElasticIp.InvokeAsync(new Aws.Ec2.GetElasticIpArgs\n        {\n            Filters = \n            {\n                new Aws.Ec2.Inputs.GetElasticIpFilterArgs\n                {\n                    Name = \"tag:Name\",\n                    Values = \n                    {\n                        \"exampleNameTagValue\",\n                    },\n                },\n            },\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/ec2\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := ec2.GetElasticIp(ctx, &ec2.GetElasticIpArgs{\n\t\t\tFilters: []ec2.GetElasticIpFilter{\n\t\t\t\tec2.GetElasticIpFilter{\n\t\t\t\t\tName: \"tag:Name\",\n\t\t\t\t\tValues: []string{\n\t\t\t\t\t\t\"exampleNameTagValue\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.aws.ec2.Ec2Functions;\nimport com.pulumi.aws.ec2.inputs.GetElasticIpArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var byFilter = Ec2Functions.getElasticIp(GetElasticIpArgs.builder()\n            .filters(GetElasticIpFilterArgs.builder()\n                .name(\"tag:Name\")\n                .values(\"exampleNameTagValue\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  byFilter:\n    Fn::Invoke:\n      Function: aws:ec2:getElasticIp\n      Arguments:\n        filters:\n          - name: tag:Name\n            values:\n              - exampleNameTagValue\n```\n{{% /example %}}\n{{% example %}}\n### Search By Public IP (EC2-Classic or VPC)\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as aws from \"@pulumi/aws\";\n\nconst byPublicIp = pulumi.output(aws.ec2.getElasticIp({\n    publicIp: \"1.2.3.4\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_aws as aws\n\nby_public_ip = aws.ec2.get_elastic_ip(public_ip=\"1.2.3.4\")\n```\n```csharp\nusing Pulumi;\nusing Aws = Pulumi.Aws;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var byPublicIp = Output.Create(Aws.Ec2.GetElasticIp.InvokeAsync(new Aws.Ec2.GetElasticIpArgs\n        {\n            PublicIp = \"1.2.3.4\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/ec2\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := ec2.GetElasticIp(ctx, &ec2.GetElasticIpArgs{\n\t\t\tPublicIp: pulumi.StringRef(\"1.2.3.4\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.aws.ec2.Ec2Functions;\nimport com.pulumi.aws.ec2.inputs.GetElasticIpArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var byPublicIp = Ec2Functions.getElasticIp(GetElasticIpArgs.builder()\n            .publicIp(\"1.2.3.4\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  byPublicIp:\n    Fn::Invoke:\n      Function: aws:ec2:getElasticIp\n      Arguments:\n        publicIp: 1.2.3.4\n```\n{{% /example %}}\n{{% example %}}\n### Search By Tags (EC2-Classic or VPC)\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as aws from \"@pulumi/aws\";\n\nconst byTags = pulumi.output(aws.ec2.getElasticIp({\n    tags: {\n        Name: \"exampleNameTagValue\",\n    },\n}));\n```\n```python\nimport pulumi\nimport pulumi_aws as aws\n\nby_tags = aws.ec2.get_elastic_ip(tags={\n    \"Name\": \"exampleNameTagValue\",\n})\n```\n```csharp\nusing Pulumi;\nusing Aws = Pulumi.Aws;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var byTags = Output.Create(Aws.Ec2.GetElasticIp.InvokeAsync(new Aws.Ec2.GetElasticIpArgs\n        {\n            Tags = \n            {\n                { \"Name\", \"exampleNameTagValue\" },\n            },\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/ec2\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := ec2.GetElasticIp(ctx, &ec2.GetElasticIpArgs{\n\t\t\tTags: map[string]interface{}{\n\t\t\t\t\"Name\": \"exampleNameTagValue\",\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.aws.ec2.Ec2Functions;\nimport com.pulumi.aws.ec2.inputs.GetElasticIpArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var byTags = Ec2Functions.getElasticIp(GetElasticIpArgs.builder()\n            .tags(Map.of(\"Name\", \"exampleNameTagValue\"))\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  byTags:\n    Fn::Invoke:\n      Function: aws:ec2:getElasticIp\n      Arguments:\n        tags:\n          Name: exampleNameTagValue\n```\n{{% /example %}}\n{{% /examples %}}"
    },
    "aws:ec2/getInstanceTypeOffering:getInstanceTypeOffering": {
      "inputs": {
        "properties": {
          "filters": {
            "type": "array",
            "items": {
              "$ref": "#/types/aws:ec2/getInstanceTypeOfferingFilter:getInstanceTypeOfferingFilter"
            },
            "description": "One or more configuration blocks containing name-values filters. See the [EC2 API Reference](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeInstanceTypeOfferings.html) for supported filters. Detailed below.\n"
          },
          "locationType": {
            "type": "string",
            "description": "Location type. Defaults to `region`. Valid values: `availability-zone`, `availability-zone-id`, and `region`.\n"
          },
          "preferredInstanceTypes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Ordered list of preferred EC2 Instance Types. The first match in this list will be returned. If no preferred matches are found and the original search returned more than one result, an error is returned.\n"
          }
        },
        "description": "A collection of arguments for invoking getInstanceTypeOffering.\n"
      },
      "outputs": {
        "properties": {
          "filters": {
            "type": "array",
            "items": {
              "$ref": "#/types/aws:ec2/getInstanceTypeOfferingFilter:getInstanceTypeOfferingFilter"
            }
          },
          "id": {
            "type": "string",
            "description": "The provider-assigned unique ID for this managed resource.\n"
          },
          "instanceType": {
            "type": "string",
            "description": "EC2 Instance Type.\n"
          },
          "locationType": {
            "type": "string"
          },
          "preferredInstanceTypes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "instanceType",
          "id"
        ],
        "description": "A collection of values returned by getInstanceTypeOffering.\n"
      },
      "description": "Information about single EC2 Instance Type Offering.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as aws from \"@pulumi/aws\";\n\nconst example = pulumi.output(aws.ec2.getInstanceTypeOffering({\n    filters: [{\n        name: \"instance-type\",\n        values: [\n            \"t2.micro\",\n            \"t3.micro\",\n        ],\n    }],\n    preferredInstanceTypes: [\n        \"t3.micro\",\n        \"t2.micro\",\n    ],\n}));\n```\n```python\nimport pulumi\nimport pulumi_aws as aws\n\nexample = aws.ec2.get_instance_type_offering(filters=[aws.ec2.GetInstanceTypeOfferingFilterArgs(\n        name=\"instance-type\",\n        values=[\n            \"t2.micro\",\n            \"t3.micro\",\n        ],\n    )],\n    preferred_instance_types=[\n        \"t3.micro\",\n        \"t2.micro\",\n    ])\n```\n```csharp\nusing Pulumi;\nusing Aws = Pulumi.Aws;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var example = Output.Create(Aws.Ec2.GetInstanceTypeOffering.InvokeAsync(new Aws.Ec2.GetInstanceTypeOfferingArgs\n        {\n            Filters = \n            {\n                new Aws.Ec2.Inputs.GetInstanceTypeOfferingFilterArgs\n                {\n                    Name = \"instance-type\",\n                    Values = \n                    {\n                        \"t2.micro\",\n                        \"t3.micro\",\n                    },\n                },\n            },\n            PreferredInstanceTypes = \n            {\n                \"t3.micro\",\n                \"t2.micro\",\n            },\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/ec2\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := ec2.GetInstanceTypeOffering(ctx, &ec2.GetInstanceTypeOfferingArgs{\n\t\t\tFilters: []ec2.GetInstanceTypeOfferingFilter{\n\t\t\t\tec2.GetInstanceTypeOfferingFilter{\n\t\t\t\t\tName: \"instance-type\",\n\t\t\t\t\tValues: []string{\n\t\t\t\t\t\t\"t2.micro\",\n\t\t\t\t\t\t\"t3.micro\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tPreferredInstanceTypes: []string{\n\t\t\t\t\"t3.micro\",\n\t\t\t\t\"t2.micro\",\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.aws.ec2.Ec2Functions;\nimport com.pulumi.aws.ec2.inputs.GetInstanceTypeOfferingArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = Ec2Functions.getInstanceTypeOffering(GetInstanceTypeOfferingArgs.builder()\n            .filters(GetInstanceTypeOfferingFilterArgs.builder()\n                .name(\"instance-type\")\n                .values(                \n                    \"t2.micro\",\n                    \"t3.micro\")\n                .build())\n            .preferredInstanceTypes(            \n                \"t3.micro\",\n                \"t2.micro\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    Fn::Invoke:\n      Function: aws:ec2:getInstanceTypeOffering\n      Arguments:\n        filters:\n          - name: instance-type\n            values:\n              - t2.micro\n              - t3.micro\n        preferredInstanceTypes:\n          - t3.micro\n          - t2.micro\n```\n{{% /example %}}\n{{% /examples %}}"
    },
    "aws:ec2/getInstanceTypeOfferings:getInstanceTypeOfferings": {
      "inputs": {
        "properties": {
          "filters": {
            "type": "array",
            "items": {
              "$ref": "#/types/aws:ec2/getInstanceTypeOfferingsFilter:getInstanceTypeOfferingsFilter"
            },
            "description": "One or more configuration blocks containing name-values filters. See the [EC2 API Reference](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeInstanceTypeOfferings.html) for supported filters. Detailed below.\n"
          },
          "locationType": {
            "type": "string",
            "description": "Location type. Defaults to `region`. Valid values: `availability-zone`, `availability-zone-id`, and `region`.\n"
          }
        },
        "description": "A collection of arguments for invoking getInstanceTypeOfferings.\n"
      },
      "outputs": {
        "properties": {
          "filters": {
            "type": "array",
            "items": {
              "$ref": "#/types/aws:ec2/getInstanceTypeOfferingsFilter:getInstanceTypeOfferingsFilter"
            }
          },
          "id": {
            "type": "string",
            "description": "The provider-assigned unique ID for this managed resource.\n"
          },
          "instanceTypes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of EC2 Instance Types.\n"
          },
          "locationType": {
            "type": "string"
          },
          "locationTypes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of location types.\n"
          },
          "locations": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of locations.\n"
          }
        },
        "required": [
          "instanceTypes",
          "locationTypes",
          "locations",
          "id"
        ],
        "description": "A collection of values returned by getInstanceTypeOfferings.\n"
      },
      "description": "Information about EC2 Instance Type Offerings.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as aws from \"@pulumi/aws\";\n\nconst example = pulumi.output(aws.ec2.getInstanceTypeOfferings({\n    filters: [\n        {\n            name: \"instance-type\",\n            values: [\n                \"t2.micro\",\n                \"t3.micro\",\n            ],\n        },\n        {\n            name: \"location\",\n            values: [\"usw2-az4\"],\n        },\n    ],\n    locationType: \"availability-zone-id\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_aws as aws\n\nexample = aws.ec2.get_instance_type_offerings(filters=[\n        aws.ec2.GetInstanceTypeOfferingsFilterArgs(\n            name=\"instance-type\",\n            values=[\n                \"t2.micro\",\n                \"t3.micro\",\n            ],\n        ),\n        aws.ec2.GetInstanceTypeOfferingsFilterArgs(\n            name=\"location\",\n            values=[\"usw2-az4\"],\n        ),\n    ],\n    location_type=\"availability-zone-id\")\n```\n```csharp\nusing Pulumi;\nusing Aws = Pulumi.Aws;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var example = Output.Create(Aws.Ec2.GetInstanceTypeOfferings.InvokeAsync(new Aws.Ec2.GetInstanceTypeOfferingsArgs\n        {\n            Filters = \n            {\n                new Aws.Ec2.Inputs.GetInstanceTypeOfferingsFilterArgs\n                {\n                    Name = \"instance-type\",\n                    Values = \n                    {\n                        \"t2.micro\",\n                        \"t3.micro\",\n                    },\n                },\n                new Aws.Ec2.Inputs.GetInstanceTypeOfferingsFilterArgs\n                {\n                    Name = \"location\",\n                    Values = \n                    {\n                        \"usw2-az4\",\n                    },\n                },\n            },\n            LocationType = \"availability-zone-id\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/ec2\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := ec2.GetInstanceTypeOfferings(ctx, &ec2.GetInstanceTypeOfferingsArgs{\n\t\t\tFilters: []ec2.GetInstanceTypeOfferingsFilter{\n\t\t\t\tec2.GetInstanceTypeOfferingsFilter{\n\t\t\t\t\tName: \"instance-type\",\n\t\t\t\t\tValues: []string{\n\t\t\t\t\t\t\"t2.micro\",\n\t\t\t\t\t\t\"t3.micro\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tec2.GetInstanceTypeOfferingsFilter{\n\t\t\t\t\tName: \"location\",\n\t\t\t\t\tValues: []string{\n\t\t\t\t\t\t\"usw2-az4\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tLocationType: pulumi.StringRef(\"availability-zone-id\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.aws.ec2.Ec2Functions;\nimport com.pulumi.aws.ec2.inputs.GetInstanceTypeOfferingsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = Ec2Functions.getInstanceTypeOfferings(GetInstanceTypeOfferingsArgs.builder()\n            .filters(            \n                GetInstanceTypeOfferingsFilterArgs.builder()\n                    .name(\"instance-type\")\n                    .values(                    \n                        \"t2.micro\",\n                        \"t3.micro\")\n                    .build(),\n                GetInstanceTypeOfferingsFilterArgs.builder()\n                    .name(\"location\")\n                    .values(\"usw2-az4\")\n                    .build())\n            .locationType(\"availability-zone-id\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    Fn::Invoke:\n      Function: aws:ec2:getInstanceTypeOfferings\n      Arguments:\n        filters:\n          - name: instance-type\n            values:\n              - t2.micro\n              - t3.micro\n          - name: location\n            values:\n              - usw2-az4\n        locationType: availability-zone-id\n```\n{{% /example %}}\n{{% /examples %}}"
    },
    "aws:ec2/getInstanceTypes:getInstanceTypes": {
      "inputs": {
        "properties": {
          "filters": {
            "type": "array",
            "items": {
              "$ref": "#/types/aws:ec2/getInstanceTypesFilter:getInstanceTypesFilter"
            },
            "description": "One or more configuration blocks containing name-values filters. See the [EC2 API Reference](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeInstanceTypes.html) for supported filters. Detailed below.\n"
          }
        },
        "description": "A collection of arguments for invoking getInstanceTypes.\n"
      },
      "outputs": {
        "properties": {
          "filters": {
            "type": "array",
            "items": {
              "$ref": "#/types/aws:ec2/getInstanceTypesFilter:getInstanceTypesFilter"
            }
          },
          "id": {
            "type": "string",
            "description": "The provider-assigned unique ID for this managed resource.\n"
          },
          "instanceTypes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of EC2 Instance Types.\n"
          }
        },
        "required": [
          "instanceTypes",
          "id"
        ],
        "description": "A collection of values returned by getInstanceTypes.\n"
      },
      "description": "Information about EC2 Instance Types.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as aws from \"@pulumi/aws\";\n\nconst test = pulumi.output(aws.ec2.getInstanceTypes({\n    filters: [\n        {\n            name: \"auto-recovery-supported\",\n            values: [\"true\"],\n        },\n        {\n            name: \"network-info.encryption-in-transit-supported\",\n            values: [\"true\"],\n        },\n        {\n            name: \"instance-storage-supported\",\n            values: [\"true\"],\n        },\n        {\n            name: \"instance-type\",\n            values: [\n                \"g5.2xlarge\",\n                \"g5.4xlarge\",\n            ],\n        },\n    ],\n}));\n```\n```python\nimport pulumi\nimport pulumi_aws as aws\n\ntest = aws.ec2.get_instance_types(filters=[\n    aws.ec2.GetInstanceTypesFilterArgs(\n        name=\"auto-recovery-supported\",\n        values=[\"true\"],\n    ),\n    aws.ec2.GetInstanceTypesFilterArgs(\n        name=\"network-info.encryption-in-transit-supported\",\n        values=[\"true\"],\n    ),\n    aws.ec2.GetInstanceTypesFilterArgs(\n        name=\"instance-storage-supported\",\n        values=[\"true\"],\n    ),\n    aws.ec2.GetInstanceTypesFilterArgs(\n        name=\"instance-type\",\n        values=[\n            \"g5.2xlarge\",\n            \"g5.4xlarge\",\n        ],\n    ),\n])\n```\n```csharp\nusing Pulumi;\nusing Aws = Pulumi.Aws;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var test = Output.Create(Aws.Ec2.GetInstanceTypes.InvokeAsync(new Aws.Ec2.GetInstanceTypesArgs\n        {\n            Filters = \n            {\n                new Aws.Ec2.Inputs.GetInstanceTypesFilterArgs\n                {\n                    Name = \"auto-recovery-supported\",\n                    Values = \n                    {\n                        \"true\",\n                    },\n                },\n                new Aws.Ec2.Inputs.GetInstanceTypesFilterArgs\n                {\n                    Name = \"network-info.encryption-in-transit-supported\",\n                    Values = \n                    {\n                        \"true\",\n                    },\n                },\n                new Aws.Ec2.Inputs.GetInstanceTypesFilterArgs\n                {\n                    Name = \"instance-storage-supported\",\n                    Values = \n                    {\n                        \"true\",\n                    },\n                },\n                new Aws.Ec2.Inputs.GetInstanceTypesFilterArgs\n                {\n                    Name = \"instance-type\",\n                    Values = \n                    {\n                        \"g5.2xlarge\",\n                        \"g5.4xlarge\",\n                    },\n                },\n            },\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/ec2\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := ec2.GetInstanceTypes(ctx, &ec2.GetInstanceTypesArgs{\n\t\t\tFilters: []ec2.GetInstanceTypesFilter{\n\t\t\t\tec2.GetInstanceTypesFilter{\n\t\t\t\t\tName: \"auto-recovery-supported\",\n\t\t\t\t\tValues: []string{\n\t\t\t\t\t\t\"true\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tec2.GetInstanceTypesFilter{\n\t\t\t\t\tName: \"network-info.encryption-in-transit-supported\",\n\t\t\t\t\tValues: []string{\n\t\t\t\t\t\t\"true\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tec2.GetInstanceTypesFilter{\n\t\t\t\t\tName: \"instance-storage-supported\",\n\t\t\t\t\tValues: []string{\n\t\t\t\t\t\t\"true\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tec2.GetInstanceTypesFilter{\n\t\t\t\t\tName: \"instance-type\",\n\t\t\t\t\tValues: []string{\n\t\t\t\t\t\t\"g5.2xlarge\",\n\t\t\t\t\t\t\"g5.4xlarge\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.aws.ec2.Ec2Functions;\nimport com.pulumi.aws.ec2.inputs.GetInstanceTypesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var test = Ec2Functions.getInstanceTypes(GetInstanceTypesArgs.builder()\n            .filters(            \n                GetInstanceTypesFilterArgs.builder()\n                    .name(\"auto-recovery-supported\")\n                    .values(\"true\")\n                    .build(),\n                GetInstanceTypesFilterArgs.builder()\n                    .name(\"network-info.encryption-in-transit-supported\")\n                    .values(\"true\")\n                    .build(),\n                GetInstanceTypesFilterArgs.builder()\n                    .name(\"instance-storage-supported\")\n                    .values(\"true\")\n                    .build(),\n                GetInstanceTypesFilterArgs.builder()\n                    .name(\"instance-type\")\n                    .values(                    \n                        \"g5.2xlarge\",\n                        \"g5.4xlarge\")\n                    .build())\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  test:\n    Fn::Invoke:\n      Function: aws:ec2:getInstanceTypes\n      Arguments:\n        filters:\n          - name: auto-recovery-supported\n            values:\n              - true\n          - name: network-info.encryption-in-transit-supported\n            values:\n              - true\n          - name: instance-storage-supported\n            values:\n              - true\n          - name: instance-type\n            values:\n              - g5.2xlarge\n              - g5.4xlarge\n```\n{{% /example %}}\n{{% /examples %}}"
    },
    "aws:ec2/getInstances:getInstances": {
      "inputs": {
        "properties": {
          "filters": {
            "type": "array",
            "items": {
              "$ref": "#/types/aws:ec2/getInstancesFilter:getInstancesFilter"
            },
            "description": "One or more name/value pairs to use as filters. There are\nseveral valid keys, for a full reference, check out\n[describe-instances in the AWS CLI reference][1].\n"
          },
          "instanceStateNames": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "A list of instance states that should be applicable to the desired instances. The permitted values are: `pending, running, shutting-down, stopped, stopping, terminated`. The default value is `running`.\n"
          },
          "instanceTags": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "A map of tags, each pair of which must\nexactly match a pair on desired instances.\n"
          }
        },
        "description": "A collection of arguments for invoking getInstances.\n"
      },
      "outputs": {
        "properties": {
          "filters": {
            "type": "array",
            "items": {
              "$ref": "#/types/aws:ec2/getInstancesFilter:getInstancesFilter"
            }
          },
          "id": {
            "type": "string",
            "description": "The provider-assigned unique ID for this managed resource.\n"
          },
          "ids": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "IDs of instances found through the filter\n"
          },
          "instanceStateNames": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "instanceTags": {
            "additionalProperties": {
              "type": "string"
            }
          },
          "privateIps": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Private IP addresses of instances found through the filter\n"
          },
          "publicIps": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Public IP addresses of instances found through the filter\n"
          }
        },
        "required": [
          "ids",
          "instanceTags",
          "privateIps",
          "publicIps",
          "id"
        ],
        "description": "A collection of values returned by getInstances.\n"
      },
      "description": "Use this data source to get IDs or IPs of Amazon EC2 instances to be referenced elsewhere,\ne.g., to allow easier migration from another management solution\nor to make it easier for an operator to connect through bastion host(s).\n\n> **Note:** It's strongly discouraged to use this data source for querying ephemeral\ninstances (e.g., managed via autoscaling group), as the output may change at any time\nand you'd need to re-run `apply` every time an instance comes up or dies.\n"
    },
    "aws:ec2/getInternetGateway:getInternetGateway": {
      "inputs": {
        "properties": {
          "filters": {
            "type": "array",
            "items": {
              "$ref": "#/types/aws:ec2/getInternetGatewayFilter:getInternetGatewayFilter"
            },
            "description": "Custom filter block as described below.\n"
          },
          "internetGatewayId": {
            "type": "string",
            "description": "The id of the specific Internet Gateway to retrieve.\n"
          },
          "tags": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "A map of tags, each pair of which must exactly match\na pair on the desired Internet Gateway.\n"
          }
        },
        "description": "A collection of arguments for invoking getInternetGateway.\n"
      },
      "outputs": {
        "properties": {
          "arn": {
            "type": "string",
            "description": "The ARN of the Internet Gateway.\n"
          },
          "attachments": {
            "type": "array",
            "items": {
              "$ref": "#/types/aws:ec2/getInternetGatewayAttachment:getInternetGatewayAttachment"
            }
          },
          "filters": {
            "type": "array",
            "items": {
              "$ref": "#/types/aws:ec2/getInternetGatewayFilter:getInternetGatewayFilter"
            }
          },
          "id": {
            "type": "string",
            "description": "The provider-assigned unique ID for this managed resource.\n"
          },
          "internetGatewayId": {
            "type": "string"
          },
          "ownerId": {
            "type": "string",
            "description": "The ID of the AWS account that owns the internet gateway.\n"
          },
          "tags": {
            "additionalProperties": {
              "type": "string"
            }
          }
        },
        "required": [
          "arn",
          "attachments",
          "internetGatewayId",
          "ownerId",
          "tags",
          "id"
        ],
        "description": "A collection of values returned by getInternetGateway.\n"
      },
      "description": "`aws.ec2.InternetGateway` provides details about a specific Internet Gateway.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as aws from \"@pulumi/aws\";\n\nconst config = new pulumi.Config();\nconst vpcId = config.requireObject(\"vpcId\");\nconst default = aws.ec2.getInternetGateway({\n    filters: [{\n        name: \"attachment.vpc-id\",\n        values: [vpcId],\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_aws as aws\n\nconfig = pulumi.Config()\nvpc_id = config.require_object(\"vpcId\")\ndefault = aws.ec2.get_internet_gateway(filters=[aws.ec2.GetInternetGatewayFilterArgs(\n    name=\"attachment.vpc-id\",\n    values=[vpc_id],\n)])\n```\n```csharp\nusing Pulumi;\nusing Aws = Pulumi.Aws;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var config = new Config();\n        var vpcId = config.RequireObject<dynamic>(\"vpcId\");\n        var @default = Output.Create(Aws.Ec2.GetInternetGateway.InvokeAsync(new Aws.Ec2.GetInternetGatewayArgs\n        {\n            Filters = \n            {\n                new Aws.Ec2.Inputs.GetInternetGatewayFilterArgs\n                {\n                    Name = \"attachment.vpc-id\",\n                    Values = \n                    {\n                        vpcId,\n                    },\n                },\n            },\n        }));\n    }\n\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.aws.ec2.Ec2Functions;\nimport com.pulumi.aws.ec2.inputs.GetInternetGatewayArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var config = ctx.config();\n        final var vpcId = config.get(\"vpcId\");\n        final var default = Ec2Functions.getInternetGateway(GetInternetGatewayArgs.builder()\n            .filters(GetInternetGatewayFilterArgs.builder()\n                .name(\"attachment.vpc-id\")\n                .values(vpcId)\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nconfiguration:\n  vpcId:\n    type: dynamic\nvariables:\n  default:\n    Fn::Invoke:\n      Function: aws:ec2:getInternetGateway\n      Arguments:\n        filters:\n          - name: attachment.vpc-id\n            values:\n              - ${vpcId}\n```\n{{% /example %}}\n{{% /examples %}}"
    }
  },
  "types": {
    "aws:accessanalyzer/ArchiveRuleFilter:ArchiveRuleFilter": {
      "properties": {
        "contains": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Contains comparator.\n",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        },
        "criteria": {
          "type": "string",
          "description": "The filter criteria.\n",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        },
        "eqs": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Equals comparator.\n",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        },
        "exists": {
          "type": "string",
          "description": "Boolean comparator.\n",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        },
        "neqs": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Not Equals comparator.\n",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        }
      },
      "required": [
        "criteria"
      ],
      "language": {
        "nodejs": {
          "requiredOutputs": [
            "contains",
            "criteria",
            "eqs",
            "exists",
            "neqs"
          ]
        }
      }
    },
    "aws:acm/CertificateOptions:CertificateOptions": {
      "properties": {
        "certificateTransparencyLoggingPreference": {
          "type": "string",
          "description": "Specifies whether certificate details should be added to a certificate transparency log. Valid values are `ENABLED` or `DISABLED`. See https://docs.aws.amazon.com/acm/latest/userguide/acm-concepts.html#concept-transparency for more details.\n",
          "willReplaceOnChanges": true,
          "language": {
            "python": {
              "mapCase": false
            }
          }
        }
      }
    },
    "aws:acm/CertificateValidationOption:CertificateValidationOption": {
      "properties": {
        "domainName": {
          "type": "string",
          "description": "A fully qualified domain name (FQDN) in the certificate.\n",
          "willReplaceOnChanges": true,
          "language": {
            "python": {
              "mapCase": false
            }
          }
        },
        "validationDomain": {
          "type": "string",
          "description": "The domain name that you want ACM to use to send you validation emails. This domain name is the suffix of the email addresses that you want ACM to use. This must be the same as the `domain_name` value or a superdomain of the `domain_name` value. For example, if you request a certificate for `\"testing.example.com\"`, you can specify `\"example.com\"` for this value.\n",
          "willReplaceOnChanges": true,
          "language": {
            "python": {
              "mapCase": false
            }
          }
        }
      },
      "required": [
        "domainName",
        "validationDomain"
      ]
    },
    "aws:acm/CertificateDomainValidationOption:CertificateDomainValidationOption": {
      "properties": {
        "domainName": {
          "type": "string",
          "description": "A fully qualified domain name (FQDN) in the certificate.\n",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        },
        "resourceRecordName": {
          "type": "string",
          "description": "The name of the DNS record to create to validate the certificate\n",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        },
        "resourceRecordType": {
          "type": "string",
          "description": "The type of DNS record to create\n",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        },
        "resourceRecordValue": {
          "type": "string",
          "description": "The value the DNS record needs to have\n",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        }
      },
      "language": {
        "nodejs": {
          "requiredOutputs": [
            "domainName",
            "resourceRecordName",
            "resourceRecordType",
            "resourceRecordValue"
          ]
        }
      }
    },
    "aws:acmpca/CertificateAuthorityCertificateAuthorityConfiguration:CertificateAuthorityCertificateAuthorityConfiguration": {
      "properties": {
        "keyAlgorithm": {
          "type": "string",
          "description": "Type of the public key algorithm and size, in bits, of the key pair that your key pair creates when it issues a certificate. Valid values can be found in the [ACM PCA Documentation](https://docs.aws.amazon.com/acm-pca/latest/APIReference/API_CertificateAuthorityConfiguration.html).\n",
          "willReplaceOnChanges": true,
          "language": {
            "python": {
              "mapCase": false
            }
          }
        },
        "signingAlgorithm": {
          "type": "string",
          "description": "Name of the algorithm your private CA uses to sign certificate requests. Valid values can be found in the [ACM PCA Documentation](https://docs.aws.amazon.com/acm-pca/latest/APIReference/API_CertificateAuthorityConfiguration.html).\n",
          "willReplaceOnChanges": true,
          "language": {
            "python": {
              "mapCase": false
            }
          }
        },
        "subject": {
          "$ref": "#/types/aws:acmpca/CertificateAuthorityCertificateAuthorityConfigurationSubject:CertificateAuthorityCertificateAuthorityConfigurationSubject",
          "willReplaceOnChanges": true,
          "description": "Nested argument that contains X.500 distinguished name information. At least one nested attribute must be specified.\n",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        }
      },
      "required": [
        "keyAlgorithm",
        "signingAlgorithm",
        "subject"
      ]
    },
    "aws:acmpca/CertificateAuthorityCertificateAuthorityConfigurationSubject:CertificateAuthorityCertificateAuthorityConfigurationSubject": {
      "properties": {
        "commonName": {
          "type": "string",
          "description": "Fully qualified domain name (FQDN) associated with the certificate subject. Must be less than or equal to 64 characters in length.\n",
          "willReplaceOnChanges": true,
          "language": {
            "python": {
              "mapCase": false
            }
          }
        },
        "country": {
          "type": "string",
          "description": "Two digit code that specifies the country in which the certificate subject located. Must be less than or equal to 2 characters in length.\n",
          "willReplaceOnChanges": true,
          "language": {
            "python": {
              "mapCase": false
            }
          }
        },
        "distinguishedNameQualifier": {
          "type": "string",
          "description": "Disambiguating information for the certificate subject. Must be less than or equal to 64 characters in length.\n",
          "willReplaceOnChanges": true,
          "language": {
            "python": {
              "mapCase": false
            }
          }
        },
        "generationQualifier": {
          "type": "string",
          "description": "Typically a qualifier appended to the name of an individual. Examples include Jr. for junior, Sr. for senior, and III for third. Must be less than or equal to 3 characters in length.\n",
          "willReplaceOnChanges": true,
          "language": {
            "python": {
              "mapCase": false
            }
          }
        },
        "givenName": {
          "type": "string",
          "description": "First name. Must be less than or equal to 16 characters in length.\n",
          "willReplaceOnChanges": true,
          "language": {
            "python": {
              "mapCase": false
            }
          }
        },
        "initials": {
          "type": "string",
          "description": "Concatenation that typically contains the first letter of the `given_name`, the first letter of the middle name if one exists, and the first letter of the `surname`. Must be less than or equal to 5 characters in length.\n",
          "willReplaceOnChanges": true,
          "language": {
            "python": {
              "mapCase": false
            }
          }
        },
        "locality": {
          "type": "string",
          "description": "The locality (such as a city or town) in which the certificate subject is located. Must be less than or equal to 128 characters in length.\n",
          "willReplaceOnChanges": true,
          "language": {
            "python": {
              "mapCase": false
            }
          }
        },
        "organization": {
          "type": "string",
          "description": "Legal name of the organization with which the certificate subject is affiliated. Must be less than or equal to 64 characters in length.\n",
          "willReplaceOnChanges": true,
          "language": {
            "python": {
              "mapCase": false
            }
          }
        },
        "organizationalUnit": {
          "type": "string",
          "description": "A subdivision or unit of the organization (such as sales or finance) with which the certificate subject is affiliated. Must be less than or equal to 64 characters in length.\n",
          "willReplaceOnChanges": true,
          "language": {
            "python": {
              "mapCase": false
            }
          }
        },
        "pseudonym": {
          "type": "string",
          "description": "Typically a shortened version of a longer `given_name`. For example, Jonathan is often shortened to John. Elizabeth is often shortened to Beth, Liz, or Eliza. Must be less than or equal to 128 characters in length.\n",
          "willReplaceOnChanges": true,
          "language": {
            "python": {
              "mapCase": false
            }
          }
        },
        "state": {
          "type": "string",
          "description": "State in which the subject of the certificate is located. Must be less than or equal to 128 characters in length.\n",
          "willReplaceOnChanges": true,
          "language": {
            "python": {
              "mapCase": false
            }
          }
        },
        "surname": {
          "type": "string",
          "description": "Family name. In the US and the UK for example, the surname of an individual is ordered last. In Asian cultures the surname is typically ordered first. Must be less than or equal to 40 characters in length.\n",
          "willReplaceOnChanges": true,
          "language": {
            "python": {
              "mapCase": false
            }
          }
        },
        "title": {
          "type": "string",
          "description": "A title such as Mr. or Ms. which is pre-pended to the name to refer formally to the certificate subject. Must be less than or equal to 64 characters in length.\n",
          "willReplaceOnChanges": true,
          "language": {
            "python": {
              "mapCase": false
            }
          }
        }
      }
    },
    "aws:acmpca/CertificateAuthorityRevocationConfiguration:CertificateAuthorityRevocationConfiguration": {
      "properties": {
        "crlConfiguration": {
          "$ref": "#/types/aws:acmpca/CertificateAuthorityRevocationConfigurationCrlConfiguration:CertificateAuthorityRevocationConfigurationCrlConfiguration",
          "description": "Nested argument containing configuration of the certificate revocation list (CRL), if any, maintained by the certificate authority. Defined below.\n",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        },
        "ocspConfiguration": {
          "$ref": "#/types/aws:acmpca/CertificateAuthorityRevocationConfigurationOcspConfiguration:CertificateAuthorityRevocationConfigurationOcspConfiguration",
          "description": "Nested argument containing configuration of\nthe custom OCSP responder endpoint. Defined below.\n",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        }
      }
    },
    "aws:acmpca/CertificateAuthorityRevocationConfigurationCrlConfiguration:CertificateAuthorityRevocationConfigurationCrlConfiguration": {
      "properties": {
        "customCname": {
          "type": "string",
          "description": "Name inserted into the certificate CRL Distribution Points extension that enables the use of an alias for the CRL distribution point. Use this value if you don't want the name of your S3 bucket to be public. Must be less than or equal to 253 characters in length.\n",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        },
        "enabled": {
          "type": "boolean",
          "description": "Boolean value that specifies whether a custom OCSP responder is enabled.\n",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        },
        "expirationInDays": {
          "type": "integer",
          "description": "Number of days until a certificate expires. Must be between 1 and 5000.\n",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        },
        "s3BucketName": {
          "type": "string",
          "description": "Name of the S3 bucket that contains the CRL. If you do not provide a value for the `custom_cname` argument, the name of your S3 bucket is placed into the CRL Distribution Points extension of the issued certificate. You must specify a bucket policy that allows ACM PCA to write the CRL to your bucket. Must be less than or equal to 255 characters in length.\n",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        },
        "s3ObjectAcl": {
          "type": "string",
          "description": "Determines whether the CRL will be publicly readable or privately held in the CRL Amazon S3 bucket. Defaults to `PUBLIC_READ`.\n",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        }
      },
      "required": [
        "expirationInDays"
      ],
      "language": {
        "nodejs": {
          "requiredOutputs": [
            "expirationInDays",
            "s3ObjectAcl"
          ]
        }
      }
    },
    "aws:acmpca/CertificateAuthorityRevocationConfigurationOcspConfiguration:CertificateAuthorityRevocationConfigurationOcspConfiguration": {
      "properties": {
        "enabled": {
          "type": "boolean",
          "description": "Boolean value that specifies whether a custom OCSP responder is enabled.\n",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        },
        "ocspCustomCname": {
          "type": "string",
          "description": "A CNAME specifying a customized OCSP domain. Note: The value of the CNAME must not include a protocol prefix such as \"http://\" or \"https://\".\n",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        }
      },
      "required": [
        "enabled"
      ]
    },
    "aws:amplify/AppAutoBranchCreationConfig:AppAutoBranchCreationConfig": {
      "properties": {
        "basicAuthCredentials": {
          "type": "string",
          "description": "The basic authorization credentials for the autocreated branch.\n",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        },
        "buildSpec": {
          "type": "string",
          "description": "The build specification (build spec) for the autocreated branch.\n",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        },
        "enableAutoBuild": {
          "type": "boolean",
          "description": "Enables auto building for the autocreated branch.\n",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        },
        "enableBasicAuth": {
          "type": "boolean",
          "description": "Enables basic authorization for the autocreated branch.\n",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        },
        "enablePerformanceMode": {
          "type": "boolean",
          "description": "Enables performance mode for the branch.\n",
          "willReplaceOnChanges": true,
          "language": {
            "python": {
              "mapCase": false
            }
          }
        },
        "enablePullRequestPreview": {
          "type": "boolean",
          "description": "Enables pull request previews for the autocreated branch.\n",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        },
        "environmentVariables": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "The environment variables for the autocreated branch.\n",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        },
        "framework": {
          "type": "string",
          "description": "The framework for the autocreated branch.\n",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        },
        "pullRequestEnvironmentName": {
          "type": "string",
          "description": "The Amplify environment name for the pull request.\n",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        },
        "stage": {
          "type": "string",
          "description": "Describes the current stage for the autocreated branch. Valid values: `PRODUCTION`, `BETA`, `DEVELOPMENT`, `EXPERIMENTAL`, `PULL_REQUEST`.\n",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        }
      }
    },
    "aws:amplify/AppCustomRule:AppCustomRule": {
      "properties": {
        "condition": {
          "type": "string",
          "description": "The condition for a URL rewrite or redirect rule, such as a country code.\n",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        },
        "source": {
          "type": "string",
          "description": "The source pattern for a URL rewrite or redirect rule.\n",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        },
        "status": {
          "type": "string",
          "description": "The status code for a URL rewrite or redirect rule. Valid values: `200`, `301`, `302`, `404`, `404-200`.\n",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        },
        "target": {
          "type": "string",
          "description": "The target pattern for a URL rewrite or redirect rule.\n",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        }
      },
      "required": [
        "source",
        "target"
      ]
    },
    "aws:amplify/AppProductionBranch:AppProductionBranch": {
      "properties": {
        "branchName": {
          "type": "string",
          "description": "The branch name for the production branch.\n",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        },
        "lastDeployTime": {
          "type": "string",
          "description": "The last deploy time of the production branch.\n",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        },
        "status": {
          "type": "string",
          "description": "The status code for a URL rewrite or redirect rule. Valid values: `200`, `301`, `302`, `404`, `404-200`.\n",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        },
        "thumbnailUrl": {
          "type": "string",
          "description": "The thumbnail URL for the production branch.\n",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        }
      },
      "language": {
        "nodejs": {
          "requiredOutputs": [
            "branchName",
            "lastDeployTime",
            "status",
            "thumbnailUrl"
          ]
        }
      }
    },
    "aws:amplify/DomainAssociationSubDomain:DomainAssociationSubDomain": {
      "properties": {
        "branchName": {
          "type": "string",
          "description": "The branch name setting for the subdomain.\n",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        },
        "dnsRecord": {
          "type": "string",
          "description": "The DNS record for the subdomain.\n",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        },
        "prefix": {
          "type": "string",
          "description": "The prefix setting for the subdomain.\n",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        },
        "verified": {
          "type": "boolean",
          "description": "The verified status of the subdomain.\n",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        }
      },
      "required": [
        "branchName",
        "prefix"
      ],
      "language": {
        "nodejs": {
          "requiredOutputs": [
            "branchName",
            "dnsRecord",
            "prefix",
            "verified"
          ]
        }
      }
    },
    "aws:apigateway/UsagePlanApiStage:UsagePlanApiStage": {
      "properties": {
        "apiId": {
          "type": "string",
          "description": "API Id of the associated API stage in a usage plan.\n",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        },
        "stage": {
          "type": "string",
          "description": "API stage name of the associated API stage in a usage plan.\n",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        },
        "throttles": {
          "type": "array",
          "items": {
            "$ref": "#/types/aws:apigateway/UsagePlanApiStageThrottle:UsagePlanApiStageThrottle"
          },
          "description": "The throttling limits of the usage plan.\n",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        }
      },
      "required": [
        "apiId",
        "stage"
      ]
    },
    "aws:apigateway/UsagePlanApiStageThrottle:UsagePlanApiStageThrottle": {
      "properties": {
        "burstLimit": {
          "type": "integer",
          "description": "The API request burst limit, the maximum rate limit over a time ranging from one to a few seconds, depending upon whether the underlying token bucket is at its full capacity.\n",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        },
        "path": {
          "type": "string",
          "description": "The method to apply the throttle settings for. Specfiy the path and method, for example `/test/GET`.\n",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        },
        "rateLimit": {
          "type": "number",
          "description": "The API request steady-state rate limit.\n",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        }
      },
      "required": [
        "path"
      ]
    },
    "aws:apigateway/UsagePlanQuotaSettings:UsagePlanQuotaSettings": {
      "properties": {
        "limit": {
          "type": "integer",
          "description": "The maximum number of requests that can be made in a given time period.\n",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        },
        "offset": {
          "type": "integer",
          "description": "The number of requests subtracted from the given limit in the initial time period.\n",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        },
        "period": {
          "type": "string",
          "description": "The time period in which the limit applies. Valid values are \"DAY\", \"WEEK\" or \"MONTH\".\n",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        }
      },
      "required": [
        "limit",
        "period"
      ]
    },
    "aws:apigateway/UsagePlanThrottleSettings:UsagePlanThrottleSettings": {
      "properties": {
        "burstLimit": {
          "type": "integer",
          "description": "The API request burst limit, the maximum rate limit over a time ranging from one to a few seconds, depending upon whether the underlying token bucket is at its full capacity.\n",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        },
        "rateLimit": {
          "type": "number",
          "description": "The API request steady-state rate limit.\n",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        }
      }
    },
    "aws:apigatewayv2/IntegrationResponseParameter:IntegrationResponseParameter": {
      "properties": {
        "mappings": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "A key-value map. The key of ths map identifies the location of the request parameter to change, and how to change it. The corresponding value specifies the new data for the parameter.\nSee the [Amazon API Gateway Developer Guide](https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-parameter-mapping.html) for details.\n",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        },
        "statusCode": {
          "type": "string",
          "description": "The HTTP status code in the range 200-599.\n",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        }
      },
      "required": [
        "mappings",
        "statusCode"
      ]
    },
    "aws:apigatewayv2/IntegrationTlsConfig:IntegrationTlsConfig": {
      "properties": {
        "serverNameToVerify": {
          "type": "string",
          "description": "If you specify a server name, API Gateway uses it to verify the hostname on the integration's certificate. The server name is also included in the TLS handshake to support Server Name Indication (SNI) or virtual hosting.\n",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        }
      }
    },
    "aws:apigatewayv2/RouteRequestParameter:RouteRequestParameter": {
      "properties": {
        "requestParameterKey": {
          "type": "string",
          "description": "Request parameter key. This is a [request data mapping parameter](https://docs.aws.amazon.com/apigateway/latest/developerguide/websocket-api-data-mapping.html#websocket-mapping-request-parameters).\n",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        },
        "required": {
          "type": "boolean",
          "description": "Boolean whether or not the parameter is required.\n",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        }
      },
      "required": [
        "requestParameterKey",
        "required"
      ]
    },
    "aws:apigatewayv2/StageAccessLogSettings:StageAccessLogSettings": {
      "properties": {
        "destinationArn": {
          "type": "string",
          "description": "The ARN of the CloudWatch Logs log group to receive access logs. Any trailing `:*` is trimmed from the ARN.\n",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        },
        "format": {
          "type": "string",
          "description": "A single line [format](https://docs.aws.amazon.com/apigateway/latest/developerguide/set-up-logging.html#apigateway-cloudwatch-log-formats) of the access logs of data, as specified by [selected $context variables](https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-logging.html).\n",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        }
      },
      "required": [
        "destinationArn",
        "format"
      ]
    },
    "aws:apigatewayv2/StageDefaultRouteSettings:StageDefaultRouteSettings": {
      "properties": {
        "dataTraceEnabled": {
          "type": "boolean",
          "description": "Whether data trace logging is enabled for the default route. Affects the log entries pushed to Amazon CloudWatch Logs.\nDefaults to `false`. Supported only for WebSocket APIs.\n",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        },
        "detailedMetricsEnabled": {
          "type": "boolean",
          "description": "Whether detailed metrics are enabled for the default route. Defaults to `false`.\n",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        },
        "loggingLevel": {
          "type": "string",
          "description": "The logging level for the default route. Affects the log entries pushed to Amazon CloudWatch Logs.\nValid values: `ERROR`, `INFO`, `OFF`. Defaults to `OFF`. Supported only for WebSocket APIs. This provider will only perform drift detection of its value when present in a configuration.\n",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        },
        "throttlingBurstLimit": {
          "type": "integer",
          "description": "The throttling burst limit for the default route.\n",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        },
        "throttlingRateLimit": {
          "type": "number",
          "description": "The throttling rate limit for the default route.\n",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        }
      },
      "language": {
        "nodejs": {
          "requiredOutputs": [
            "loggingLevel"
          ]
        }
      }
    },
    "aws:apigatewayv2/StageRouteSetting:StageRouteSetting": {
      "properties": {
        "dataTraceEnabled": {
          "type": "boolean",
          "description": "Whether data trace logging is enabled for the route. Affects the log entries pushed to Amazon CloudWatch Logs.\nDefaults to `false`. Supported only for WebSocket APIs.\n",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        },
        "detailedMetricsEnabled": {
          "type": "boolean",
          "description": "Whether detailed metrics are enabled for the route. Defaults to `false`.\n",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        },
        "loggingLevel": {
          "type": "string",
          "description": "The logging level for the route. Affects the log entries pushed to Amazon CloudWatch Logs.\nValid values: `ERROR`, `INFO`, `OFF`. Defaults to `OFF`. Supported only for WebSocket APIs. This provider will only perform drift detection of its value when present in a configuration.\n",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        },
        "routeKey": {
          "type": "string",
          "description": "Route key.\n",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        },
        "throttlingBurstLimit": {
          "type": "integer",
          "description": "The throttling burst limit for the route.\n",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        },
        "throttlingRateLimit": {
          "type": "number",
          "description": "The throttling rate limit for the route.\n",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        }
      },
      "required": [
        "routeKey"
      ],
      "language": {
        "nodejs": {
          "requiredOutputs": [
            "loggingLevel",
            "routeKey"
          ]
        }
      }
    },
    "aws:appconfig/ConfigurationProfileValidator:ConfigurationProfileValidator": {
      "properties": {
        "content": {
          "type": "string",
          "description": "Either the JSON Schema content or the Amazon Resource Name (ARN) of an AWS Lambda function.\n",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        },
        "type": {
          "type": "string",
          "description": "The type of validator. Valid values: `JSON_SCHEMA` and `LAMBDA`.\n",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        }
      },
      "required": [
        "type"
      ]
    },
    "aws:appconfig/EnvironmentMonitor:EnvironmentMonitor": {
      "properties": {
        "alarmArn": {
          "type": "string",
          "description": "ARN of the Amazon CloudWatch alarm.\n",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        },
        "alarmRoleArn": {
          "type": "string",
          "description": "ARN of an IAM role for AWS AppConfig to monitor `alarm_arn`.\n",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        }
      },
      "required": [
        "alarmArn"
      ]
    },
    "aws:appmesh/MeshSpec:MeshSpec": {
      "properties": {
        "egressFilter": {
          "$ref": "#/types/aws:appmesh/MeshSpecEgressFilter:MeshSpecEgressFilter",
          "description": "The egress filter rules for the service mesh.\n",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        }
      }
    },
    "aws:appmesh/MeshSpecEgressFilter:MeshSpecEgressFilter": {
      "properties": {
        "type": {
          "type": "string",
          "description": "The egress filter type. By default, the type is `DROP_ALL`.\nValid values are `ALLOW_ALL` and `DROP_ALL`.\n",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        }
      }
    },
    "aws:appmesh/VirtualRouterSpec:VirtualRouterSpec": {
      "properties": {
        "listener": {
          "$ref": "#/types/aws:appmesh/VirtualRouterSpecListener:VirtualRouterSpecListener",
          "description": "The listeners that the virtual router is expected to receive inbound traffic from.\nCurrently only one listener is supported per virtual router.\n",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        }
      },
      "required": [
        "listener"
      ]
    },
    "aws:appmesh/VirtualRouterSpecListener:VirtualRouterSpecListener": {
      "properties": {
        "portMapping": {
          "$ref": "#/types/aws:appmesh/VirtualRouterSpecListenerPortMapping:VirtualRouterSpecListenerPortMapping",
          "description": "The port mapping information for the listener.\n",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        }
      },
      "required": [
        "portMapping"
      ]
    },
    "aws:appmesh/VirtualRouterSpecListenerPortMapping:VirtualRouterSpecListenerPortMapping": {
      "properties": {
        "port": {
          "type": "integer",
          "description": "The port used for the port mapping.\n",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        },
        "protocol": {
          "type": "string",
          "description": "The protocol used for the port mapping. Valid values are `http`,`http2`, `tcp` and `grpc`.\n",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        }
      },
      "required": [
        "port",
        "protocol"
      ]
    },
    "aws:appmesh/VirtualServiceSpec:VirtualServiceSpec": {
      "properties": {
        "provider": {
          "$ref": "#/types/aws:appmesh/VirtualServiceSpecProvider:VirtualServiceSpecProvider",
          "description": "The App Mesh object that is acting as the provider for a virtual service. You can specify a single virtual node or virtual router.\n",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        }
      }
    },
    "aws:appmesh/VirtualServiceSpecProvider:VirtualServiceSpecProvider": {
      "properties": {
        "virtualNode": {
          "$ref": "#/types/aws:appmesh/VirtualServiceSpecProviderVirtualNode:VirtualServiceSpecProviderVirtualNode",
          "description": "The virtual node associated with a virtual service.\n",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        },
        "virtualRouter": {
          "$ref": "#/types/aws:appmesh/VirtualServiceSpecProviderVirtualRouter:VirtualServiceSpecProviderVirtualRouter",
          "description": "The virtual router associated with a virtual service.\n",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        }
      }
    },
    "aws:appmesh/VirtualServiceSpecProviderVirtualNode:VirtualServiceSpecProviderVirtualNode": {
      "properties": {
        "virtualNodeName": {
          "type": "string",
          "description": "The name of the virtual node that is acting as a service provider. Must be between 1 and 255 characters in length.\n",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        }
      },
      "required": [
        "virtualNodeName"
      ]
    },
    "aws:appmesh/VirtualServiceSpecProviderVirtualRouter:VirtualServiceSpecProviderVirtualRouter": {
      "properties": {
        "virtualRouterName": {
          "type": "string",
          "description": "The name of the virtual router that is acting as a service provider. Must be between 1 and 255 characters in length.\n",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        }
      },
      "required": [
        "virtualRouterName"
      ]
    },
    "aws:appstream/ImageBuilderAccessEndpoint:ImageBuilderAccessEndpoint": {
      "properties": {
        "endpointType": {
          "type": "string",
          "description": "Type of interface endpoint.\n",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        },
        "vpceId": {
          "type": "string",
          "description": "Identifier (ID) of the VPC in which the interface endpoint is used.\n",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        }
      },
      "required": [
        "endpointType"
      ],
      "language": {
        "nodejs": {
          "requiredOutputs": [
            "endpointType",
            "vpceId"
          ]
        }
      }
    },
    "aws:appstream/ImageBuilderDomainJoinInfo:ImageBuilderDomainJoinInfo": {
      "properties": {
        "directoryName": {
          "type": "string",
          "description": "Fully qualified name of the directory (for example, corp.example.com).\n",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        },
        "organizationalUnitDistinguishedName": {
          "type": "string",
          "description": "Distinguished name of the organizational unit for computer accounts.\n",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        }
      }
    },
    "aws:appstream/ImageBuilderVpcConfig:ImageBuilderVpcConfig": {
      "properties": {
        "securityGroupIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Identifiers of the security groups for the image builder or image builder.\n",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        },
        "subnetIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Identifiers of the subnets to which a network interface is attached from the image builder instance or image builder instance.\n",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        }
      },
      "language": {
        "nodejs": {
          "requiredOutputs": [
            "securityGroupIds",
            "subnetIds"
          ]
        }
      }
    },
    "aws:appstream/StackAccessEndpoint:StackAccessEndpoint": {
      "properties": {
        "endpointType": {
          "type": "string",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        },
        "vpceId": {
          "type": "string",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        }
      },
      "required": [
        "endpointType"
      ],
      "language": {
        "nodejs": {
          "requiredOutputs": [
            "endpointType",
            "vpceId"
          ]
        }
      }
    },
    "aws:appstream/StackApplicationSettings:StackApplicationSettings": {
      "properties": {
        "enabled": {
          "type": "boolean",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        },
        "settingsGroup": {
          "type": "string",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        }
      }
    },
    "aws:appstream/StackStorageConnector:StackStorageConnector": {
      "properties": {
        "connectorType": {
          "type": "string",
          "description": "Type of storage connector. Valid values are: `HOMEFOLDERS`, `GOOGLE_DRIVE`, `ONE_DRIVE`.\n",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        },
        "domains": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Names of the domains for the account.\n",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        },
        "resourceIdentifier": {
          "type": "string",
          "description": "ARN of the storage connector.\n",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        }
      },
      "required": [
        "connectorType"
      ],
      "language": {
        "nodejs": {
          "requiredOutputs": [
            "connectorType",
            "domains",
            "resourceIdentifier"
          ]
        }
      }
    },
    "aws:appstream/StackUserSetting:StackUserSetting": {
      "properties": {
        "action": {
          "type": "string",
          "description": "Action that is enabled or disabled. Valid values are: `CLIPBOARD_COPY_FROM_LOCAL_DEVICE`,  `CLIPBOARD_COPY_TO_LOCAL_DEVICE`, `FILE_UPLOAD`, `FILE_DOWNLOAD`, `PRINTING_TO_LOCAL_DEVICE`, `DOMAIN_PASSWORD_SIGNIN`, `DOMAIN_SMART_CARD_SIGNIN`.\n",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        },
        "permission": {
          "type": "string",
          "description": "Indicates whether the action is enabled or disabled. Valid values are: `ENABLED`, `DISABLED`.\n",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        }
      },
      "required": [
        "action",
        "permission"
      ]
    },
    "aws:appsync/FunctionSyncConfig:FunctionSyncConfig": {
      "properties": {
        "conflictDetection": {
          "type": "string",
          "description": "The Conflict Detection strategy to use. Valid values are `NONE` and `VERSION`.\n",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        },
        "conflictHandler": {
          "type": "string",
          "description": "The Conflict Resolution strategy to perform in the event of a conflict. Valid values are `NONE`, `OPTIMISTIC_CONCURRENCY`, `AUTOMERGE`, and `LAMBDA`.\n",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        },
        "lambdaConflictHandlerConfig": {
          "$ref": "#/types/aws:appsync/FunctionSyncConfigLambdaConflictHandlerConfig:FunctionSyncConfigLambdaConflictHandlerConfig",
          "description": "The Lambda Conflict Handler Config when configuring `LAMBDA` as the Conflict Handler. See Lambda Conflict Handler Config.\n",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        }
      }
    },
    "aws:appsync/FunctionSyncConfigLambdaConflictHandlerConfig:FunctionSyncConfigLambdaConflictHandlerConfig": {
      "properties": {
        "lambdaConflictHandlerArn": {
          "type": "string",
          "description": "The Amazon Resource Name (ARN) for the Lambda function to use as the Conflict Handler.\n",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        }
      }
    },
    "aws:appsync/ResolverCachingConfig:ResolverCachingConfig": {
      "properties": {
        "cachingKeys": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The list of caching key.\n",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        },
        "ttl": {
          "type": "integer",
          "description": "The TTL in seconds.\n",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        }
      }
    },
    "aws:appsync/ResolverPipelineConfig:ResolverPipelineConfig": {
      "properties": {
        "functions": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The list of Function ID.\n",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        }
      }
    },
    "aws:appsync/ResolverSyncConfig:ResolverSyncConfig": {
      "properties": {
        "conflictDetection": {
          "type": "string",
          "description": "The Conflict Detection strategy to use. Valid values are `NONE` and `VERSION`.\n",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        },
        "conflictHandler": {
          "type": "string",
          "description": "The Conflict Resolution strategy to perform in the event of a conflict. Valid values are `NONE`, `OPTIMISTIC_CONCURRENCY`, `AUTOMERGE`, and `LAMBDA`.\n",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        },
        "lambdaConflictHandlerConfig": {
          "$ref": "#/types/aws:appsync/ResolverSyncConfigLambdaConflictHandlerConfig:ResolverSyncConfigLambdaConflictHandlerConfig",
          "description": "The Lambda Conflict Handler Config when configuring `LAMBDA` as the Conflict Handler. See Lambda Conflict Handler Config.\n",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        }
      }
    },
    "aws:appsync/ResolverSyncConfigLambdaConflictHandlerConfig:ResolverSyncConfigLambdaConflictHandlerConfig": {
      "properties": {
        "lambdaConflictHandlerArn": {
          "type": "string",
          "description": "The Amazon Resource Name (ARN) for the Lambda function to use as the Conflict Handler.\n",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        }
      }
    },
    "aws:athena/WorkgroupConfiguration:WorkgroupConfiguration": {
      "properties": {
        "bytesScannedCutoffPerQuery": {
          "type": "integer",
          "description": "Integer for the upper data usage limit (cutoff) for the amount of bytes a single query in a workgroup is allowed to scan. Must be at least `10485760`.\n",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        },
        "enforceWorkgroupConfiguration": {
          "type": "boolean",
          "description": "Boolean whether the settings for the workgroup override client-side settings. For more information, see [Workgroup Settings Override Client-Side Settings](https://docs.aws.amazon.com/athena/latest/ug/workgroups-settings-override.html). Defaults to `true`.\n",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        },
        "engineVersion": {
          "$ref": "#/types/aws:athena/WorkgroupConfigurationEngineVersion:WorkgroupConfigurationEngineVersion",
          "description": "Configuration block for the Athena Engine Versioning. For more information, see [Athena Engine Versioning](https://docs.aws.amazon.com/athena/latest/ug/engine-versions.html). See Engine Version below.\n",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        },
        "publishCloudwatchMetricsEnabled": {
          "type": "boolean",
          "description": "Boolean whether Amazon CloudWatch metrics are enabled for the workgroup. Defaults to `true`.\n",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        },
        "requesterPaysEnabled": {
          "type": "boolean",
          "description": "If set to true , allows members assigned to a workgroup to reference Amazon S3 Requester Pays buckets in queries. If set to false , workgroup members cannot query data from Requester Pays buckets, and queries that retrieve data from Requester Pays buckets cause an error. The default is false . For more information about Requester Pays buckets, see [Requester Pays Buckets](https://docs.aws.amazon.com/AmazonS3/latest/dev/RequesterPaysBuckets.html) in the Amazon Simple Storage Service Developer Guide.\n",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        },
        "resultConfiguration": {
          "$ref": "#/types/aws:athena/WorkgroupConfigurationResultConfiguration:WorkgroupConfigurationResultConfiguration",
          "description": "Configuration block with result settings. See Result Configuration below.\n",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        }
      }
    },
    "aws:athena/WorkgroupConfigurationEngineVersion:WorkgroupConfigurationEngineVersion": {
      "properties": {
        "effectiveEngineVersion": {
          "type": "string",
          "description": "The engine version on which the query runs. If `selected_engine_version` is set to `AUTO`, the effective engine version is chosen by Athena.\n",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        },
        "selectedEngineVersion": {
          "type": "string",
          "description": "The requested engine version. Defaults to `AUTO`.\n",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        }
      },
      "language": {
        "nodejs": {
          "requiredOutputs": [
            "effectiveEngineVersion"
          ]
        }
      }
    },
    "aws:athena/WorkgroupConfigurationResultConfiguration:WorkgroupConfigurationResultConfiguration": {
      "properties": {
        "aclConfiguration": {
          "$ref": "#/types/aws:athena/WorkgroupConfigurationResultConfigurationAclConfiguration:WorkgroupConfigurationResultConfigurationAclConfiguration",
          "description": "Indicates that an Amazon S3 canned ACL should be set to control ownership of stored query results. See ACL Configuration below.\n",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        },
        "encryptionConfiguration": {
          "$ref": "#/types/aws:athena/WorkgroupConfigurationResultConfigurationEncryptionConfiguration:WorkgroupConfigurationResultConfigurationEncryptionConfiguration",
          "description": "Configuration block with encryption settings. See Encryption Configuration below.\n",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        },
        "expectedBucketOwner": {
          "type": "string",
          "description": "The AWS account ID that you expect to be the owner of the Amazon S3 bucket.\n",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        },
        "outputLocation": {
          "type": "string",
          "description": "The location in Amazon S3 where your query results are stored, such as `s3://path/to/query/bucket/`. For more information, see [Queries and Query Result Files](https://docs.aws.amazon.com/athena/latest/ug/querying.html).\n",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        }
      }
    },
    "aws:athena/WorkgroupConfigurationResultConfigurationAclConfiguration:WorkgroupConfigurationResultConfigurationAclConfiguration": {
      "properties": {
        "s3AclOption": {
          "type": "string",
          "description": "The Amazon S3 canned ACL that Athena should specify when storing query results. Valid value is `BUCKET_OWNER_FULL_CONTROL`.\n",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        }
      },
      "required": [
        "s3AclOption"
      ]
    },
    "aws:athena/WorkgroupConfigurationResultConfigurationEncryptionConfiguration:WorkgroupConfigurationResultConfigurationEncryptionConfiguration": {
      "properties": {
        "encryptionOption": {
          "type": "string",
          "description": "Indicates whether Amazon S3 server-side encryption with Amazon S3-managed keys (`SSE_S3`), server-side encryption with KMS-managed keys (`SSE_KMS`), or client-side encryption with KMS-managed keys (`CSE_KMS`) is used. If a query runs in a workgroup and the workgroup overrides client-side settings, then the workgroup's setting for encryption is used. It specifies whether query results must be encrypted, for all queries that run in this workgroup.\n",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        },
        "kmsKeyArn": {
          "type": "string",
          "description": "For `SSE_KMS` and `CSE_KMS`, this is the KMS key Amazon Resource Name (ARN).\n",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        }
      }
    },
    "aws:backup/FrameworkControl:FrameworkControl": {
      "properties": {
        "inputParameters": {
          "type": "array",
          "items": {
            "$ref": "#/types/aws:backup/FrameworkControlInputParameter:FrameworkControlInputParameter"
          },
          "description": "One or more input parameter blocks. An example of a control with two parameters is: \"backup plan frequency is at least daily and the retention period is at least 1 year\". The first parameter is daily. The second parameter is 1 year. Detailed below.\n",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        },
        "name": {
          "type": "string",
          "description": "The name of a parameter, for example, BackupPlanFrequency.\n",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        },
        "scope": {
          "$ref": "#/types/aws:backup/FrameworkControlScope:FrameworkControlScope",
          "description": "The scope of a control. The control scope defines what the control will evaluate. Three examples of control scopes are: a specific backup plan, all backup plans with a specific tag, or all backup plans. Detailed below.\n",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        }
      },
      "required": [
        "name"
      ]
    },
    "aws:backup/FrameworkControlInputParameter:FrameworkControlInputParameter": {
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of a parameter, for example, BackupPlanFrequency.\n",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        },
        "value": {
          "type": "string",
          "description": "The value of parameter, for example, hourly.\n",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        }
      }
    },
    "aws:backup/FrameworkControlScope:FrameworkControlScope": {
      "properties": {
        "complianceResourceIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The ID of the only AWS resource that you want your control scope to contain. Minimum number of 1 item. Maximum number of 100 items.\n",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        },
        "complianceResourceTypes": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Describes whether the control scope includes one or more types of resources, such as EFS or RDS.\n",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        },
        "tags": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "The tag key-value pair applied to those AWS resources that you want to trigger an evaluation for a rule. A maximum of one key-value pair can be provided.\n",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        }
      }
    },
    "aws:acmpca/getCertificateAuthorityRevocationConfiguration:getCertificateAuthorityRevocationConfiguration": {
      "properties": {
        "crlConfigurations": {
          "type": "array",
          "items": {
            "$ref": "#/types/aws:acmpca/getCertificateAuthorityRevocationConfigurationCrlConfiguration:getCertificateAuthorityRevocationConfigurationCrlConfiguration"
          },
          "language": {
            "python": {
              "mapCase": false
            }
          }
        },
        "ocspConfigurations": {
          "type": "array",
          "items": {
            "$ref": "#/types/aws:acmpca/getCertificateAuthorityRevocationConfigurationOcspConfiguration:getCertificateAuthorityRevocationConfigurationOcspConfiguration"
          },
          "language": {
            "python": {
              "mapCase": false
            }
          }
        }
      },
      "required": [
        "crlConfigurations",
        "ocspConfigurations"
      ],
      "language": {
        "nodejs": {
          "requiredInputs": [
          ]
        }
      }
    },
    "aws:acmpca/getCertificateAuthorityRevocationConfigurationCrlConfiguration:getCertificateAuthorityRevocationConfigurationCrlConfiguration": {
      "properties": {
        "customCname": {
          "type": "string",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        },
        "enabled": {
          "type": "boolean",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        },
        "expirationInDays": {
          "type": "integer",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        },
        "s3BucketName": {
          "type": "string",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        },
        "s3ObjectAcl": {
          "type": "string",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        }
      },
      "required": [
        "customCname",
        "enabled",
        "expirationInDays",
        "s3BucketName",
        "s3ObjectAcl"
      ],
      "language": {
        "nodejs": {
          "requiredInputs": [
          ]
        }
      }
    },
    "aws:acmpca/getCertificateAuthorityRevocationConfigurationOcspConfiguration:getCertificateAuthorityRevocationConfigurationOcspConfiguration": {
      "properties": {
        "enabled": {
          "type": "boolean",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        },
        "ocspCustomCname": {
          "type": "string",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        }
      },
      "required": [
        "enabled",
        "ocspCustomCname"
      ],
      "language": {
        "nodejs": {
          "requiredInputs": [
          ]
        }
      }
    },
    "aws:autoscaling/getAmiIdsFilter:getAmiIdsFilter": {
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the DescribeAutoScalingGroup filter. The recommended values are: `tag-key`, `tag-value`, and `tag:<tag name>`\n",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        },
        "values": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The value of the filter.\n",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        }
      },
      "required": [
        "name",
        "values"
      ]
    },
    "aws:datapipeline/getPipelineDefinitionParameterValue:getPipelineDefinitionParameterValue": {
      "properties": {
        "id": {
          "type": "string",
          "description": "ID of the object.\n",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        },
        "stringValue": {
          "type": "string",
          "description": "Field value, expressed as a String.\n",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        }
      },
      "required": [
        "id",
        "stringValue"
      ],
      "language": {
        "nodejs": {
          "requiredInputs": [
          ]
        }
      }
    },
    "aws:datapipeline/getPipelineDefinitionParameterObject:getPipelineDefinitionParameterObject": {
      "properties": {
        "attributes": {
          "type": "array",
          "items": {
            "$ref": "#/types/aws:datapipeline/getPipelineDefinitionParameterObjectAttribute:getPipelineDefinitionParameterObjectAttribute"
          },
          "language": {
            "python": {
              "mapCase": false
            }
          }
        },
        "id": {
          "type": "string",
          "description": "ID of the object.\n",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        }
      },
      "required": [
        "attributes",
        "id"
      ],
      "language": {
        "nodejs": {
          "requiredInputs": [
          ]
        }
      }
    },
    "aws:datapipeline/getPipelineDefinitionParameterObjectAttribute:getPipelineDefinitionParameterObjectAttribute": {
      "properties": {
        "key": {
          "type": "string",
          "description": "Field identifier.\n",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        },
        "stringValue": {
          "type": "string",
          "description": "Field value, expressed as a String.\n",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        }
      },
      "required": [
        "key",
        "stringValue"
      ],
      "language": {
        "nodejs": {
          "requiredInputs": [
          ]
        }
      }
    },
    "aws:datapipeline/getPipelineDefinitionPipelineObject:getPipelineDefinitionPipelineObject": {
      "properties": {
        "fields": {
          "type": "array",
          "items": {
            "$ref": "#/types/aws:datapipeline/getPipelineDefinitionPipelineObjectField:getPipelineDefinitionPipelineObjectField"
          },
          "description": "Key-value pairs that define the properties of the object. See below\n",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        },
        "id": {
          "type": "string",
          "description": "ID of the object.\n",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        },
        "name": {
          "type": "string",
          "description": "ARN of the storage connector.\n",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        }
      },
      "required": [
        "id",
        "name"
      ],
      "language": {
        "nodejs": {
          "requiredInputs": [
          ]
        }
      }
    },
    "aws:datapipeline/getPipelineDefinitionPipelineObjectField:getPipelineDefinitionPipelineObjectField": {
      "properties": {
        "key": {
          "type": "string",
          "description": "Field identifier.\n",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        },
        "refValue": {
          "type": "string",
          "description": "Field value, expressed as the identifier of another object\n",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        },
        "stringValue": {
          "type": "string",
          "description": "Field value, expressed as a String.\n",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        }
      },
      "required": [
        "key",
        "refValue",
        "stringValue"
      ],
      "language": {
        "nodejs": {
          "requiredInputs": [
          ]
        }
      }
    },
    "aws:ebs/getEbsVolumesFilter:getEbsVolumesFilter": {
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the field to filter by, as defined by\n[the underlying AWS API](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeVolumes.html).\nFor example, if matching against the `size` filter, use:\n",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        },
        "values": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Set of values that are accepted for the given field.\nEBS Volume IDs will be selected if any one of the given values match.\n",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        }
      },
      "required": [
        "name",
        "values"
      ]
    },
    "aws:ebs/getSnapshotFilter:getSnapshotFilter": {
      "properties": {
        "name": {
          "type": "string",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        },
        "values": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "language": {
            "python": {
              "mapCase": false
            }
          }
        }
      },
      "required": [
        "name",
        "values"
      ]
    },
    "aws:ebs/getSnapshotIdsFilter:getSnapshotIdsFilter": {
      "properties": {
        "name": {
          "type": "string",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        },
        "values": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "language": {
            "python": {
              "mapCase": false
            }
          }
        }
      },
      "required": [
        "name",
        "values"
      ]
    },
    "aws:ebs/getVolumeFilter:getVolumeFilter": {
      "properties": {
        "name": {
          "type": "string",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        },
        "values": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "language": {
            "python": {
              "mapCase": false
            }
          }
        }
      },
      "required": [
        "name",
        "values"
      ]
    },
    "aws:ec2/getAmiFilter:getAmiFilter": {
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the AMI that was provided during image creation.\n",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        },
        "values": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "language": {
            "python": {
              "mapCase": false
            }
          }
        }
      },
      "required": [
        "name",
        "values"
      ]
    },
    "aws:ec2/getAmiBlockDeviceMapping:getAmiBlockDeviceMapping": {
      "properties": {
        "deviceName": {
          "type": "string",
          "description": "The physical name of the device.\n",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        },
        "ebs": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Map containing EBS information, if the device is EBS based. Unlike most object attributes, these are accessed directly (e.g., `ebs.volume_size` or `ebs[\"volume_size\"]`) rather than accessed through the first element of a list (e.g., `ebs[0].volume_size`).\n",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        },
        "noDevice": {
          "type": "string",
          "description": "Suppresses the specified device included in the block device mapping of the AMI.\n",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        },
        "virtualName": {
          "type": "string",
          "description": "The virtual device name (for instance stores).\n",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        }
      },
      "required": [
        "deviceName",
        "ebs",
        "noDevice",
        "virtualName"
      ],
      "language": {
        "nodejs": {
          "requiredInputs": [
          ]
        }
      }
    },
    "aws:ec2/getAmiProductCode:getAmiProductCode": {
      "properties": {
        "productCodeId": {
          "type": "string",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        },
        "productCodeType": {
          "type": "string",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        }
      },
      "required": [
        "productCodeId",
        "productCodeType"
      ],
      "language": {
        "nodejs": {
          "requiredInputs": [
          ]
        }
      }
    },
    "aws:ec2/getAmiIdsFilter:getAmiIdsFilter": {
      "properties": {
        "name": {
          "type": "string",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        },
        "values": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "language": {
            "python": {
              "mapCase": false
            }
          }
        }
      },
      "required": [
        "name",
        "values"
      ]
    },
    "aws:ec2/getCoipPoolFilter:getCoipPoolFilter": {
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the field to filter by, as defined by\n[the underlying AWS API](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeCoipPools.html).\n",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        },
        "values": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Set of values that are accepted for the given field.\nA COIP Pool will be selected if any one of the given values matches.\n",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        }
      },
      "required": [
        "name",
        "values"
      ]
    },
    "aws:ec2/getCoipPoolsFilter:getCoipPoolsFilter": {
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the field to filter by, as defined by\n[the underlying AWS API](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeCoipPools.html).\n",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        },
        "values": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Set of values that are accepted for the given field.\nA COIP Pool will be selected if any one of the given values matches.\n",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        }
      },
      "required": [
        "name",
        "values"
      ]
    },
    "aws:ec2/getCustomerGatewayFilter:getCustomerGatewayFilter": {
      "properties": {
        "name": {
          "type": "string",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        },
        "values": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "language": {
            "python": {
              "mapCase": false
            }
          }
        }
      },
      "required": [
        "name",
        "values"
      ]
    },
    "aws:ec2/getDedicatedHostFilter:getDedicatedHostFilter": {
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the field to filter by, as defined by [the underlying AWS API](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeHosts.html).\n",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        },
        "values": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Set of values that are accepted for the given field. A host will be selected if any one of the given values matches.\n",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        }
      },
      "required": [
        "name",
        "values"
      ]
    },
    "aws:ec2/getEipsFilter:getEipsFilter": {
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the field to filter by, as defined by\n[the underlying AWS API](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeAddresses.html).\n",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        },
        "values": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Set of values that are accepted for the given field. An Elastic IP will be selected if any one of the given values matches.\n",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        }
      },
      "required": [
        "name",
        "values"
      ]
    },
    "aws:ec2/getElasticIpFilter:getElasticIpFilter": {
      "properties": {
        "name": {
          "type": "string",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        },
        "values": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "language": {
            "python": {
              "mapCase": false
            }
          }
        }
      },
      "required": [
        "name",
        "values"
      ]
    },
    "aws:ec2/getInstanceTypeOfferingFilter:getInstanceTypeOfferingFilter": {
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the filter. The `location` filter depends on the top-level `location_type` argument and if not specified, defaults to the current region.\n",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        },
        "values": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "List of one or more values for the filter.\n",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        }
      },
      "required": [
        "name",
        "values"
      ]
    },
    "aws:ec2/getInstanceTypeOfferingsFilter:getInstanceTypeOfferingsFilter": {
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the filter. The `location` filter depends on the top-level `location_type` argument and if not specified, defaults to the current region.\n",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        },
        "values": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "List of one or more values for the filter.\n",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        }
      },
      "required": [
        "name",
        "values"
      ]
    },
    "aws:ec2/getInstanceTypesFilter:getInstanceTypesFilter": {
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the filter.\n",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        },
        "values": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "List of one or more values for the filter.\n",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        }
      },
      "required": [
        "name",
        "values"
      ]
    },
    "aws:ec2/getInstancesFilter:getInstancesFilter": {
      "properties": {
        "name": {
          "type": "string",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        },
        "values": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "language": {
            "python": {
              "mapCase": false
            }
          }
        }
      },
      "required": [
        "name",
        "values"
      ]
    },
    "aws:ec2/getInternetGatewayFilter:getInternetGatewayFilter": {
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the field to filter by, as defined by\n[the underlying AWS API](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeInternetGateways.html).\n",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        },
        "values": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Set of values that are accepted for the given field.\nAn Internet Gateway will be selected if any one of the given values matches.\n",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        }
      },
      "required": [
        "name",
        "values"
      ]
    },
    "aws:ec2/getInternetGatewayAttachment:getInternetGatewayAttachment": {
      "properties": {
        "state": {
          "type": "string",
          "description": "The current state of the attachment between the gateway and the VPC. Present only if a VPC is attached\n",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        },
        "vpcId": {
          "type": "string",
          "description": "The ID of an attached VPC.\n",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        }
      },
      "required": [
        "state",
        "vpcId"
      ],
      "language": {
        "nodejs": {
          "requiredInputs": [
          ]
        }
      }
    }
  }
}