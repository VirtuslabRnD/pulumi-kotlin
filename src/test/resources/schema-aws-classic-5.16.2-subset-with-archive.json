{
  "types": {
    "aws:lambda/FunctionDeadLetterConfig:FunctionDeadLetterConfig": {
      "properties": {
        "targetArn": {
          "type": "string",
          "description": "ARN of an SNS topic or SQS queue to notify when an invocation fails. If this option is used, the function's IAM role must be granted suitable access to write to the target object, which means allowing either the `sns:Publish` or `sqs:SendMessage` action on this ARN, depending on which service is targeted.\n",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        }
      },
      "type": "object",
      "required": [
        "targetArn"
      ]
    },
    "aws:lambda/FunctionEnvironment:FunctionEnvironment": {
      "properties": {
        "variables": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Map of environment variables that are accessible from the function code during execution.\n",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        }
      },
      "type": "object"
    },
    "aws:lambda/FunctionEphemeralStorage:FunctionEphemeralStorage": {
      "properties": {
        "size": {
          "type": "integer",
          "description": "The size of the Lambda function Ephemeral storage(`/tmp`) represented in MB. The minimum supported `ephemeral_storage` value defaults to `512`MB and the maximum supported value is `10240`MB.\n",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        }
      },
      "type": "object",
      "language": {
        "nodejs": {
          "requiredOutputs": [
            "size"
          ]
        }
      }
    },
    "aws:lambda/FunctionFileSystemConfig:FunctionFileSystemConfig": {
      "properties": {
        "arn": {
          "type": "string",
          "description": "Amazon Resource Name (ARN) of the Amazon EFS Access Point that provides access to the file system.\n",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        },
        "localMountPath": {
          "type": "string",
          "description": "Path where the function can access the file system, starting with /mnt/.\n",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        }
      },
      "type": "object",
      "required": [
        "arn",
        "localMountPath"
      ]
    },
    "aws:lambda/FunctionImageConfig:FunctionImageConfig": {
      "properties": {
        "commands": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Parameters that you want to pass in with `entry_point`.\n",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        },
        "entryPoints": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Entry point to your application, which is typically the location of the runtime executable.\n",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        },
        "workingDirectory": {
          "type": "string",
          "description": "Working directory.\n",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        }
      },
      "type": "object"
    },
    "aws:lambda/FunctionTracingConfig:FunctionTracingConfig": {
      "properties": {
        "mode": {
          "type": "string",
          "description": "Whether to to sample and trace a subset of incoming requests with AWS X-Ray. Valid values are `PassThrough` and `Active`. If `PassThrough`, Lambda will only trace the request from an upstream service if it contains a tracing header with \"sampled=1\". If `Active`, Lambda will respect any tracing header it receives from an upstream service. If no tracing header is received, Lambda will call X-Ray for a tracing decision.\n",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        }
      },
      "type": "object",
      "required": [
        "mode"
      ]
    },
    "aws:lambda/FunctionVpcConfig:FunctionVpcConfig": {
      "properties": {
        "securityGroupIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "List of security group IDs associated with the Lambda function.\n",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        },
        "subnetIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "List of subnet IDs associated with the Lambda function.\n",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        },
        "vpcId": {
          "type": "string",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        }
      },
      "type": "object",
      "required": [
        "securityGroupIds",
        "subnetIds"
      ],
      "language": {
        "nodejs": {
          "requiredOutputs": [
            "securityGroupIds",
            "subnetIds",
            "vpcId"
          ]
        }
      }
    },
    "aws:lambda/Runtime:Runtime": {
      "description": "See https://docs.aws.amazon.com/lambda/latest/dg/lambda-runtimes.html",
      "type": "string",
      "enum": [
        {
          "name": "DotnetCore2d1",
          "value": "dotnetcore2.1",
          "deprecationMessage": "This runtime is now deprecated"
        },
        {
          "name": "DotnetCore3d1",
          "value": "dotnetcore3.1"
        },
        {
          "name": "Dotnet6",
          "value": "dotnet6"
        },
        {
          "name": "Go1dx",
          "value": "go1.x"
        },
        {
          "name": "Java8",
          "value": "java8"
        },
        {
          "name": "Java8AL2",
          "value": "java8.al2"
        },
        {
          "name": "Java11",
          "value": "java11"
        },
        {
          "name": "Ruby2d5",
          "value": "ruby2.5",
          "deprecationMessage": "This runtime is now deprecated"
        },
        {
          "name": "Ruby2d7",
          "value": "ruby2.7"
        },
        {
          "name": "NodeJS10dX",
          "value": "nodejs10.x",
          "deprecationMessage": "This runtime is now deprecated"
        },
        {
          "name": "NodeJS12dX",
          "value": "nodejs12.x"
        },
        {
          "name": "NodeJS14dX",
          "value": "nodejs14.x"
        },
        {
          "name": "NodeJS16dX",
          "value": "nodejs16.x"
        },
        {
          "name": "Python2d7",
          "value": "python2.7",
          "deprecationMessage": "This runtime is now deprecated"
        },
        {
          "name": "Python3d6",
          "value": "python3.6"
        },
        {
          "name": "Python3d7",
          "value": "python3.7"
        },
        {
          "name": "Python3d8",
          "value": "python3.8"
        },
        {
          "name": "Python3d9",
          "value": "python3.9"
        },
        {
          "name": "Custom",
          "value": "provided"
        },
        {
          "name": "CustomAL2",
          "value": "provided.al2"
        }
      ]
    }
  },
  "resources": {
    "aws:lambda/function:Function": {
      "description": "Provides a Lambda Function resource. Lambda allows you to trigger execution of code in response to events in AWS, enabling serverless backend solutions. The Lambda Function itself includes source code and runtime configuration.\n\nFor information about Lambda and how to use it, see [What is AWS Lambda?](https://docs.aws.amazon.com/lambda/latest/dg/welcome.html)\n\n> To give an external source (like a CloudWatch Event Rule, SNS, or S3) permission to access the Lambda function, use the `aws.lambda.Permission` resource. See [Lambda ****Permission Model][4] for more details. On the other hand, the `role` argument of this resource is the function's execution role for identity and access to AWS services and resources.\n\n> **NOTE:** Due to [AWS Lambda improved VPC networking changes that began deploying in September 2019](https://aws.amazon.com/blogs/compute/announcing-improved-vpc-networking-for-aws-lambda-functions/), EC2 subnets and security groups associated with Lambda Functions can take up to 45 minutes to successfully delete.\n\n> To give an external source (like an EventBridge Rule, SNS, or S3) permission to access the Lambda function, use the `aws.lambda.Permission` resource. See [Lambda Permission Model](https://docs.aws.amazon.com/lambda/latest/dg/intro-permission-model.html) for more details. On the other hand, the `role` argument of this resource is the function's execution role for identity and access to AWS services and resources.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n### Basic Example\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as aws from \"@pulumi/aws\";\n\nconst iamForLambda = new aws.iam.Role(\"iamForLambda\", {assumeRolePolicy: `{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Action\": \"sts:AssumeRole\",\n      \"Principal\": {\n        \"Service\": \"lambda.amazonaws.com\"\n      },\n      \"Effect\": \"Allow\",\n      \"Sid\": \"\"\n    }\n  ]\n}\n`});\nconst testLambda = new aws.lambda.Function(\"testLambda\", {\n    code: new pulumi.asset.FileArchive(\"lambda_function_payload.zip\"),\n    role: iamForLambda.arn,\n    handler: \"index.test\",\n    runtime: \"nodejs12.x\",\n    environment: {\n        variables: {\n            foo: \"bar\",\n        },\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_aws as aws\n\niam_for_lambda = aws.iam.Role(\"iamForLambda\", assume_role_policy=\"\"\"{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Action\": \"sts:AssumeRole\",\n      \"Principal\": {\n        \"Service\": \"lambda.amazonaws.com\"\n      },\n      \"Effect\": \"Allow\",\n      \"Sid\": \"\"\n    }\n  ]\n}\n\"\"\")\ntest_lambda = aws.lambda_.Function(\"testLambda\",\n    code=pulumi.FileArchive(\"lambda_function_payload.zip\"),\n    role=iam_for_lambda.arn,\n    handler=\"index.test\",\n    runtime=\"nodejs12.x\",\n    environment=aws.lambda_.FunctionEnvironmentArgs(\n        variables={\n            \"foo\": \"bar\",\n        },\n    ))\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Aws = Pulumi.Aws;\n\nreturn await Deployment.RunAsync(() => \n{\n    var iamForLambda = new Aws.Iam.Role(\"iamForLambda\", new()\n    {\n        AssumeRolePolicy = @\"{\n  \"\"Version\"\": \"\"2012-10-17\"\",\n  \"\"Statement\"\": [\n    {\n      \"\"Action\"\": \"\"sts:AssumeRole\"\",\n      \"\"Principal\"\": {\n        \"\"Service\"\": \"\"lambda.amazonaws.com\"\"\n      },\n      \"\"Effect\"\": \"\"Allow\"\",\n      \"\"Sid\"\": \"\"\"\"\n    }\n  ]\n}\n\",\n    });\n\n    var testLambda = new Aws.Lambda.Function(\"testLambda\", new()\n    {\n        Code = new FileArchive(\"lambda_function_payload.zip\"),\n        Role = iamForLambda.Arn,\n        Handler = \"index.test\",\n        Runtime = \"nodejs12.x\",\n        Environment = new Aws.Lambda.Inputs.FunctionEnvironmentArgs\n        {\n            Variables = \n            {\n                { \"foo\", \"bar\" },\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/pulumi/pulumi-aws/sdk/v5/go/aws\"\n\t\"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/iam\"\n\t\"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/lambda\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tiamForLambda, err := iam.NewRole(ctx, \"iamForLambda\", &iam.RoleArgs{\n\t\t\tAssumeRolePolicy: pulumi.Any(fmt.Sprintf(`{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Action\": \"sts:AssumeRole\",\n      \"Principal\": {\n        \"Service\": \"lambda.amazonaws.com\"\n      },\n      \"Effect\": \"Allow\",\n      \"Sid\": \"\"\n    }\n  ]\n}\n`)),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = lambda.NewFunction(ctx, \"testLambda\", &lambda.FunctionArgs{\n\t\t\tCode:    pulumi.NewFileArchive(\"lambda_function_payload.zip\"),\n\t\t\tRole:    iamForLambda.Arn,\n\t\t\tHandler: pulumi.String(\"index.test\"),\n\t\t\tRuntime: pulumi.String(\"nodejs12.x\"),\n\t\t\tEnvironment: &lambda.FunctionEnvironmentArgs{\n\t\t\t\tVariables: pulumi.StringMap{\n\t\t\t\t\t\"foo\": pulumi.String(\"bar\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.aws.iam.Role;\nimport com.pulumi.aws.iam.RoleArgs;\nimport com.pulumi.aws.lambda.Function;\nimport com.pulumi.aws.lambda.FunctionArgs;\nimport com.pulumi.aws.lambda.inputs.FunctionEnvironmentArgs;\nimport com.pulumi.asset.FileArchive;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var iamForLambda = new Role(\"iamForLambda\", RoleArgs.builder()        \n            .assumeRolePolicy(\"\"\"\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Action\": \"sts:AssumeRole\",\n      \"Principal\": {\n        \"Service\": \"lambda.amazonaws.com\"\n      },\n      \"Effect\": \"Allow\",\n      \"Sid\": \"\"\n    }\n  ]\n}\n            \"\"\")\n            .build());\n\n        var testLambda = new Function(\"testLambda\", FunctionArgs.builder()        \n            .code(new FileArchive(\"lambda_function_payload.zip\"))\n            .role(iamForLambda.arn())\n            .handler(\"index.test\")\n            .runtime(\"nodejs12.x\")\n            .environment(FunctionEnvironmentArgs.builder()\n                .variables(Map.of(\"foo\", \"bar\"))\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  iamForLambda:\n    type: aws:iam:Role\n    properties:\n      assumeRolePolicy: |\n        {\n          \"Version\": \"2012-10-17\",\n          \"Statement\": [\n            {\n              \"Action\": \"sts:AssumeRole\",\n              \"Principal\": {\n                \"Service\": \"lambda.amazonaws.com\"\n              },\n              \"Effect\": \"Allow\",\n              \"Sid\": \"\"\n            }\n          ]\n        }\n  testLambda:\n    type: aws:lambda:Function\n    properties:\n      # If the file is not in the current working directory you will need to include a\n      #   # path.module in the filename.\n      code:\n        Fn::FileArchive: lambda_function_payload.zip\n      role: ${iamForLambda.arn}\n      handler: index.test\n      runtime: nodejs12.x\n      environment:\n        variables:\n          foo: bar\n```\n{{% /example %}}\n{{% example %}}\n### Lambda Layers\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as aws from \"@pulumi/aws\";\n\nconst exampleLayerVersion = new aws.lambda.LayerVersion(\"exampleLayerVersion\", {});\n// ... other configuration ...\nconst exampleFunction = new aws.lambda.Function(\"exampleFunction\", {layers: [exampleLayerVersion.arn]});\n```\n```python\nimport pulumi\nimport pulumi_aws as aws\n\nexample_layer_version = aws.lambda_.LayerVersion(\"exampleLayerVersion\")\n# ... other configuration ...\nexample_function = aws.lambda_.Function(\"exampleFunction\", layers=[example_layer_version.arn])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Aws = Pulumi.Aws;\n\nreturn await Deployment.RunAsync(() => \n{\n    var exampleLayerVersion = new Aws.Lambda.LayerVersion(\"exampleLayerVersion\");\n\n    // ... other configuration ...\n    var exampleFunction = new Aws.Lambda.Function(\"exampleFunction\", new()\n    {\n        Layers = new[]\n        {\n            exampleLayerVersion.Arn,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/lambda\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleLayerVersion, err := lambda.NewLayerVersion(ctx, \"exampleLayerVersion\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = lambda.NewFunction(ctx, \"exampleFunction\", &lambda.FunctionArgs{\n\t\t\tLayers: pulumi.StringArray{\n\t\t\t\texampleLayerVersion.Arn,\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.aws.lambda.LayerVersion;\nimport com.pulumi.aws.lambda.Function;\nimport com.pulumi.aws.lambda.FunctionArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleLayerVersion = new LayerVersion(\"exampleLayerVersion\");\n\n        var exampleFunction = new Function(\"exampleFunction\", FunctionArgs.builder()        \n            .layers(exampleLayerVersion.arn())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleLayerVersion:\n    type: aws:lambda:LayerVersion\n  exampleFunction:\n    type: aws:lambda:Function\n    properties:\n      # ... other configuration ...\n      layers:\n        - ${exampleLayerVersion.arn}\n```\n{{% /example %}}\n{{% example %}}\n### Lambda Ephemeral Storage\n\nLambda Function Ephemeral Storage(`/tmp`) allows you to configure the storage upto `10` GB. The default value set to `512` MB.\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as aws from \"@pulumi/aws\";\n\nconst iamForLambda = new aws.iam.Role(\"iamForLambda\", {assumeRolePolicy: `{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Action\": \"sts:AssumeRole\",\n      \"Principal\": {\n        \"Service\": \"lambda.amazonaws.com\"\n      },\n      \"Effect\": \"Allow\",\n      \"Sid\": \"\"\n    }\n  ]\n}\n`});\nconst testLambda = new aws.lambda.Function(\"testLambda\", {\n    code: new pulumi.asset.FileArchive(\"lambda_function_payload.zip\"),\n    role: iamForLambda.arn,\n    handler: \"index.test\",\n    runtime: \"nodejs14.x\",\n    ephemeralStorage: {\n        size: 10240,\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_aws as aws\n\niam_for_lambda = aws.iam.Role(\"iamForLambda\", assume_role_policy=\"\"\"{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Action\": \"sts:AssumeRole\",\n      \"Principal\": {\n        \"Service\": \"lambda.amazonaws.com\"\n      },\n      \"Effect\": \"Allow\",\n      \"Sid\": \"\"\n    }\n  ]\n}\n\"\"\")\ntest_lambda = aws.lambda_.Function(\"testLambda\",\n    code=pulumi.FileArchive(\"lambda_function_payload.zip\"),\n    role=iam_for_lambda.arn,\n    handler=\"index.test\",\n    runtime=\"nodejs14.x\",\n    ephemeral_storage=aws.lambda_.FunctionEphemeralStorageArgs(\n        size=10240,\n    ))\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Aws = Pulumi.Aws;\n\nreturn await Deployment.RunAsync(() => \n{\n    var iamForLambda = new Aws.Iam.Role(\"iamForLambda\", new()\n    {\n        AssumeRolePolicy = @\"{\n  \"\"Version\"\": \"\"2012-10-17\"\",\n  \"\"Statement\"\": [\n    {\n      \"\"Action\"\": \"\"sts:AssumeRole\"\",\n      \"\"Principal\"\": {\n        \"\"Service\"\": \"\"lambda.amazonaws.com\"\"\n      },\n      \"\"Effect\"\": \"\"Allow\"\",\n      \"\"Sid\"\": \"\"\"\"\n    }\n  ]\n}\n\",\n    });\n\n    var testLambda = new Aws.Lambda.Function(\"testLambda\", new()\n    {\n        Code = new FileArchive(\"lambda_function_payload.zip\"),\n        Role = iamForLambda.Arn,\n        Handler = \"index.test\",\n        Runtime = \"nodejs14.x\",\n        EphemeralStorage = new Aws.Lambda.Inputs.FunctionEphemeralStorageArgs\n        {\n            Size = 10240,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/pulumi/pulumi-aws/sdk/v5/go/aws\"\n\t\"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/iam\"\n\t\"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/lambda\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tiamForLambda, err := iam.NewRole(ctx, \"iamForLambda\", &iam.RoleArgs{\n\t\t\tAssumeRolePolicy: pulumi.Any(fmt.Sprintf(`{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Action\": \"sts:AssumeRole\",\n      \"Principal\": {\n        \"Service\": \"lambda.amazonaws.com\"\n      },\n      \"Effect\": \"Allow\",\n      \"Sid\": \"\"\n    }\n  ]\n}\n`)),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = lambda.NewFunction(ctx, \"testLambda\", &lambda.FunctionArgs{\n\t\t\tCode:    pulumi.NewFileArchive(\"lambda_function_payload.zip\"),\n\t\t\tRole:    iamForLambda.Arn,\n\t\t\tHandler: pulumi.String(\"index.test\"),\n\t\t\tRuntime: pulumi.String(\"nodejs14.x\"),\n\t\t\tEphemeralStorage: &lambda.FunctionEphemeralStorageArgs{\n\t\t\t\tSize: pulumi.Int(10240),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.aws.iam.Role;\nimport com.pulumi.aws.iam.RoleArgs;\nimport com.pulumi.aws.lambda.Function;\nimport com.pulumi.aws.lambda.FunctionArgs;\nimport com.pulumi.aws.lambda.inputs.FunctionEphemeralStorageArgs;\nimport com.pulumi.asset.FileArchive;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var iamForLambda = new Role(\"iamForLambda\", RoleArgs.builder()        \n            .assumeRolePolicy(\"\"\"\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Action\": \"sts:AssumeRole\",\n      \"Principal\": {\n        \"Service\": \"lambda.amazonaws.com\"\n      },\n      \"Effect\": \"Allow\",\n      \"Sid\": \"\"\n    }\n  ]\n}\n            \"\"\")\n            .build());\n\n        var testLambda = new Function(\"testLambda\", FunctionArgs.builder()        \n            .code(new FileArchive(\"lambda_function_payload.zip\"))\n            .role(iamForLambda.arn())\n            .handler(\"index.test\")\n            .runtime(\"nodejs14.x\")\n            .ephemeralStorage(FunctionEphemeralStorageArgs.builder()\n                .size(10240)\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  iamForLambda:\n    type: aws:iam:Role\n    properties:\n      assumeRolePolicy: |\n        {\n          \"Version\": \"2012-10-17\",\n          \"Statement\": [\n            {\n              \"Action\": \"sts:AssumeRole\",\n              \"Principal\": {\n                \"Service\": \"lambda.amazonaws.com\"\n              },\n              \"Effect\": \"Allow\",\n              \"Sid\": \"\"\n            }\n          ]\n        }\n  testLambda:\n    type: aws:lambda:Function\n    properties:\n      code:\n        Fn::FileArchive: lambda_function_payload.zip\n      role: ${iamForLambda.arn}\n      handler: index.test\n      runtime: nodejs14.x\n      ephemeralStorage:\n        size: 10240\n```\n{{% /example %}}\n{{% example %}}\n### Lambda File Systems\n\nLambda File Systems allow you to connect an Amazon Elastic File System (EFS) file system to a Lambda function to share data across function invocations, access existing data including large files, and save function state.\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as aws from \"@pulumi/aws\";\n\n// EFS file system\nconst efsForLambda = new aws.efs.FileSystem(\"efsForLambda\", {tags: {\n    Name: \"efs_for_lambda\",\n}});\n// Mount target connects the file system to the subnet\nconst alpha = new aws.efs.MountTarget(\"alpha\", {\n    fileSystemId: efsForLambda.id,\n    subnetId: aws_subnet.subnet_for_lambda.id,\n    securityGroups: [aws_security_group.sg_for_lambda.id],\n});\n// EFS access point used by lambda file system\nconst accessPointForLambda = new aws.efs.AccessPoint(\"accessPointForLambda\", {\n    fileSystemId: efsForLambda.id,\n    rootDirectory: {\n        path: \"/lambda\",\n        creationInfo: {\n            ownerGid: 1000,\n            ownerUid: 1000,\n            permissions: \"777\",\n        },\n    },\n    posixUser: {\n        gid: 1000,\n        uid: 1000,\n    },\n});\n// A lambda function connected to an EFS file system\n// ... other configuration ...\nconst example = new aws.lambda.Function(\"example\", {\n    fileSystemConfig: {\n        arn: accessPointForLambda.arn,\n        localMountPath: \"/mnt/efs\",\n    },\n    vpcConfig: {\n        subnetIds: [aws_subnet.subnet_for_lambda.id],\n        securityGroupIds: [aws_security_group.sg_for_lambda.id],\n    },\n}, {\n    dependsOn: [alpha],\n});\n```\n```python\nimport pulumi\nimport pulumi_aws as aws\n\n# EFS file system\nefs_for_lambda = aws.efs.FileSystem(\"efsForLambda\", tags={\n    \"Name\": \"efs_for_lambda\",\n})\n# Mount target connects the file system to the subnet\nalpha = aws.efs.MountTarget(\"alpha\",\n    file_system_id=efs_for_lambda.id,\n    subnet_id=aws_subnet[\"subnet_for_lambda\"][\"id\"],\n    security_groups=[aws_security_group[\"sg_for_lambda\"][\"id\"]])\n# EFS access point used by lambda file system\naccess_point_for_lambda = aws.efs.AccessPoint(\"accessPointForLambda\",\n    file_system_id=efs_for_lambda.id,\n    root_directory=aws.efs.AccessPointRootDirectoryArgs(\n        path=\"/lambda\",\n        creation_info=aws.efs.AccessPointRootDirectoryCreationInfoArgs(\n            owner_gid=1000,\n            owner_uid=1000,\n            permissions=\"777\",\n        ),\n    ),\n    posix_user=aws.efs.AccessPointPosixUserArgs(\n        gid=1000,\n        uid=1000,\n    ))\n# A lambda function connected to an EFS file system\n# ... other configuration ...\nexample = aws.lambda_.Function(\"example\",\n    file_system_config=aws.lambda_.FunctionFileSystemConfigArgs(\n        arn=access_point_for_lambda.arn,\n        local_mount_path=\"/mnt/efs\",\n    ),\n    vpc_config=aws.lambda_.FunctionVpcConfigArgs(\n        subnet_ids=[aws_subnet[\"subnet_for_lambda\"][\"id\"]],\n        security_group_ids=[aws_security_group[\"sg_for_lambda\"][\"id\"]],\n    ),\n    opts=pulumi.ResourceOptions(depends_on=[alpha]))\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Aws = Pulumi.Aws;\n\nreturn await Deployment.RunAsync(() => \n{\n    // EFS file system\n    var efsForLambda = new Aws.Efs.FileSystem(\"efsForLambda\", new()\n    {\n        Tags = \n        {\n            { \"Name\", \"efs_for_lambda\" },\n        },\n    });\n\n    // Mount target connects the file system to the subnet\n    var alpha = new Aws.Efs.MountTarget(\"alpha\", new()\n    {\n        FileSystemId = efsForLambda.Id,\n        SubnetId = aws_subnet.Subnet_for_lambda.Id,\n        SecurityGroups = new[]\n        {\n            aws_security_group.Sg_for_lambda.Id,\n        },\n    });\n\n    // EFS access point used by lambda file system\n    var accessPointForLambda = new Aws.Efs.AccessPoint(\"accessPointForLambda\", new()\n    {\n        FileSystemId = efsForLambda.Id,\n        RootDirectory = new Aws.Efs.Inputs.AccessPointRootDirectoryArgs\n        {\n            Path = \"/lambda\",\n            CreationInfo = new Aws.Efs.Inputs.AccessPointRootDirectoryCreationInfoArgs\n            {\n                OwnerGid = 1000,\n                OwnerUid = 1000,\n                Permissions = \"777\",\n            },\n        },\n        PosixUser = new Aws.Efs.Inputs.AccessPointPosixUserArgs\n        {\n            Gid = 1000,\n            Uid = 1000,\n        },\n    });\n\n    // A lambda function connected to an EFS file system\n    // ... other configuration ...\n    var example = new Aws.Lambda.Function(\"example\", new()\n    {\n        FileSystemConfig = new Aws.Lambda.Inputs.FunctionFileSystemConfigArgs\n        {\n            Arn = accessPointForLambda.Arn,\n            LocalMountPath = \"/mnt/efs\",\n        },\n        VpcConfig = new Aws.Lambda.Inputs.FunctionVpcConfigArgs\n        {\n            SubnetIds = new[]\n            {\n                aws_subnet.Subnet_for_lambda.Id,\n            },\n            SecurityGroupIds = new[]\n            {\n                aws_security_group.Sg_for_lambda.Id,\n            },\n        },\n    }, new CustomResourceOptions\n    {\n        DependsOn = new[]\n        {\n            alpha,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/efs\"\n\t\"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/lambda\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tefsForLambda, err := efs.NewFileSystem(ctx, \"efsForLambda\", &efs.FileSystemArgs{\n\t\t\tTags: pulumi.StringMap{\n\t\t\t\t\"Name\": pulumi.String(\"efs_for_lambda\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\talpha, err := efs.NewMountTarget(ctx, \"alpha\", &efs.MountTargetArgs{\n\t\t\tFileSystemId: efsForLambda.ID(),\n\t\t\tSubnetId:     pulumi.Any(aws_subnet.Subnet_for_lambda.Id),\n\t\t\tSecurityGroups: pulumi.StringArray{\n\t\t\t\tpulumi.Any(aws_security_group.Sg_for_lambda.Id),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\taccessPointForLambda, err := efs.NewAccessPoint(ctx, \"accessPointForLambda\", &efs.AccessPointArgs{\n\t\t\tFileSystemId: efsForLambda.ID(),\n\t\t\tRootDirectory: &efs.AccessPointRootDirectoryArgs{\n\t\t\t\tPath: pulumi.String(\"/lambda\"),\n\t\t\t\tCreationInfo: &efs.AccessPointRootDirectoryCreationInfoArgs{\n\t\t\t\t\tOwnerGid:    pulumi.Int(1000),\n\t\t\t\t\tOwnerUid:    pulumi.Int(1000),\n\t\t\t\t\tPermissions: pulumi.String(\"777\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tPosixUser: &efs.AccessPointPosixUserArgs{\n\t\t\t\tGid: pulumi.Int(1000),\n\t\t\t\tUid: pulumi.Int(1000),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = lambda.NewFunction(ctx, \"example\", &lambda.FunctionArgs{\n\t\t\tFileSystemConfig: &lambda.FunctionFileSystemConfigArgs{\n\t\t\t\tArn:            accessPointForLambda.Arn,\n\t\t\t\tLocalMountPath: pulumi.String(\"/mnt/efs\"),\n\t\t\t},\n\t\t\tVpcConfig: &lambda.FunctionVpcConfigArgs{\n\t\t\t\tSubnetIds: pulumi.StringArray{\n\t\t\t\t\tpulumi.Any(aws_subnet.Subnet_for_lambda.Id),\n\t\t\t\t},\n\t\t\t\tSecurityGroupIds: pulumi.StringArray{\n\t\t\t\t\tpulumi.Any(aws_security_group.Sg_for_lambda.Id),\n\t\t\t\t},\n\t\t\t},\n\t\t}, pulumi.DependsOn([]pulumi.Resource{\n\t\t\talpha,\n\t\t}))\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.aws.efs.FileSystem;\nimport com.pulumi.aws.efs.FileSystemArgs;\nimport com.pulumi.aws.efs.MountTarget;\nimport com.pulumi.aws.efs.MountTargetArgs;\nimport com.pulumi.aws.efs.AccessPoint;\nimport com.pulumi.aws.efs.AccessPointArgs;\nimport com.pulumi.aws.efs.inputs.AccessPointRootDirectoryArgs;\nimport com.pulumi.aws.efs.inputs.AccessPointRootDirectoryCreationInfoArgs;\nimport com.pulumi.aws.efs.inputs.AccessPointPosixUserArgs;\nimport com.pulumi.aws.lambda.Function;\nimport com.pulumi.aws.lambda.FunctionArgs;\nimport com.pulumi.aws.lambda.inputs.FunctionFileSystemConfigArgs;\nimport com.pulumi.aws.lambda.inputs.FunctionVpcConfigArgs;\nimport com.pulumi.resources.CustomResourceOptions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var efsForLambda = new FileSystem(\"efsForLambda\", FileSystemArgs.builder()        \n            .tags(Map.of(\"Name\", \"efs_for_lambda\"))\n            .build());\n\n        var alpha = new MountTarget(\"alpha\", MountTargetArgs.builder()        \n            .fileSystemId(efsForLambda.id())\n            .subnetId(aws_subnet.subnet_for_lambda().id())\n            .securityGroups(aws_security_group.sg_for_lambda().id())\n            .build());\n\n        var accessPointForLambda = new AccessPoint(\"accessPointForLambda\", AccessPointArgs.builder()        \n            .fileSystemId(efsForLambda.id())\n            .rootDirectory(AccessPointRootDirectoryArgs.builder()\n                .path(\"/lambda\")\n                .creationInfo(AccessPointRootDirectoryCreationInfoArgs.builder()\n                    .ownerGid(1000)\n                    .ownerUid(1000)\n                    .permissions(\"777\")\n                    .build())\n                .build())\n            .posixUser(AccessPointPosixUserArgs.builder()\n                .gid(1000)\n                .uid(1000)\n                .build())\n            .build());\n\n        var example = new Function(\"example\", FunctionArgs.builder()        \n            .fileSystemConfig(FunctionFileSystemConfigArgs.builder()\n                .arn(accessPointForLambda.arn())\n                .localMountPath(\"/mnt/efs\")\n                .build())\n            .vpcConfig(FunctionVpcConfigArgs.builder()\n                .subnetIds(aws_subnet.subnet_for_lambda().id())\n                .securityGroupIds(aws_security_group.sg_for_lambda().id())\n                .build())\n            .build(), CustomResourceOptions.builder()\n                .dependsOn(alpha)\n                .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # A lambda function connected to an EFS file system\n  example:\n    type: aws:lambda:Function\n    properties:\n      fileSystemConfig:\n        arn: ${accessPointForLambda.arn}\n        localMountPath: /mnt/efs\n      vpcConfig:\n        subnetIds:\n          - ${aws_subnet.subnet_for_lambda.id}\n        securityGroupIds:\n          - ${aws_security_group.sg_for_lambda.id}\n    options:\n      dependson:\n        - ${alpha}\n  # EFS file system\n  efsForLambda:\n    type: aws:efs:FileSystem\n    properties:\n      tags:\n        Name: efs_for_lambda\n  # Mount target connects the file system to the subnet\n  alpha:\n    type: aws:efs:MountTarget\n    properties:\n      fileSystemId: ${efsForLambda.id}\n      subnetId: ${aws_subnet.subnet_for_lambda.id}\n      securityGroups:\n        - ${aws_security_group.sg_for_lambda.id}\n  # EFS access point used by lambda file system\n  accessPointForLambda:\n    type: aws:efs:AccessPoint\n    properties:\n      fileSystemId: ${efsForLambda.id}\n      rootDirectory:\n        path: /lambda\n        creationInfo:\n          ownerGid: 1000\n          ownerUid: 1000\n          permissions: 777\n      posixUser:\n        gid: 1000\n        uid: 1000\n```\n{{% /example %}}\n{{% example %}}\n### CloudWatch Logging and Permissions\n\nFor more information about CloudWatch Logs for Lambda, see the [Lambda User Guide](https://docs.aws.amazon.com/lambda/latest/dg/monitoring-functions-logs.html).\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as aws from \"@pulumi/aws\";\n\nconst config = new pulumi.Config();\nconst lambdaFunctionName = config.get(\"lambdaFunctionName\") || \"lambda_function_name\";\n// This is to optionally manage the CloudWatch Log Group for the Lambda Function.\n// If skipping this resource configuration, also add \"logs:CreateLogGroup\" to the IAM policy below.\nconst example = new aws.cloudwatch.LogGroup(\"example\", {retentionInDays: 14});\n// See also the following AWS managed policy: AWSLambdaBasicExecutionRole\nconst lambdaLogging = new aws.iam.Policy(\"lambdaLogging\", {\n    path: \"/\",\n    description: \"IAM policy for logging from a lambda\",\n    policy: `{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Action\": [\n        \"logs:CreateLogGroup\",\n        \"logs:CreateLogStream\",\n        \"logs:PutLogEvents\"\n      ],\n      \"Resource\": \"arn:aws:logs:*:*:*\",\n      \"Effect\": \"Allow\"\n    }\n  ]\n}\n`,\n});\nconst lambdaLogs = new aws.iam.RolePolicyAttachment(\"lambdaLogs\", {\n    role: aws_iam_role.iam_for_lambda.name,\n    policyArn: lambdaLogging.arn,\n});\nconst testLambda = new aws.lambda.Function(\"testLambda\", {}, {\n    dependsOn: [\n        lambdaLogs,\n        example,\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_aws as aws\n\nconfig = pulumi.Config()\nlambda_function_name = config.get(\"lambdaFunctionName\")\nif lambda_function_name is None:\n    lambda_function_name = \"lambda_function_name\"\n# This is to optionally manage the CloudWatch Log Group for the Lambda Function.\n# If skipping this resource configuration, also add \"logs:CreateLogGroup\" to the IAM policy below.\nexample = aws.cloudwatch.LogGroup(\"example\", retention_in_days=14)\n# See also the following AWS managed policy: AWSLambdaBasicExecutionRole\nlambda_logging = aws.iam.Policy(\"lambdaLogging\",\n    path=\"/\",\n    description=\"IAM policy for logging from a lambda\",\n    policy=\"\"\"{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Action\": [\n        \"logs:CreateLogGroup\",\n        \"logs:CreateLogStream\",\n        \"logs:PutLogEvents\"\n      ],\n      \"Resource\": \"arn:aws:logs:*:*:*\",\n      \"Effect\": \"Allow\"\n    }\n  ]\n}\n\"\"\")\nlambda_logs = aws.iam.RolePolicyAttachment(\"lambdaLogs\",\n    role=aws_iam_role[\"iam_for_lambda\"][\"name\"],\n    policy_arn=lambda_logging.arn)\ntest_lambda = aws.lambda_.Function(\"testLambda\", opts=pulumi.ResourceOptions(depends_on=[\n        lambda_logs,\n        example,\n    ]))\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Aws = Pulumi.Aws;\n\nreturn await Deployment.RunAsync(() => \n{\n    var config = new Config();\n    var lambdaFunctionName = config.Get(\"lambdaFunctionName\") ?? \"lambda_function_name\";\n    // This is to optionally manage the CloudWatch Log Group for the Lambda Function.\n    // If skipping this resource configuration, also add \"logs:CreateLogGroup\" to the IAM policy below.\n    var example = new Aws.CloudWatch.LogGroup(\"example\", new()\n    {\n        RetentionInDays = 14,\n    });\n\n    // See also the following AWS managed policy: AWSLambdaBasicExecutionRole\n    var lambdaLogging = new Aws.Iam.Policy(\"lambdaLogging\", new()\n    {\n        Path = \"/\",\n        Description = \"IAM policy for logging from a lambda\",\n        PolicyDocument = @\"{\n  \"\"Version\"\": \"\"2012-10-17\"\",\n  \"\"Statement\"\": [\n    {\n      \"\"Action\"\": [\n        \"\"logs:CreateLogGroup\"\",\n        \"\"logs:CreateLogStream\"\",\n        \"\"logs:PutLogEvents\"\"\n      ],\n      \"\"Resource\"\": \"\"arn:aws:logs:*:*:*\"\",\n      \"\"Effect\"\": \"\"Allow\"\"\n    }\n  ]\n}\n\",\n    });\n\n    var lambdaLogs = new Aws.Iam.RolePolicyAttachment(\"lambdaLogs\", new()\n    {\n        Role = aws_iam_role.Iam_for_lambda.Name,\n        PolicyArn = lambdaLogging.Arn,\n    });\n\n    var testLambda = new Aws.Lambda.Function(\"testLambda\", new()\n    {\n    }, new CustomResourceOptions\n    {\n        DependsOn = new[]\n        {\n            lambdaLogs,\n            example,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/pulumi/pulumi-aws/sdk/v5/go/aws\"\n\t\"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/cloudwatch\"\n\t\"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/iam\"\n\t\"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/lambda\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tcfg := config.New(ctx, \"\")\n\t\tlambdaFunctionName := \"lambda_function_name\"\n\t\tif param := cfg.Get(\"lambdaFunctionName\"); param != \"\" {\n\t\t\tlambdaFunctionName = param\n\t\t}\n\t\texample, err := cloudwatch.NewLogGroup(ctx, \"example\", &cloudwatch.LogGroupArgs{\n\t\t\tRetentionInDays: pulumi.Int(14),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tlambdaLogging, err := iam.NewPolicy(ctx, \"lambdaLogging\", &iam.PolicyArgs{\n\t\t\tPath:        pulumi.String(\"/\"),\n\t\t\tDescription: pulumi.String(\"IAM policy for logging from a lambda\"),\n\t\t\tPolicy: pulumi.Any(fmt.Sprintf(`{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Action\": [\n        \"logs:CreateLogGroup\",\n        \"logs:CreateLogStream\",\n        \"logs:PutLogEvents\"\n      ],\n      \"Resource\": \"arn:aws:logs:*:*:*\",\n      \"Effect\": \"Allow\"\n    }\n  ]\n}\n`)),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tlambdaLogs, err := iam.NewRolePolicyAttachment(ctx, \"lambdaLogs\", &iam.RolePolicyAttachmentArgs{\n\t\t\tRole:      pulumi.Any(aws_iam_role.Iam_for_lambda.Name),\n\t\t\tPolicyArn: lambdaLogging.Arn,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = lambda.NewFunction(ctx, \"testLambda\", nil, pulumi.DependsOn([]pulumi.Resource{\n\t\t\tlambdaLogs,\n\t\t\texample,\n\t\t}))\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.aws.cloudwatch.LogGroup;\nimport com.pulumi.aws.cloudwatch.LogGroupArgs;\nimport com.pulumi.aws.iam.Policy;\nimport com.pulumi.aws.iam.PolicyArgs;\nimport com.pulumi.aws.iam.RolePolicyAttachment;\nimport com.pulumi.aws.iam.RolePolicyAttachmentArgs;\nimport com.pulumi.aws.lambda.Function;\nimport com.pulumi.aws.lambda.FunctionArgs;\nimport com.pulumi.resources.CustomResourceOptions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var config = ctx.config();\n        final var lambdaFunctionName = config.get(\"lambdaFunctionName\").orElse(\"lambda_function_name\");\n        var example = new LogGroup(\"example\", LogGroupArgs.builder()        \n            .retentionInDays(14)\n            .build());\n\n        var lambdaLogging = new Policy(\"lambdaLogging\", PolicyArgs.builder()        \n            .path(\"/\")\n            .description(\"IAM policy for logging from a lambda\")\n            .policy(\"\"\"\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Action\": [\n        \"logs:CreateLogGroup\",\n        \"logs:CreateLogStream\",\n        \"logs:PutLogEvents\"\n      ],\n      \"Resource\": \"arn:aws:logs:*:*:*\",\n      \"Effect\": \"Allow\"\n    }\n  ]\n}\n            \"\"\")\n            .build());\n\n        var lambdaLogs = new RolePolicyAttachment(\"lambdaLogs\", RolePolicyAttachmentArgs.builder()        \n            .role(aws_iam_role.iam_for_lambda().name())\n            .policyArn(lambdaLogging.arn())\n            .build());\n\n        var testLambda = new Function(\"testLambda\", FunctionArgs.Empty, CustomResourceOptions.builder()\n            .dependsOn(            \n                lambdaLogs,\n                example)\n            .build());\n\n    }\n}\n```\n```yaml\nconfiguration:\n  lambdaFunctionName:\n    type: string\n    default: lambda_function_name\nresources:\n  testLambda:\n    type: aws:lambda:Function\n    options:\n      dependson:\n        - ${lambdaLogs}\n        - ${example}\n  # This is to optionally manage the CloudWatch Log Group for the Lambda Function.\n  # If skipping this resource configuration, also add \"logs:CreateLogGroup\" to the IAM policy below.\n  example:\n    type: aws:cloudwatch:LogGroup\n    properties:\n      retentionInDays: 14\n  # See also the following AWS managed policy: AWSLambdaBasicExecutionRole\n  lambdaLogging:\n    type: aws:iam:Policy\n    properties:\n      path: /\n      description: IAM policy for logging from a lambda\n      policy: |\n        {\n          \"Version\": \"2012-10-17\",\n          \"Statement\": [\n            {\n              \"Action\": [\n                \"logs:CreateLogGroup\",\n                \"logs:CreateLogStream\",\n                \"logs:PutLogEvents\"\n              ],\n              \"Resource\": \"arn:aws:logs:*:*:*\",\n              \"Effect\": \"Allow\"\n            }\n          ]\n        }\n  lambdaLogs:\n    type: aws:iam:RolePolicyAttachment\n    properties:\n      role: ${aws_iam_role.iam_for_lambda.name}\n      policyArn: ${lambdaLogging.arn}\n```\n{{% /example %}}\n{{% example %}}\n### Lambda with Targetted Architecture\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as aws from \"@pulumi/aws\";\n\nconst iamForLambda = new aws.iam.Role(\"iamForLambda\", {assumeRolePolicy: `{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Action\": \"sts:AssumeRole\",\n      \"Principal\": {\n        \"Service\": \"lambda.amazonaws.com\"\n      },\n      \"Effect\": \"Allow\",\n      \"Sid\": \"\"\n    }\n  ]\n}\n`});\nconst testLambda = new aws.lambda.Function(\"testLambda\", {\n    code: new pulumi.asset.FileArchive(\"lambda_function_payload.zip\"),\n    role: iamForLambda.arn,\n    handler: \"index.test\",\n    runtime: \"nodejs12.x\",\n    architectures: [\"arm64\"],\n    environment: {\n        variables: {\n            foo: \"bar\",\n        },\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_aws as aws\n\niam_for_lambda = aws.iam.Role(\"iamForLambda\", assume_role_policy=\"\"\"{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Action\": \"sts:AssumeRole\",\n      \"Principal\": {\n        \"Service\": \"lambda.amazonaws.com\"\n      },\n      \"Effect\": \"Allow\",\n      \"Sid\": \"\"\n    }\n  ]\n}\n\"\"\")\ntest_lambda = aws.lambda_.Function(\"testLambda\",\n    code=pulumi.FileArchive(\"lambda_function_payload.zip\"),\n    role=iam_for_lambda.arn,\n    handler=\"index.test\",\n    runtime=\"nodejs12.x\",\n    architectures=[\"arm64\"],\n    environment=aws.lambda_.FunctionEnvironmentArgs(\n        variables={\n            \"foo\": \"bar\",\n        },\n    ))\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Aws = Pulumi.Aws;\n\nreturn await Deployment.RunAsync(() => \n{\n    var iamForLambda = new Aws.Iam.Role(\"iamForLambda\", new()\n    {\n        AssumeRolePolicy = @\"{\n  \"\"Version\"\": \"\"2012-10-17\"\",\n  \"\"Statement\"\": [\n    {\n      \"\"Action\"\": \"\"sts:AssumeRole\"\",\n      \"\"Principal\"\": {\n        \"\"Service\"\": \"\"lambda.amazonaws.com\"\"\n      },\n      \"\"Effect\"\": \"\"Allow\"\",\n      \"\"Sid\"\": \"\"\"\"\n    }\n  ]\n}\n\",\n    });\n\n    var testLambda = new Aws.Lambda.Function(\"testLambda\", new()\n    {\n        Code = new FileArchive(\"lambda_function_payload.zip\"),\n        Role = iamForLambda.Arn,\n        Handler = \"index.test\",\n        Runtime = \"nodejs12.x\",\n        Architectures = new[]\n        {\n            \"arm64\",\n        },\n        Environment = new Aws.Lambda.Inputs.FunctionEnvironmentArgs\n        {\n            Variables = \n            {\n                { \"foo\", \"bar\" },\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/pulumi/pulumi-aws/sdk/v5/go/aws\"\n\t\"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/iam\"\n\t\"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/lambda\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tiamForLambda, err := iam.NewRole(ctx, \"iamForLambda\", &iam.RoleArgs{\n\t\t\tAssumeRolePolicy: pulumi.Any(fmt.Sprintf(`{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Action\": \"sts:AssumeRole\",\n      \"Principal\": {\n        \"Service\": \"lambda.amazonaws.com\"\n      },\n      \"Effect\": \"Allow\",\n      \"Sid\": \"\"\n    }\n  ]\n}\n`)),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = lambda.NewFunction(ctx, \"testLambda\", &lambda.FunctionArgs{\n\t\t\tCode:    pulumi.NewFileArchive(\"lambda_function_payload.zip\"),\n\t\t\tRole:    iamForLambda.Arn,\n\t\t\tHandler: pulumi.String(\"index.test\"),\n\t\t\tRuntime: pulumi.String(\"nodejs12.x\"),\n\t\t\tArchitectures: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"arm64\"),\n\t\t\t},\n\t\t\tEnvironment: &lambda.FunctionEnvironmentArgs{\n\t\t\t\tVariables: pulumi.StringMap{\n\t\t\t\t\t\"foo\": pulumi.String(\"bar\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.aws.iam.Role;\nimport com.pulumi.aws.iam.RoleArgs;\nimport com.pulumi.aws.lambda.Function;\nimport com.pulumi.aws.lambda.FunctionArgs;\nimport com.pulumi.aws.lambda.inputs.FunctionEnvironmentArgs;\nimport com.pulumi.asset.FileArchive;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var iamForLambda = new Role(\"iamForLambda\", RoleArgs.builder()        \n            .assumeRolePolicy(\"\"\"\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Action\": \"sts:AssumeRole\",\n      \"Principal\": {\n        \"Service\": \"lambda.amazonaws.com\"\n      },\n      \"Effect\": \"Allow\",\n      \"Sid\": \"\"\n    }\n  ]\n}\n            \"\"\")\n            .build());\n\n        var testLambda = new Function(\"testLambda\", FunctionArgs.builder()        \n            .code(new FileArchive(\"lambda_function_payload.zip\"))\n            .role(iamForLambda.arn())\n            .handler(\"index.test\")\n            .runtime(\"nodejs12.x\")\n            .architectures(\"arm64\")\n            .environment(FunctionEnvironmentArgs.builder()\n                .variables(Map.of(\"foo\", \"bar\"))\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  iamForLambda:\n    type: aws:iam:Role\n    properties:\n      assumeRolePolicy: |\n        {\n          \"Version\": \"2012-10-17\",\n          \"Statement\": [\n            {\n              \"Action\": \"sts:AssumeRole\",\n              \"Principal\": {\n                \"Service\": \"lambda.amazonaws.com\"\n              },\n              \"Effect\": \"Allow\",\n              \"Sid\": \"\"\n            }\n          ]\n        }\n  testLambda:\n    type: aws:lambda:Function\n    properties:\n      code:\n        Fn::FileArchive: lambda_function_payload.zip\n      role: ${iamForLambda.arn}\n      handler: index.test\n      runtime: nodejs12.x\n      architectures:\n        - arm64\n      environment:\n        variables:\n          foo: bar\n```\n\nOnce you have created your deployment package you can specify it either directly as a local file (using the `filename` argument) or indirectly via Amazon S3 (using the `s3_bucket`, `s3_key` and `s3_object_version` arguments). When providing the deployment package via S3 it may be useful to use the `aws.s3.BucketObjectv2` resource to upload it.\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nLambda Functions can be imported using the `function_name`, e.g.,\n\n```sh\n $ pulumi import aws:lambda/function:Function test_lambda my_test_lambda_function\n```\n\n ",
      "properties": {
        "architectures": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Instruction set architecture for your Lambda function. Valid values are `[\"x86_64\"]` and `[\"arm64\"]`. Default is `[\"x86_64\"]`. Removing this attribute, function's architecture stay the same.\n"
        },
        "arn": {
          "type": "string",
          "description": "Amazon Resource Name (ARN) of the Amazon EFS Access Point that provides access to the file system.\n"
        },
        "code": {
          "$ref": "pulumi.json#/Archive",
          "description": "Path to the function's deployment package within the local filesystem. Conflicts with `image_uri`, `s3_bucket`, `s3_key`, and `s3_object_version`.\n"
        },
        "codeSigningConfigArn": {
          "type": "string",
          "description": "To enable code signing for this function, specify the ARN of a code-signing configuration. A code-signing configuration includes a set of signing profiles, which define the trusted publishers for this function.\n"
        },
        "deadLetterConfig": {
          "$ref": "#/types/aws:lambda/FunctionDeadLetterConfig:FunctionDeadLetterConfig",
          "description": "Configuration block. Detailed below.\n"
        },
        "description": {
          "type": "string",
          "description": "Description of what your Lambda Function does.\n"
        },
        "environment": {
          "$ref": "#/types/aws:lambda/FunctionEnvironment:FunctionEnvironment",
          "description": "Configuration block. Detailed below.\n"
        },
        "ephemeralStorage": {
          "$ref": "#/types/aws:lambda/FunctionEphemeralStorage:FunctionEphemeralStorage",
          "description": "The amount of Ephemeral storage(`/tmp`) to allocate for the Lambda Function in MB. This parameter is used to expand the total amount of Ephemeral storage available, beyond the default amount of `512`MB. Detailed below.\n"
        },
        "fileSystemConfig": {
          "$ref": "#/types/aws:lambda/FunctionFileSystemConfig:FunctionFileSystemConfig",
          "description": "Configuration block. Detailed below.\n"
        },
        "handler": {
          "type": "string",
          "description": "Function [entrypoint](https://docs.aws.amazon.com/lambda/latest/dg/walkthrough-custom-events-create-test-function.html) in your code.\n"
        },
        "imageConfig": {
          "$ref": "#/types/aws:lambda/FunctionImageConfig:FunctionImageConfig",
          "description": "Configuration block. Detailed below.\n"
        },
        "imageUri": {
          "type": "string",
          "description": "ECR image URI containing the function's deployment package. Conflicts with `filename`, `s3_bucket`, `s3_key`, and `s3_object_version`.\n"
        },
        "invokeArn": {
          "type": "string",
          "description": "ARN to be used for invoking Lambda Function from API Gateway - to be used in `aws.apigateway.Integration`'s `uri`.\n"
        },
        "kmsKeyArn": {
          "type": "string",
          "description": "Amazon Resource Name (ARN) of the AWS Key Management Service (KMS) key that is used to encrypt environment variables. If this configuration is not provided when environment variables are in use, AWS Lambda uses a default service key. If this configuration is provided when environment variables are not in use, the AWS Lambda API does not save this configuration and the provider will show a perpetual difference of adding the key. To fix the perpetual difference, remove this configuration.\n"
        },
        "lastModified": {
          "type": "string",
          "description": "Date this resource was last modified.\n"
        },
        "layers": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "List of Lambda Layer Version ARNs (maximum of 5) to attach to your Lambda Function. See [Lambda Layers](https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html)\n"
        },
        "memorySize": {
          "type": "integer",
          "description": "Amount of memory in MB your Lambda Function can use at runtime. Defaults to `128`. See [Limits](https://docs.aws.amazon.com/lambda/latest/dg/limits.html)\n"
        },
        "name": {
          "type": "string",
          "description": "Unique name for your Lambda Function.\n"
        },
        "packageType": {
          "type": "string",
          "description": "Lambda deployment package type. Valid values are `Zip` and `Image`. Defaults to `Zip`.\n"
        },
        "publish": {
          "type": "boolean",
          "description": "Whether to publish creation/change as new Lambda Function Version. Defaults to `false`.\n"
        },
        "qualifiedArn": {
          "type": "string",
          "description": "ARN identifying your Lambda Function Version (if versioning is enabled via `publish = true`).\n"
        },
        "qualifiedInvokeArn": {
          "type": "string",
          "description": "Qualified ARN (ARN with lambda version number) to be used for invoking Lambda Function from API Gateway - to be used in [`aws.apigateway.Integration`](https://www.terraform.io/docs/providers/aws/r/api_gateway_integration.html)'s `uri`.\n"
        },
        "reservedConcurrentExecutions": {
          "type": "integer",
          "description": "Amount of reserved concurrent executions for this lambda function. A value of `0` disables lambda from being triggered and `-1` removes any concurrency limitations. Defaults to Unreserved Concurrency Limits `-1`. See [Managing Concurrency](https://docs.aws.amazon.com/lambda/latest/dg/concurrent-executions.html)\n"
        },
        "role": {
          "type": "string",
          "description": "Amazon Resource Name (ARN) of the function's execution role. The role provides the function's identity and access to AWS services and resources.\n"
        },
        "runtime": {
          "type": "string",
          "description": "Identifier of the function's runtime. See [Runtimes](https://docs.aws.amazon.com/lambda/latest/dg/API_CreateFunction.html#SSS-CreateFunction-request-Runtime) for valid values.\n"
        },
        "s3Bucket": {
          "type": "string",
          "description": "S3 bucket location containing the function's deployment package. Conflicts with `filename` and `image_uri`. This bucket must reside in the same AWS region where you are creating the Lambda function.\n"
        },
        "s3Key": {
          "type": "string",
          "description": "S3 key of an object containing the function's deployment package. Conflicts with `filename` and `image_uri`.\n"
        },
        "s3ObjectVersion": {
          "type": "string",
          "description": "Object version containing the function's deployment package. Conflicts with `filename` and `image_uri`.\n"
        },
        "signingJobArn": {
          "type": "string",
          "description": "ARN of the signing job.\n"
        },
        "signingProfileVersionArn": {
          "type": "string",
          "description": "ARN of the signing profile version.\n"
        },
        "sourceCodeHash": {
          "type": "string",
          "description": "Used to trigger updates. Must be set to a base64-encoded SHA256 hash of the package file specified with either `filename` or `s3_key`. The usual way to set this is `filebase64sha256(\"file.zip\")`, where \"file.zip\" is the local filename of the lambda function source archive.\n"
        },
        "sourceCodeSize": {
          "type": "integer",
          "description": "Size in bytes of the function .zip file.\n"
        },
        "tags": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Map of tags to assign to the object. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.\n"
        },
        "tagsAll": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.\n"
        },
        "timeout": {
          "type": "integer",
          "description": "Amount of time your Lambda Function has to run in seconds. Defaults to `3`. See [Limits](https://docs.aws.amazon.com/lambda/latest/dg/limits.html).\n"
        },
        "tracingConfig": {
          "$ref": "#/types/aws:lambda/FunctionTracingConfig:FunctionTracingConfig",
          "description": "Configuration block. Detailed below.\n"
        },
        "version": {
          "type": "string",
          "description": "Latest published version of your Lambda Function.\n* `vpc_config.vpc_id` - ID of the VPC.\n"
        },
        "vpcConfig": {
          "$ref": "#/types/aws:lambda/FunctionVpcConfig:FunctionVpcConfig",
          "description": "Configuration block. Detailed below.\n"
        }
      },
      "required": [
        "architectures",
        "arn",
        "ephemeralStorage",
        "name",
        "invokeArn",
        "lastModified",
        "qualifiedArn",
        "qualifiedInvokeArn",
        "role",
        "signingJobArn",
        "signingProfileVersionArn",
        "sourceCodeHash",
        "sourceCodeSize",
        "tagsAll",
        "tracingConfig",
        "version"
      ],
      "inputProperties": {
        "architectures": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Instruction set architecture for your Lambda function. Valid values are `[\"x86_64\"]` and `[\"arm64\"]`. Default is `[\"x86_64\"]`. Removing this attribute, function's architecture stay the same.\n"
        },
        "code": {
          "$ref": "pulumi.json#/Archive",
          "description": "Path to the function's deployment package within the local filesystem. Conflicts with `image_uri`, `s3_bucket`, `s3_key`, and `s3_object_version`.\n"
        },
        "codeSigningConfigArn": {
          "type": "string",
          "description": "To enable code signing for this function, specify the ARN of a code-signing configuration. A code-signing configuration includes a set of signing profiles, which define the trusted publishers for this function.\n"
        },
        "deadLetterConfig": {
          "$ref": "#/types/aws:lambda/FunctionDeadLetterConfig:FunctionDeadLetterConfig",
          "description": "Configuration block. Detailed below.\n"
        },
        "description": {
          "type": "string",
          "description": "Description of what your Lambda Function does.\n"
        },
        "environment": {
          "$ref": "#/types/aws:lambda/FunctionEnvironment:FunctionEnvironment",
          "description": "Configuration block. Detailed below.\n"
        },
        "ephemeralStorage": {
          "$ref": "#/types/aws:lambda/FunctionEphemeralStorage:FunctionEphemeralStorage",
          "description": "The amount of Ephemeral storage(`/tmp`) to allocate for the Lambda Function in MB. This parameter is used to expand the total amount of Ephemeral storage available, beyond the default amount of `512`MB. Detailed below.\n"
        },
        "fileSystemConfig": {
          "$ref": "#/types/aws:lambda/FunctionFileSystemConfig:FunctionFileSystemConfig",
          "description": "Configuration block. Detailed below.\n"
        },
        "handler": {
          "type": "string",
          "description": "Function [entrypoint](https://docs.aws.amazon.com/lambda/latest/dg/walkthrough-custom-events-create-test-function.html) in your code.\n"
        },
        "imageConfig": {
          "$ref": "#/types/aws:lambda/FunctionImageConfig:FunctionImageConfig",
          "description": "Configuration block. Detailed below.\n"
        },
        "imageUri": {
          "type": "string",
          "description": "ECR image URI containing the function's deployment package. Conflicts with `filename`, `s3_bucket`, `s3_key`, and `s3_object_version`.\n"
        },
        "kmsKeyArn": {
          "type": "string",
          "description": "Amazon Resource Name (ARN) of the AWS Key Management Service (KMS) key that is used to encrypt environment variables. If this configuration is not provided when environment variables are in use, AWS Lambda uses a default service key. If this configuration is provided when environment variables are not in use, the AWS Lambda API does not save this configuration and the provider will show a perpetual difference of adding the key. To fix the perpetual difference, remove this configuration.\n"
        },
        "layers": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "List of Lambda Layer Version ARNs (maximum of 5) to attach to your Lambda Function. See [Lambda Layers](https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html)\n"
        },
        "memorySize": {
          "type": "integer",
          "description": "Amount of memory in MB your Lambda Function can use at runtime. Defaults to `128`. See [Limits](https://docs.aws.amazon.com/lambda/latest/dg/limits.html)\n"
        },
        "name": {
          "type": "string",
          "description": "Unique name for your Lambda Function.\n",
          "willReplaceOnChanges": true
        },
        "packageType": {
          "type": "string",
          "description": "Lambda deployment package type. Valid values are `Zip` and `Image`. Defaults to `Zip`.\n",
          "willReplaceOnChanges": true
        },
        "publish": {
          "type": "boolean",
          "description": "Whether to publish creation/change as new Lambda Function Version. Defaults to `false`.\n"
        },
        "reservedConcurrentExecutions": {
          "type": "integer",
          "description": "Amount of reserved concurrent executions for this lambda function. A value of `0` disables lambda from being triggered and `-1` removes any concurrency limitations. Defaults to Unreserved Concurrency Limits `-1`. See [Managing Concurrency](https://docs.aws.amazon.com/lambda/latest/dg/concurrent-executions.html)\n"
        },
        "role": {
          "type": "string",
          "description": "Amazon Resource Name (ARN) of the function's execution role. The role provides the function's identity and access to AWS services and resources.\n"
        },
        "runtime": {
          "type": "string",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "string",
              "$ref": "#/types/aws:lambda/Runtime:Runtime"
            }
          ],
          "description": "Identifier of the function's runtime. See [Runtimes](https://docs.aws.amazon.com/lambda/latest/dg/API_CreateFunction.html#SSS-CreateFunction-request-Runtime) for valid values.\n"
        },
        "s3Bucket": {
          "type": "string",
          "description": "S3 bucket location containing the function's deployment package. Conflicts with `filename` and `image_uri`. This bucket must reside in the same AWS region where you are creating the Lambda function.\n"
        },
        "s3Key": {
          "type": "string",
          "description": "S3 key of an object containing the function's deployment package. Conflicts with `filename` and `image_uri`.\n"
        },
        "s3ObjectVersion": {
          "type": "string",
          "description": "Object version containing the function's deployment package. Conflicts with `filename` and `image_uri`.\n"
        },
        "sourceCodeHash": {
          "type": "string",
          "description": "Used to trigger updates. Must be set to a base64-encoded SHA256 hash of the package file specified with either `filename` or `s3_key`. The usual way to set this is `filebase64sha256(\"file.zip\")`, where \"file.zip\" is the local filename of the lambda function source archive.\n"
        },
        "tags": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Map of tags to assign to the object. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.\n"
        },
        "tagsAll": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.\n"
        },
        "timeout": {
          "type": "integer",
          "description": "Amount of time your Lambda Function has to run in seconds. Defaults to `3`. See [Limits](https://docs.aws.amazon.com/lambda/latest/dg/limits.html).\n"
        },
        "tracingConfig": {
          "$ref": "#/types/aws:lambda/FunctionTracingConfig:FunctionTracingConfig",
          "description": "Configuration block. Detailed below.\n"
        },
        "vpcConfig": {
          "$ref": "#/types/aws:lambda/FunctionVpcConfig:FunctionVpcConfig",
          "description": "Configuration block. Detailed below.\n"
        }
      },
      "requiredInputs": [
        "role"
      ],
      "stateInputs": {
        "description": "Input properties used for looking up and filtering Function resources.\n",
        "properties": {
          "architectures": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Instruction set architecture for your Lambda function. Valid values are `[\"x86_64\"]` and `[\"arm64\"]`. Default is `[\"x86_64\"]`. Removing this attribute, function's architecture stay the same.\n"
          },
          "arn": {
            "type": "string",
            "description": "Amazon Resource Name (ARN) of the Amazon EFS Access Point that provides access to the file system.\n"
          },
          "code": {
            "$ref": "pulumi.json#/Archive",
            "description": "Path to the function's deployment package within the local filesystem. Conflicts with `image_uri`, `s3_bucket`, `s3_key`, and `s3_object_version`.\n"
          },
          "codeSigningConfigArn": {
            "type": "string",
            "description": "To enable code signing for this function, specify the ARN of a code-signing configuration. A code-signing configuration includes a set of signing profiles, which define the trusted publishers for this function.\n"
          },
          "deadLetterConfig": {
            "$ref": "#/types/aws:lambda/FunctionDeadLetterConfig:FunctionDeadLetterConfig",
            "description": "Configuration block. Detailed below.\n"
          },
          "description": {
            "type": "string",
            "description": "Description of what your Lambda Function does.\n"
          },
          "environment": {
            "$ref": "#/types/aws:lambda/FunctionEnvironment:FunctionEnvironment",
            "description": "Configuration block. Detailed below.\n"
          },
          "ephemeralStorage": {
            "$ref": "#/types/aws:lambda/FunctionEphemeralStorage:FunctionEphemeralStorage",
            "description": "The amount of Ephemeral storage(`/tmp`) to allocate for the Lambda Function in MB. This parameter is used to expand the total amount of Ephemeral storage available, beyond the default amount of `512`MB. Detailed below.\n"
          },
          "fileSystemConfig": {
            "$ref": "#/types/aws:lambda/FunctionFileSystemConfig:FunctionFileSystemConfig",
            "description": "Configuration block. Detailed below.\n"
          },
          "handler": {
            "type": "string",
            "description": "Function [entrypoint](https://docs.aws.amazon.com/lambda/latest/dg/walkthrough-custom-events-create-test-function.html) in your code.\n"
          },
          "imageConfig": {
            "$ref": "#/types/aws:lambda/FunctionImageConfig:FunctionImageConfig",
            "description": "Configuration block. Detailed below.\n"
          },
          "imageUri": {
            "type": "string",
            "description": "ECR image URI containing the function's deployment package. Conflicts with `filename`, `s3_bucket`, `s3_key`, and `s3_object_version`.\n"
          },
          "invokeArn": {
            "type": "string",
            "description": "ARN to be used for invoking Lambda Function from API Gateway - to be used in `aws.apigateway.Integration`'s `uri`.\n"
          },
          "kmsKeyArn": {
            "type": "string",
            "description": "Amazon Resource Name (ARN) of the AWS Key Management Service (KMS) key that is used to encrypt environment variables. If this configuration is not provided when environment variables are in use, AWS Lambda uses a default service key. If this configuration is provided when environment variables are not in use, the AWS Lambda API does not save this configuration and the provider will show a perpetual difference of adding the key. To fix the perpetual difference, remove this configuration.\n"
          },
          "lastModified": {
            "type": "string",
            "description": "Date this resource was last modified.\n"
          },
          "layers": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of Lambda Layer Version ARNs (maximum of 5) to attach to your Lambda Function. See [Lambda Layers](https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html)\n"
          },
          "memorySize": {
            "type": "integer",
            "description": "Amount of memory in MB your Lambda Function can use at runtime. Defaults to `128`. See [Limits](https://docs.aws.amazon.com/lambda/latest/dg/limits.html)\n"
          },
          "name": {
            "type": "string",
            "description": "Unique name for your Lambda Function.\n",
            "willReplaceOnChanges": true
          },
          "packageType": {
            "type": "string",
            "description": "Lambda deployment package type. Valid values are `Zip` and `Image`. Defaults to `Zip`.\n",
            "willReplaceOnChanges": true
          },
          "publish": {
            "type": "boolean",
            "description": "Whether to publish creation/change as new Lambda Function Version. Defaults to `false`.\n"
          },
          "qualifiedArn": {
            "type": "string",
            "description": "ARN identifying your Lambda Function Version (if versioning is enabled via `publish = true`).\n"
          },
          "qualifiedInvokeArn": {
            "type": "string",
            "description": "Qualified ARN (ARN with lambda version number) to be used for invoking Lambda Function from API Gateway - to be used in [`aws.apigateway.Integration`](https://www.terraform.io/docs/providers/aws/r/api_gateway_integration.html)'s `uri`.\n"
          },
          "reservedConcurrentExecutions": {
            "type": "integer",
            "description": "Amount of reserved concurrent executions for this lambda function. A value of `0` disables lambda from being triggered and `-1` removes any concurrency limitations. Defaults to Unreserved Concurrency Limits `-1`. See [Managing Concurrency](https://docs.aws.amazon.com/lambda/latest/dg/concurrent-executions.html)\n"
          },
          "role": {
            "type": "string",
            "description": "Amazon Resource Name (ARN) of the function's execution role. The role provides the function's identity and access to AWS services and resources.\n"
          },
          "runtime": {
            "type": "string",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "string",
                "$ref": "#/types/aws:lambda/Runtime:Runtime"
              }
            ],
            "description": "Identifier of the function's runtime. See [Runtimes](https://docs.aws.amazon.com/lambda/latest/dg/API_CreateFunction.html#SSS-CreateFunction-request-Runtime) for valid values.\n"
          },
          "s3Bucket": {
            "type": "string",
            "description": "S3 bucket location containing the function's deployment package. Conflicts with `filename` and `image_uri`. This bucket must reside in the same AWS region where you are creating the Lambda function.\n"
          },
          "s3Key": {
            "type": "string",
            "description": "S3 key of an object containing the function's deployment package. Conflicts with `filename` and `image_uri`.\n"
          },
          "s3ObjectVersion": {
            "type": "string",
            "description": "Object version containing the function's deployment package. Conflicts with `filename` and `image_uri`.\n"
          },
          "signingJobArn": {
            "type": "string",
            "description": "ARN of the signing job.\n"
          },
          "signingProfileVersionArn": {
            "type": "string",
            "description": "ARN of the signing profile version.\n"
          },
          "sourceCodeHash": {
            "type": "string",
            "description": "Used to trigger updates. Must be set to a base64-encoded SHA256 hash of the package file specified with either `filename` or `s3_key`. The usual way to set this is `filebase64sha256(\"file.zip\")`, where \"file.zip\" is the local filename of the lambda function source archive.\n"
          },
          "sourceCodeSize": {
            "type": "integer",
            "description": "Size in bytes of the function .zip file.\n"
          },
          "tags": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Map of tags to assign to the object. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.\n"
          },
          "tagsAll": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.\n"
          },
          "timeout": {
            "type": "integer",
            "description": "Amount of time your Lambda Function has to run in seconds. Defaults to `3`. See [Limits](https://docs.aws.amazon.com/lambda/latest/dg/limits.html).\n"
          },
          "tracingConfig": {
            "$ref": "#/types/aws:lambda/FunctionTracingConfig:FunctionTracingConfig",
            "description": "Configuration block. Detailed below.\n"
          },
          "version": {
            "type": "string",
            "description": "Latest published version of your Lambda Function.\n* `vpc_config.vpc_id` - ID of the VPC.\n"
          },
          "vpcConfig": {
            "$ref": "#/types/aws:lambda/FunctionVpcConfig:FunctionVpcConfig",
            "description": "Configuration block. Detailed below.\n"
          }
        },
        "type": "object"
      }
    }
  },
  "functions": {
  }
}
